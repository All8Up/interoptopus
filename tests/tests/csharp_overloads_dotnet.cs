// Automatically generated by Interoptopus.

#pragma warning disable 0105
using System;
using System.Text;
using System.Threading.Tasks;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Runtime.InteropServices.Marshalling;
using System.Runtime.CompilerServices;
using My.Company;
using My.Company.Common;
#pragma warning restore 0105

namespace My.Company
{
    public static partial class Interop
    {
        public const string NativeLib = "library";

        static Interop()
        {
            var api_version = Interop.pattern_api_guard();
            if (api_version != 18400386674043818275ul)
            {
                throw new TypeLoadException($"API reports hash {api_version} which differs from hash in bindings (18400386674043818275). You probably forgot to update / copy either the bindings or the library.");
            }
        }

        public const byte U8 = (byte) 255;

        public const float F32_MIN_POSITIVE = (float) 0.000000000000000000000000000000000000011754944;

        public const int COMPUTED_I32 = (int) -2147483647;


        [LibraryImport(NativeLib, EntryPoint = "interoptopus_string_create")]
        public static partial long interoptopus_string_create(IntPtr utf8, ulong len, ref Utf8String rval);


        [LibraryImport(NativeLib, EntryPoint = "interoptopus_string_destroy")]
        public static partial long interoptopus_string_destroy(Utf8String utf8);

        public static unsafe long interoptopus_string_destroy(string utf8)
        {
            var utf8_wrapped = new Utf8String(utf8);
            try
            {
                return interoptopus_string_destroy(utf8_wrapped);
            }
            finally
            {
                utf8_wrapped.Dispose();
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "alignment_1")]
        public static partial Packed2 alignment_1(Packed1 a);


        [LibraryImport(NativeLib, EntryPoint = "array_1")]
        public static partial byte array_1(Array x);


        [LibraryImport(NativeLib, EntryPoint = "array_2")]
        public static partial Array array_2();


        [LibraryImport(NativeLib, EntryPoint = "array_3")]
        public static partial void array_3(ref Array arr);


        [LibraryImport(NativeLib, EntryPoint = "char_array_1")]
        public static partial CharArray char_array_1();


        [LibraryImport(NativeLib, EntryPoint = "char_array_2")]
        public static partial CharArray char_array_2(CharArray arr);


        [LibraryImport(NativeLib, EntryPoint = "char_array_3")]
        public static partial byte char_array_3(ref CharArray arr);


        [LibraryImport(NativeLib, EntryPoint = "nested_array_1")]
        public static partial NestedArray nested_array_1();


        [LibraryImport(NativeLib, EntryPoint = "nested_array_2")]
        public static partial void nested_array_2(ref NestedArray result);


        [LibraryImport(NativeLib, EntryPoint = "nested_array_3")]
        public static partial byte nested_array_3(NestedArray input);


        [LibraryImport(NativeLib, EntryPoint = "behavior_sleep")]
        public static partial void behavior_sleep(ulong millis);


        [LibraryImport(NativeLib, EntryPoint = "behavior_panics")]
        public static partial ResultError behavior_panics();


        [LibraryImport(NativeLib, EntryPoint = "fnptr_1")]
        public static partial byte fnptr_1(InteropDelegate_fn_u8_rval_u8 callback, byte value);


        [LibraryImport(NativeLib, EntryPoint = "fnptr_2")]
        public static partial void fnptr_2(InteropDelegate_fn_CharArray_native callback, CharArray value);


        [LibraryImport(NativeLib, EntryPoint = "generic_1a")]
        public static partial uint generic_1a(Genericu32 x, Phantomu8 y);


        [LibraryImport(NativeLib, EntryPoint = "generic_1b")]
        public static partial byte generic_1b(Genericu8 x, Phantomu8 y);


        [LibraryImport(NativeLib, EntryPoint = "generic_1c")]
        public static partial byte generic_1c(ref Genericu8 x, ref Genericu8 y);


        [LibraryImport(NativeLib, EntryPoint = "generic_2")]
        public static partial byte generic_2(IntPtr x);


        [LibraryImport(NativeLib, EntryPoint = "generic_3")]
        public static partial byte generic_3(IntPtr x);


        [LibraryImport(NativeLib, EntryPoint = "generic_4")]
        public static partial byte generic_4(IntPtr x);


        [LibraryImport(NativeLib, EntryPoint = "generic_5")]
        [return: MarshalAs(UnmanagedType.U1)]
        public static partial bool generic_5(Weird1u32 x, Weird2u8 y);


        [LibraryImport(NativeLib, EntryPoint = "meta_ambiguous_1")]
        public static partial Vec1 meta_ambiguous_1(Vec1 x);


        [LibraryImport(NativeLib, EntryPoint = "meta_ambiguous_2")]
        public static partial Vec2 meta_ambiguous_2(Vec2 x);


        [LibraryImport(NativeLib, EntryPoint = "meta_ambiguous_3")]
        [return: MarshalAs(UnmanagedType.U1)]
        public static partial bool meta_ambiguous_3(Vec1 x, Vec2 y);


        /// This function has documentation.
        [LibraryImport(NativeLib, EntryPoint = "meta_documented")]
        public static partial EnumDocumented meta_documented(StructDocumented x);


        [LibraryImport(NativeLib, EntryPoint = "meta_visibility1")]
        public static partial void meta_visibility1(Visibility1 x, Visibility2 y);


        [LibraryImport(NativeLib, EntryPoint = "meta_renamed")]
        public static partial EnumRenamed meta_renamed(StructRenamed x);


        [LibraryImport(NativeLib, EntryPoint = "namespaced_inner_option")]
        public static partial OptionVec namespaced_inner_option(OptionVec x);


        [LibraryImport(NativeLib, EntryPoint = "namespaced_inner_slice")]
        public static partial SliceVec namespaced_inner_slice(SliceVec x);

        public static unsafe SliceVec namespaced_inner_slice(ReadOnlySpan<Vec> x)
        {
            fixed (void* ptr_x = x)
            {
                var x_slice = new SliceVec(new IntPtr(ptr_x), (ulong) x.Length);
                try
                {
                    return namespaced_inner_slice(x_slice);
                }
                finally
                {
                }
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "namespaced_inner_slice_mut")]
        public static partial SliceMutVec namespaced_inner_slice_mut(SliceMutVec x);

        public static unsafe SliceMutVec namespaced_inner_slice_mut(Span<Vec> x)
        {
            fixed (void* ptr_x = x)
            {
                var x_slice = new SliceMutVec(new IntPtr(ptr_x), (ulong) x.Length);
                try
                {
                    return namespaced_inner_slice_mut(x_slice);
                }
                finally
                {
                }
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "namespaced_type")]
        public static partial Vec namespaced_type(Vec x);


        [LibraryImport(NativeLib, EntryPoint = "primitive_args_5")]
        public static partial long primitive_args_5(long x0, long x1, long x2, long x3, long x4);


        [LibraryImport(NativeLib, EntryPoint = "primitive_args_10")]
        public static partial long primitive_args_10(long x0, long x1, long x2, long x3, long x4, long x5, long x6, long x7, long x8, long x9);


        [LibraryImport(NativeLib, EntryPoint = "primitive_bool")]
        [return: MarshalAs(UnmanagedType.U1)]
        public static partial bool primitive_bool([MarshalAs(UnmanagedType.U1)] bool x);


        [LibraryImport(NativeLib, EntryPoint = "primitive_f32")]
        public static partial float primitive_f32(float x);


        [LibraryImport(NativeLib, EntryPoint = "primitive_f64")]
        public static partial double primitive_f64(double x);


        [LibraryImport(NativeLib, EntryPoint = "primitive_i16")]
        public static partial short primitive_i16(short x);


        [LibraryImport(NativeLib, EntryPoint = "primitive_i32")]
        public static partial int primitive_i32(int x);


        [LibraryImport(NativeLib, EntryPoint = "primitive_i64")]
        public static partial long primitive_i64(long x);


        [LibraryImport(NativeLib, EntryPoint = "primitive_i8")]
        public static partial sbyte primitive_i8(sbyte x);


        [LibraryImport(NativeLib, EntryPoint = "primitive_u16")]
        public static partial ushort primitive_u16(ushort x);


        [LibraryImport(NativeLib, EntryPoint = "primitive_u32")]
        public static partial uint primitive_u32(uint x);


        [LibraryImport(NativeLib, EntryPoint = "primitive_u64")]
        public static partial ulong primitive_u64(ulong x);


        [LibraryImport(NativeLib, EntryPoint = "primitive_u8")]
        public static partial byte primitive_u8(byte x);


        [LibraryImport(NativeLib, EntryPoint = "primitive_void")]
        public static partial void primitive_void();


        [LibraryImport(NativeLib, EntryPoint = "primitive_void2")]
        public static partial void primitive_void2();


        [LibraryImport(NativeLib, EntryPoint = "ptr1")]
        public static partial IntPtr ptr1(ref long x);


        [LibraryImport(NativeLib, EntryPoint = "ptr2")]
        public static partial IntPtr ptr2(ref IntPtr x);


        /// # Safety
        ///
        /// Parameter x must point to valid data.
        [LibraryImport(NativeLib, EntryPoint = "ptr3")]
        public static partial IntPtr ptr3(ref long x);


        [LibraryImport(NativeLib, EntryPoint = "ref1")]
        public static partial IntPtr ref1(ref long x);


        [LibraryImport(NativeLib, EntryPoint = "ref2")]
        public static partial IntPtr ref2(ref long x);


        [LibraryImport(NativeLib, EntryPoint = "ref3")]
        [return: MarshalAs(UnmanagedType.U1)]
        public static partial bool ref3(ref long x);


        [LibraryImport(NativeLib, EntryPoint = "ref4")]
        [return: MarshalAs(UnmanagedType.U1)]
        public static partial bool ref4(ref long x);


        [LibraryImport(NativeLib, EntryPoint = "struct1")]
        public static partial Tupled struct1(Tupled x);


        [LibraryImport(NativeLib, EntryPoint = "struct2")]
        public static partial ResultError struct2(Vec3f32 a, ref Tupled b);


        [LibraryImport(NativeLib, EntryPoint = "struct3")]
        [return: MarshalAs(UnmanagedType.U1)]
        public static partial bool struct3(BoolField x);


        [LibraryImport(NativeLib, EntryPoint = "pattern_ascii_pointer_1")]
        public static partial uint pattern_ascii_pointer_1([MarshalAs(UnmanagedType.LPStr)] string x);


        [LibraryImport(NativeLib, EntryPoint = "pattern_ascii_pointer_2")]
        public static partial IntPtr pattern_ascii_pointer_2();


        [LibraryImport(NativeLib, EntryPoint = "pattern_ascii_pointer_3")]
        public static partial IntPtr pattern_ascii_pointer_3([MarshalAs(UnmanagedType.LPStr)] string x);


        [LibraryImport(NativeLib, EntryPoint = "pattern_ascii_pointer_4")]
        public static partial IntPtr pattern_ascii_pointer_4([MarshalAs(UnmanagedType.LPStr)] string x, uint l);


        [LibraryImport(NativeLib, EntryPoint = "pattern_ascii_pointer_5")]
        public static partial byte pattern_ascii_pointer_5([MarshalAs(UnmanagedType.LPStr)] string x, uint i);


        [LibraryImport(NativeLib, EntryPoint = "pattern_ascii_pointer_return_slice")]
        public static partial SliceUseCStrPtr pattern_ascii_pointer_return_slice();


        [LibraryImport(NativeLib, EntryPoint = "pattern_string_1")]
        public static partial Utf8String pattern_string_1(Utf8String x);

        public static unsafe Utf8String pattern_string_1(string x)
        {
            var x_wrapped = new Utf8String(x);
            try
            {
                return pattern_string_1(x_wrapped);
            }
            finally
            {
                x_wrapped.Dispose();
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "pattern_string_2")]
        public static partial uint pattern_string_2(Utf8String x);

        public static unsafe uint pattern_string_2(string x)
        {
            var x_wrapped = new Utf8String(x);
            try
            {
                return pattern_string_2(x_wrapped);
            }
            finally
            {
                x_wrapped.Dispose();
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "pattern_string_3")]
        public static partial Utf8String pattern_string_3();


        [LibraryImport(NativeLib, EntryPoint = "pattern_string_4")]
        public static partial UseString pattern_string_4(UseString x);


        [LibraryImport(NativeLib, EntryPoint = "pattern_string_5")]
        public static partial ResultUseStringError pattern_string_5(UseString x);


        [LibraryImport(NativeLib, EntryPoint = "pattern_string_6a")]
        public static partial ResultError pattern_string_6a(ref UseString ignored);


        [LibraryImport(NativeLib, EntryPoint = "pattern_string_6b")]
        public static partial ResultError pattern_string_6b(ref UseString y);


        [LibraryImport(NativeLib, EntryPoint = "pattern_string_7")]
        public static partial ResultUtf8StringError pattern_string_7(SliceUtf8String x, ulong i);

        public static unsafe ResultUtf8StringError pattern_string_7(string[] x, ulong i)
        {
            var x_wrapped = new SliceUtf8String(x);
            try
            {
                return pattern_string_7(x_wrapped, i);
            }
            finally
            {
                x_wrapped.Dispose();
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "pattern_string_8")]
        public static partial ResultUseStringError pattern_string_8(SliceUseString x, ulong i);

        public static unsafe ResultUseStringError pattern_string_8(UseString[] x, ulong i)
        {
            var x_wrapped = new SliceUseString(x);
            try
            {
                return pattern_string_8(x_wrapped, i);
            }
            finally
            {
                x_wrapped.Dispose();
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "pattern_ffi_slice_1")]
        public static partial uint pattern_ffi_slice_1(SliceU32 ffi_slice);

        public static unsafe uint pattern_ffi_slice_1(ReadOnlySpan<uint> ffi_slice)
        {
            fixed (void* ptr_ffi_slice = ffi_slice)
            {
                var ffi_slice_slice = new SliceU32(new IntPtr(ptr_ffi_slice), (ulong) ffi_slice.Length);
                try
                {
                    return pattern_ffi_slice_1(ffi_slice_slice);
                }
                finally
                {
                }
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "pattern_ffi_slice_1b")]
        public static partial uint pattern_ffi_slice_1b(SliceMutU32 ffi_slice);

        public static unsafe uint pattern_ffi_slice_1b(Span<uint> ffi_slice)
        {
            fixed (void* ptr_ffi_slice = ffi_slice)
            {
                var ffi_slice_slice = new SliceMutU32(new IntPtr(ptr_ffi_slice), (ulong) ffi_slice.Length);
                try
                {
                    return pattern_ffi_slice_1b(ffi_slice_slice);
                }
                finally
                {
                }
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "pattern_ffi_slice_2")]
        public static partial Vec3f32 pattern_ffi_slice_2(SliceVec3f32 ffi_slice, int i);

        public static unsafe Vec3f32 pattern_ffi_slice_2(ReadOnlySpan<Vec3f32> ffi_slice, int i)
        {
            fixed (void* ptr_ffi_slice = ffi_slice)
            {
                var ffi_slice_slice = new SliceVec3f32(new IntPtr(ptr_ffi_slice), (ulong) ffi_slice.Length);
                try
                {
                    return pattern_ffi_slice_2(ffi_slice_slice, i);
                }
                finally
                {
                }
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "pattern_ffi_slice_3")]
        public static partial void pattern_ffi_slice_3(SliceMutU8 slice, CallbackSliceMut callback);

        public static unsafe void pattern_ffi_slice_3(Span<byte> slice, CallbackSliceMutDelegate callback)
        {
            fixed (void* ptr_slice = slice)
            {
                var slice_slice = new SliceMutU8(new IntPtr(ptr_slice), (ulong) slice.Length);
                var callback_wrapped = new CallbackSliceMut(callback);
                try
                {
                    pattern_ffi_slice_3(slice_slice, callback_wrapped);
                }
                finally
                {
                    callback_wrapped.Dispose();
                }
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "pattern_ffi_slice_4")]
        public static partial void pattern_ffi_slice_4(SliceU8 slice, SliceMutU8 slice2);

        public static unsafe void pattern_ffi_slice_4(ReadOnlySpan<byte> slice, Span<byte> slice2)
        {
            fixed (void* ptr_slice = slice)
            {
                var slice_slice = new SliceU8(new IntPtr(ptr_slice), (ulong) slice.Length);
                fixed (void* ptr_slice2 = slice2)
                {
                    var slice2_slice = new SliceMutU8(new IntPtr(ptr_slice2), (ulong) slice2.Length);
                    try
                    {
                        pattern_ffi_slice_4(slice_slice, slice2_slice);
                    }
                    finally
                    {
                    }
                }
            }
        }

        /// It is (probably?) UB to call this function with the same FFI slice data at the same time.
        [LibraryImport(NativeLib, EntryPoint = "pattern_ffi_slice_5")]
        public static partial void pattern_ffi_slice_5(ref SliceU8 slice, ref SliceMutU8 slice2);

        /// It is (probably?) UB to call this function with the same FFI slice data at the same time.
        public static unsafe void pattern_ffi_slice_5(ReadOnlySpan<byte> slice, Span<byte> slice2)
        {
            fixed (void* ptr_slice = slice)
            {
                var slice_slice = new SliceU8(new IntPtr(ptr_slice), (ulong) slice.Length);
                fixed (void* ptr_slice2 = slice2)
                {
                    var slice2_slice = new SliceMutU8(new IntPtr(ptr_slice2), (ulong) slice2.Length);
                    try
                    {
                        pattern_ffi_slice_5(ref slice_slice, ref slice2_slice);
                    }
                    finally
                    {
                    }
                }
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "pattern_ffi_slice_6")]
        public static partial void pattern_ffi_slice_6(ref SliceMutU8 slice, CallbackU8 callback);

        public static unsafe void pattern_ffi_slice_6(Span<byte> slice, CallbackU8Delegate callback)
        {
            fixed (void* ptr_slice = slice)
            {
                var slice_slice = new SliceMutU8(new IntPtr(ptr_slice), (ulong) slice.Length);
                var callback_wrapped = new CallbackU8(callback);
                try
                {
                    pattern_ffi_slice_6(ref slice_slice, callback_wrapped);
                }
                finally
                {
                    callback_wrapped.Dispose();
                }
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "pattern_ffi_slice_8")]
        public static partial void pattern_ffi_slice_8(ref SliceMutCharArray slice, CallbackCharArray2 callback);

        public static unsafe void pattern_ffi_slice_8(Span<CharArray> slice, CallbackCharArray2Delegate callback)
        {
            fixed (void* ptr_slice = slice)
            {
                var slice_slice = new SliceMutCharArray(new IntPtr(ptr_slice), (ulong) slice.Length);
                var callback_wrapped = new CallbackCharArray2(callback);
                try
                {
                    pattern_ffi_slice_8(ref slice_slice, callback_wrapped);
                }
                finally
                {
                    callback_wrapped.Dispose();
                }
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "pattern_ffi_slice_delegate")]
        public static partial byte pattern_ffi_slice_delegate(CallbackFFISlice callback);

        public static unsafe byte pattern_ffi_slice_delegate(CallbackFFISliceDelegate callback)
        {
            var callback_wrapped = new CallbackFFISlice(callback);
            try
            {
                return pattern_ffi_slice_delegate(callback_wrapped);
            }
            finally
            {
                callback_wrapped.Dispose();
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "pattern_ffi_slice_delegate_huge")]
        public static partial Vec3f32 pattern_ffi_slice_delegate_huge(CallbackHugeVecSlice callback);

        public static unsafe Vec3f32 pattern_ffi_slice_delegate_huge(CallbackHugeVecSliceDelegate callback)
        {
            var callback_wrapped = new CallbackHugeVecSlice(callback);
            try
            {
                return pattern_ffi_slice_delegate_huge(callback_wrapped);
            }
            finally
            {
                callback_wrapped.Dispose();
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "pattern_ffi_option_1")]
        public static partial OptionInner pattern_ffi_option_1(OptionInner ffi_slice);


        [LibraryImport(NativeLib, EntryPoint = "pattern_ffi_option_2")]
        public static partial Inner pattern_ffi_option_2(OptionInner ffi_slice);


        [LibraryImport(NativeLib, EntryPoint = "pattern_ffi_bool")]
        public static partial Bool pattern_ffi_bool(Bool ffi_bool);


        [LibraryImport(NativeLib, EntryPoint = "pattern_ffi_cchar")]
        public static partial sbyte pattern_ffi_cchar(sbyte ffi_cchar);


        [LibraryImport(NativeLib, EntryPoint = "pattern_ffi_cchar_const_pointer")]
        public static partial IntPtr pattern_ffi_cchar_const_pointer(IntPtr ffi_cchar);


        [LibraryImport(NativeLib, EntryPoint = "pattern_ffi_cchar_mut_pointer")]
        public static partial IntPtr pattern_ffi_cchar_mut_pointer(IntPtr ffi_cchar);


        [LibraryImport(NativeLib, EntryPoint = "pattern_result_1")]
        public static partial ResultU32Error pattern_result_1(ResultU32Error x);


        [LibraryImport(NativeLib, EntryPoint = "pattern_result_2")]
        public static partial ResultError pattern_result_2();


        [LibraryImport(NativeLib, EntryPoint = "pattern_result_3")]
        public static partial ResultError pattern_result_3(ResultError x);


        [LibraryImport(NativeLib, EntryPoint = "pattern_api_guard")]
        public static partial ulong pattern_api_guard();


        [LibraryImport(NativeLib, EntryPoint = "pattern_callback_1")]
        public static partial uint pattern_callback_1(MyCallback callback, uint x);

        public static unsafe uint pattern_callback_1(MyCallbackDelegate callback, uint x)
        {
            var callback_wrapped = new MyCallback(callback);
            try
            {
                return pattern_callback_1(callback_wrapped, x);
            }
            finally
            {
                callback_wrapped.Dispose();
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "pattern_callback_2")]
        public static partial MyCallbackVoid pattern_callback_2(MyCallbackVoid callback);

        public static unsafe MyCallbackVoid pattern_callback_2(MyCallbackVoidDelegate callback)
        {
            var callback_wrapped = new MyCallbackVoid(callback);
            try
            {
                return pattern_callback_2(callback_wrapped);
            }
            finally
            {
                callback_wrapped.Dispose();
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "pattern_callback_4")]
        public static partial uint pattern_callback_4(MyCallbackNamespaced callback, uint x);

        public static unsafe uint pattern_callback_4(MyCallbackNamespacedDelegate callback, uint x)
        {
            var callback_wrapped = new MyCallbackNamespaced(callback);
            try
            {
                return pattern_callback_4(callback_wrapped, x);
            }
            finally
            {
                callback_wrapped.Dispose();
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "pattern_callback_5")]
        public static partial SumDelegate1 pattern_callback_5();


        [LibraryImport(NativeLib, EntryPoint = "pattern_callback_6")]
        public static partial SumDelegate2 pattern_callback_6();


        [LibraryImport(NativeLib, EntryPoint = "pattern_callback_7")]
        public static partial ResultError pattern_callback_7(SumDelegateReturn c1, SumDelegateReturn2 c2, int x, int i, ref int o);

        public static unsafe ResultError pattern_callback_7(SumDelegateReturnDelegate c1, SumDelegateReturn2Delegate c2, int x, int i, ref int o)
        {
            var c1_wrapped = new SumDelegateReturn(c1);
            var c2_wrapped = new SumDelegateReturn2(c2);
            try
            {
                return pattern_callback_7(c1_wrapped, c2_wrapped, x, i, ref o);
            }
            finally
            {
                c1_wrapped.Dispose();
                c2_wrapped.Dispose();
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "pattern_callback_8")]
        public static partial void pattern_callback_8(StringCallback cb, NestedStringCallback cb2, Utf8String s);

        public static unsafe void pattern_callback_8(StringCallbackDelegate cb, NestedStringCallbackDelegate cb2, string s)
        {
            var cb_wrapped = new StringCallback(cb);
            var cb2_wrapped = new NestedStringCallback(cb2);
            var s_wrapped = new Utf8String(s);
            try
            {
                pattern_callback_8(cb_wrapped, cb2_wrapped, s_wrapped);
            }
            finally
            {
                cb_wrapped.Dispose();
                cb2_wrapped.Dispose();
                s_wrapped.Dispose();
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "pattern_surrogates_1")]
        public static partial void pattern_surrogates_1(Local s, ref Container c);


        /// Destroys the given instance.
        ///
        /// # Safety
        ///
        /// The passed parameter MUST have been created with the corresponding init function;
        /// passing any other value results in undefined behavior.
        [LibraryImport(NativeLib, EntryPoint = "service_async_destroy")]
        public static partial ResultConstPtrServiceAsyncError service_async_destroy(IntPtr _context);


        [LibraryImport(NativeLib, EntryPoint = "service_async_new")]
        public static partial ResultConstPtrServiceAsyncError service_async_new();


        [LibraryImport(NativeLib, EntryPoint = "service_async_return_after_ms")]
        public static partial ResultError service_async_return_after_ms(IntPtr _context, ulong x, ulong ms, AsyncHelper _async_callback);

        public static unsafe Task<ulong> service_async_return_after_ms(IntPtr _context, ulong x, ulong ms)
        {
            var cs = new TaskCompletionSource<ulong>();
            GCHandle pinned = default;
            var cb = new AsyncHelper((x) => {
                var unmanaged = Marshal.PtrToStructure<ResultU64Error.Unmanaged>(x);
                var marshaller = new ResultU64Error.Marshaller(unmanaged);
                var managed = marshaller.ToManaged();
                if (managed.IsOk()) { cs.SetResult(managed.Ok()); }
                else { cs.SetException(new InteropException<Error>(managed.Err())); }
                pinned.Free();
            });
            pinned = GCHandle.Alloc(cb);
            try
            {
                service_async_return_after_ms(_context, x, ms, cb).Ok();
                return cs.Task;
            }
            finally
            {
            }
            return cs.Task;
        }

        [LibraryImport(NativeLib, EntryPoint = "service_async_process_struct")]
        public static partial ResultError service_async_process_struct(IntPtr _context, NestedArray x, AsyncHelper _async_callback);

        public static unsafe Task<NestedArray> service_async_process_struct(IntPtr _context, NestedArray x)
        {
            var cs = new TaskCompletionSource<NestedArray>();
            GCHandle pinned = default;
            var cb = new AsyncHelper((x) => {
                var unmanaged = Marshal.PtrToStructure<ResultNestedArrayError.Unmanaged>(x);
                var marshaller = new ResultNestedArrayError.Marshaller(unmanaged);
                var managed = marshaller.ToManaged();
                if (managed.IsOk()) { cs.SetResult(managed.Ok()); }
                else { cs.SetException(new InteropException<Error>(managed.Err())); }
                pinned.Free();
            });
            pinned = GCHandle.Alloc(cb);
            try
            {
                service_async_process_struct(_context, x, cb).Ok();
                return cs.Task;
            }
            finally
            {
            }
            return cs.Task;
        }

        [LibraryImport(NativeLib, EntryPoint = "service_async_handle_string")]
        public static partial ResultError service_async_handle_string(IntPtr _context, Utf8String s, AsyncHelper _async_callback);

        public static unsafe Task<string> service_async_handle_string(IntPtr _context, string s)
        {
            var cs = new TaskCompletionSource<string>();
            GCHandle pinned = default;
            var cb = new AsyncHelper((x) => {
                var unmanaged = Marshal.PtrToStructure<ResultUtf8StringError.Unmanaged>(x);
                var marshaller = new ResultUtf8StringError.Marshaller(unmanaged);
                var managed = marshaller.ToManaged();
                if (managed.IsOk()) { cs.SetResult(managed.Ok()); }
                else { cs.SetException(new InteropException<Error>(managed.Err())); }
                pinned.Free();
            });
            pinned = GCHandle.Alloc(cb);
            var s_wrapped = new Utf8String(s);
            try
            {
                service_async_handle_string(_context, s_wrapped, cb).Ok();
                return cs.Task;
            }
            finally
            {
                s_wrapped.Dispose();
            }
            return cs.Task;
        }

        [LibraryImport(NativeLib, EntryPoint = "service_async_handle_nested_string")]
        public static partial ResultError service_async_handle_nested_string(IntPtr _context, Utf8String s, AsyncHelper _async_callback);

        public static unsafe Task<UseString> service_async_handle_nested_string(IntPtr _context, string s)
        {
            var cs = new TaskCompletionSource<UseString>();
            GCHandle pinned = default;
            var cb = new AsyncHelper((x) => {
                var unmanaged = Marshal.PtrToStructure<ResultUseStringError.Unmanaged>(x);
                var marshaller = new ResultUseStringError.Marshaller(unmanaged);
                var managed = marshaller.ToManaged();
                if (managed.IsOk()) { cs.SetResult(managed.Ok()); }
                else { cs.SetException(new InteropException<Error>(managed.Err())); }
                pinned.Free();
            });
            pinned = GCHandle.Alloc(cb);
            var s_wrapped = new Utf8String(s);
            try
            {
                service_async_handle_nested_string(_context, s_wrapped, cb).Ok();
                return cs.Task;
            }
            finally
            {
                s_wrapped.Dispose();
            }
            return cs.Task;
        }

        [LibraryImport(NativeLib, EntryPoint = "service_async_fail")]
        public static partial ResultError service_async_fail(IntPtr _context, AsyncHelper _async_callback);

        public static unsafe Task service_async_fail(IntPtr _context)
        {
            var cs = new TaskCompletionSource();
            GCHandle pinned = default;
            var cb = new AsyncHelper((x) => {
                var unmanaged = Marshal.PtrToStructure<ResultError.Unmanaged>(x);
                var marshaller = new ResultError.Marshaller(unmanaged);
                var managed = marshaller.ToManaged();
                if (managed.IsOk()) { cs.SetResult(); }
                else { cs.SetException(new InteropException<Error>(managed.Err())); }
                pinned.Free();
            });
            pinned = GCHandle.Alloc(cb);
            try
            {
                service_async_fail(_context, cb).Ok();
                return cs.Task;
            }
            finally
            {
            }
            return cs.Task;
        }

        [LibraryImport(NativeLib, EntryPoint = "service_async_bad")]
        public static partial void service_async_bad(IntPtr _context);


        /// Destroys the given instance.
        ///
        /// # Safety
        ///
        /// The passed parameter MUST have been created with the corresponding init function;
        /// passing any other value results in undefined behavior.
        [LibraryImport(NativeLib, EntryPoint = "service_basic_destroy")]
        public static partial ResultConstPtrServiceBasicError service_basic_destroy(IntPtr _context);


        [LibraryImport(NativeLib, EntryPoint = "service_basic_new")]
        public static partial ResultConstPtrServiceBasicError service_basic_new();


        /// Destroys the given instance.
        ///
        /// # Safety
        ///
        /// The passed parameter MUST have been created with the corresponding init function;
        /// passing any other value results in undefined behavior.
        [LibraryImport(NativeLib, EntryPoint = "service_main_destroy")]
        public static partial ResultConstPtrServiceMainError service_main_destroy(IntPtr _context);


        [LibraryImport(NativeLib, EntryPoint = "service_main_new")]
        public static partial ResultConstPtrServiceMainError service_main_new(uint value);


        /// Destroys the given instance.
        ///
        /// # Safety
        ///
        /// The passed parameter MUST have been created with the corresponding init function;
        /// passing any other value results in undefined behavior.
        [LibraryImport(NativeLib, EntryPoint = "service_dependent_destroy")]
        public static partial ResultConstPtrServiceDependentError service_dependent_destroy(IntPtr _context);


        [LibraryImport(NativeLib, EntryPoint = "service_dependent_from_main")]
        public static partial ResultConstPtrServiceDependentError service_dependent_from_main(IntPtr main);


        [LibraryImport(NativeLib, EntryPoint = "service_dependent_get")]
        public static partial uint service_dependent_get(IntPtr _context);


        /// Destroys the given instance.
        ///
        /// # Safety
        ///
        /// The passed parameter MUST have been created with the corresponding init function;
        /// passing any other value results in undefined behavior.
        [LibraryImport(NativeLib, EntryPoint = "service_result_destroy")]
        public static partial ResultConstPtrServiceResultError service_result_destroy(IntPtr _context);


        [LibraryImport(NativeLib, EntryPoint = "service_result_new")]
        public static partial ResultConstPtrServiceResultError service_result_new();


        [LibraryImport(NativeLib, EntryPoint = "service_result_test")]
        public static partial ResultError service_result_test(IntPtr _context);


        /// Destroys the given instance.
        ///
        /// # Safety
        ///
        /// The passed parameter MUST have been created with the corresponding init function;
        /// passing any other value results in undefined behavior.
        [LibraryImport(NativeLib, EntryPoint = "service_on_panic_destroy")]
        public static partial ResultConstPtrServiceOnPanicError service_on_panic_destroy(IntPtr _context);


        [LibraryImport(NativeLib, EntryPoint = "service_on_panic_new")]
        public static partial ResultConstPtrServiceOnPanicError service_on_panic_new();


        /// Methods returning a Result<(), _> are the default and do not
        /// need annotations.
        [LibraryImport(NativeLib, EntryPoint = "service_on_panic_return_result")]
        public static partial ResultError service_on_panic_return_result(IntPtr _context, uint anon1);


        /// Methods returning a value need an `on_panic` annotation.
        [LibraryImport(NativeLib, EntryPoint = "service_on_panic_return_default_value")]
        public static partial uint service_on_panic_return_default_value(IntPtr _context, uint x);


        /// This function has no panic safeguards. It will be a bit faster to
        /// call, but if it panics your host app will abort.
        [LibraryImport(NativeLib, EntryPoint = "service_on_panic_return_ub_on_panic")]
        public static partial IntPtr service_on_panic_return_ub_on_panic(IntPtr _context);


        /// Destroys the given instance.
        ///
        /// # Safety
        ///
        /// The passed parameter MUST have been created with the corresponding init function;
        /// passing any other value results in undefined behavior.
        [LibraryImport(NativeLib, EntryPoint = "service_callbacks_destroy")]
        public static partial ResultConstPtrServiceCallbacksError service_callbacks_destroy(IntPtr _context);


        [LibraryImport(NativeLib, EntryPoint = "service_callbacks_new")]
        public static partial ResultConstPtrServiceCallbacksError service_callbacks_new();


        [LibraryImport(NativeLib, EntryPoint = "service_callbacks_callback_simple")]
        public static partial ResultError service_callbacks_callback_simple(IntPtr _context, MyCallback callback);

        public static unsafe ResultError service_callbacks_callback_simple(IntPtr _context, MyCallbackDelegate callback)
        {
            var callback_wrapped = new MyCallback(callback);
            try
            {
                return service_callbacks_callback_simple(_context, callback_wrapped);
            }
            finally
            {
                callback_wrapped.Dispose();
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "service_callbacks_callback_ffi_return")]
        public static partial ResultError service_callbacks_callback_ffi_return(IntPtr _context, SumDelegateReturn callback);

        public static unsafe ResultError service_callbacks_callback_ffi_return(IntPtr _context, SumDelegateReturnDelegate callback)
        {
            var callback_wrapped = new SumDelegateReturn(callback);
            try
            {
                return service_callbacks_callback_ffi_return(_context, callback_wrapped);
            }
            finally
            {
                callback_wrapped.Dispose();
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "service_callbacks_callback_with_slice")]
        public static partial ResultError service_callbacks_callback_with_slice(IntPtr _context, SumDelegateReturn callback, SliceI32 input);

        public static unsafe ResultError service_callbacks_callback_with_slice(IntPtr _context, SumDelegateReturnDelegate callback, ReadOnlySpan<int> input)
        {
            fixed (void* ptr_input = input)
            {
                var input_slice = new SliceI32(new IntPtr(ptr_input), (ulong) input.Length);
                var callback_wrapped = new SumDelegateReturn(callback);
                try
                {
                    return service_callbacks_callback_with_slice(_context, callback_wrapped, input_slice);
                }
                finally
                {
                    callback_wrapped.Dispose();
                }
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "service_callbacks_set_delegate_table")]
        public static partial void service_callbacks_set_delegate_table(IntPtr _context, CallbackTable table);


        [LibraryImport(NativeLib, EntryPoint = "service_callbacks_invoke_delegates")]
        public static partial ResultError service_callbacks_invoke_delegates(IntPtr _context);


        /// Destroys the given instance.
        ///
        /// # Safety
        ///
        /// The passed parameter MUST have been created with the corresponding init function;
        /// passing any other value results in undefined behavior.
        [LibraryImport(NativeLib, EntryPoint = "service_ignoring_methods_destroy")]
        public static partial ResultConstPtrServiceIgnoringMethodsError service_ignoring_methods_destroy(IntPtr _context);


        [LibraryImport(NativeLib, EntryPoint = "service_ignoring_methods_new")]
        public static partial ResultConstPtrServiceIgnoringMethodsError service_ignoring_methods_new();


        /// Destroys the given instance.
        ///
        /// # Safety
        ///
        /// The passed parameter MUST have been created with the corresponding init function;
        /// passing any other value results in undefined behavior.
        [LibraryImport(NativeLib, EntryPoint = "service_multiple_ctors_destroy")]
        public static partial ResultConstPtrServiceMultipleCtorsError service_multiple_ctors_destroy(IntPtr _context);


        [LibraryImport(NativeLib, EntryPoint = "service_multiple_ctors_new_with")]
        public static partial ResultConstPtrServiceMultipleCtorsError service_multiple_ctors_new_with(uint some_value);


        [LibraryImport(NativeLib, EntryPoint = "service_multiple_ctors_new_without")]
        public static partial ResultConstPtrServiceMultipleCtorsError service_multiple_ctors_new_without();


        [LibraryImport(NativeLib, EntryPoint = "service_multiple_ctors_new_with_string")]
        public static partial ResultConstPtrServiceMultipleCtorsError service_multiple_ctors_new_with_string([MarshalAs(UnmanagedType.LPStr)] string anon0);


        [LibraryImport(NativeLib, EntryPoint = "service_multiple_ctors_new_failing")]
        public static partial ResultConstPtrServiceMultipleCtorsError service_multiple_ctors_new_failing(byte some_value);


        /// Destroys the given instance.
        ///
        /// # Safety
        ///
        /// The passed parameter MUST have been created with the corresponding init function;
        /// passing any other value results in undefined behavior.
        [LibraryImport(NativeLib, EntryPoint = "service_various_slices_destroy")]
        public static partial ResultConstPtrServiceVariousSlicesError service_various_slices_destroy(IntPtr _context);


        [LibraryImport(NativeLib, EntryPoint = "service_various_slices_new")]
        public static partial ResultConstPtrServiceVariousSlicesError service_various_slices_new();


        [LibraryImport(NativeLib, EntryPoint = "service_various_slices_mut_self")]
        public static partial byte service_various_slices_mut_self(IntPtr _context, SliceU8 slice);

        public static unsafe byte service_various_slices_mut_self(IntPtr _context, ReadOnlySpan<byte> slice)
        {
            fixed (void* ptr_slice = slice)
            {
                var slice_slice = new SliceU8(new IntPtr(ptr_slice), (ulong) slice.Length);
                try
                {
                    return service_various_slices_mut_self(_context, slice_slice);
                }
                finally
                {
                }
            }
        }

        /// Single line.
        [LibraryImport(NativeLib, EntryPoint = "service_various_slices_mut_self_void")]
        public static partial void service_various_slices_mut_self_void(IntPtr _context, SliceBool slice);

        /// Single line.
        public static unsafe void service_various_slices_mut_self_void(IntPtr _context, ReadOnlySpan<Bool> slice)
        {
            fixed (void* ptr_slice = slice)
            {
                var slice_slice = new SliceBool(new IntPtr(ptr_slice), (ulong) slice.Length);
                try
                {
                    service_various_slices_mut_self_void(_context, slice_slice);
                }
                finally
                {
                }
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "service_various_slices_mut_self_ref")]
        public static partial byte service_various_slices_mut_self_ref(IntPtr _context, ref byte x, ref byte y);


        [LibraryImport(NativeLib, EntryPoint = "service_various_slices_mut_self_ref_slice")]
        public static partial byte service_various_slices_mut_self_ref_slice(IntPtr _context, ref byte x, ref byte y, SliceU8 slice);

        public static unsafe byte service_various_slices_mut_self_ref_slice(IntPtr _context, ref byte x, ref byte y, ReadOnlySpan<byte> slice)
        {
            fixed (void* ptr_slice = slice)
            {
                var slice_slice = new SliceU8(new IntPtr(ptr_slice), (ulong) slice.Length);
                try
                {
                    return service_various_slices_mut_self_ref_slice(_context, ref x, ref y, slice_slice);
                }
                finally
                {
                }
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "service_various_slices_mut_self_ref_slice_limited")]
        public static partial byte service_various_slices_mut_self_ref_slice_limited(IntPtr _context, ref byte x, ref byte y, SliceU8 slice, SliceU8 slice2);

        public static unsafe byte service_various_slices_mut_self_ref_slice_limited(IntPtr _context, ref byte x, ref byte y, ReadOnlySpan<byte> slice, ReadOnlySpan<byte> slice2)
        {
            fixed (void* ptr_slice = slice)
            {
                var slice_slice = new SliceU8(new IntPtr(ptr_slice), (ulong) slice.Length);
                fixed (void* ptr_slice2 = slice2)
                {
                    var slice2_slice = new SliceU8(new IntPtr(ptr_slice2), (ulong) slice2.Length);
                    try
                    {
                        return service_various_slices_mut_self_ref_slice_limited(_context, ref x, ref y, slice_slice, slice2_slice);
                    }
                    finally
                    {
                    }
                }
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "service_various_slices_mut_self_ffi_error")]
        public static partial ResultError service_various_slices_mut_self_ffi_error(IntPtr _context, SliceMutU8 slice);

        public static unsafe ResultError service_various_slices_mut_self_ffi_error(IntPtr _context, Span<byte> slice)
        {
            fixed (void* ptr_slice = slice)
            {
                var slice_slice = new SliceMutU8(new IntPtr(ptr_slice), (ulong) slice.Length);
                try
                {
                    return service_various_slices_mut_self_ffi_error(_context, slice_slice);
                }
                finally
                {
                }
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "service_various_slices_mut_self_no_error")]
        public static partial ResultError service_various_slices_mut_self_no_error(IntPtr _context, SliceMutU8 slice);

        public static unsafe ResultError service_various_slices_mut_self_no_error(IntPtr _context, Span<byte> slice)
        {
            fixed (void* ptr_slice = slice)
            {
                var slice_slice = new SliceMutU8(new IntPtr(ptr_slice), (ulong) slice.Length);
                try
                {
                    return service_various_slices_mut_self_no_error(_context, slice_slice);
                }
                finally
                {
                }
            }
        }

        /// Warning, you _must_ discard the returned slice object before calling into this service
        /// again, as otherwise undefined behavior might happen.
        [LibraryImport(NativeLib, EntryPoint = "service_various_slices_return_slice")]
        public static partial SliceU32 service_various_slices_return_slice(IntPtr _context);


        /// Warning, you _must_ discard the returned slice object before calling into this service
        /// again, as otherwise undefined behavior might happen.
        [LibraryImport(NativeLib, EntryPoint = "service_various_slices_return_slice_mut")]
        public static partial SliceMutU32 service_various_slices_return_slice_mut(IntPtr _context);


        /// Destroys the given instance.
        ///
        /// # Safety
        ///
        /// The passed parameter MUST have been created with the corresponding init function;
        /// passing any other value results in undefined behavior.
        [LibraryImport(NativeLib, EntryPoint = "service_strings_destroy")]
        public static partial ResultConstPtrServiceStringsError service_strings_destroy(IntPtr _context);


        [LibraryImport(NativeLib, EntryPoint = "service_strings_new")]
        public static partial ResultConstPtrServiceStringsError service_strings_new();


        [LibraryImport(NativeLib, EntryPoint = "service_strings_pass_string")]
        public static partial void service_strings_pass_string(IntPtr _context, [MarshalAs(UnmanagedType.LPStr)] string anon1);


        [LibraryImport(NativeLib, EntryPoint = "service_strings_return_string")]
        public static partial IntPtr service_strings_return_string(IntPtr _context);


    }

    /// Documented enum.
    public enum EnumDocumented
    {
        /// Variant A.
        A = 0,
        /// Variant B.
        B = 1,
        /// Variant B.
        C = 2,
    }

    public enum EnumRenamed
    {
        X = 0,
    }

    public partial struct Array
    {
        public byte[] data;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct Array
    {
        public Array(Array other)
        {
            data = other.data;
        }

        public Unmanaged ToUnmanaged()
        {
            var marshaller = new Marshaller(this);
            try { return marshaller.ToUnmanaged(); }
            finally { marshaller.Free(); }
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public fixed byte data[16];

            public Array ToManaged()
            {
                var marshaller = new Marshaller(this);
                try { return marshaller.ToManaged(); }
                finally { marshaller.Free(); }
            }
        }

        [CustomMarshaller(typeof(Array), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private Array _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(Array managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(Array managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                fixed(byte* _fixed = _unmanaged.data)
                {
                    if (_managed.data == null) { throw new InvalidOperationException("Array 'data' must not be null"); }
                    if (_managed.data.Length != 16) { throw new InvalidOperationException("Array size mismatch for 'data'"); }
                    var src = new ReadOnlySpan<byte>(_managed.data, 0, 16);
                    var dst = new Span<byte>(_fixed, 16);
                    src.CopyTo(dst);
                }

                return _unmanaged;
            }

            public unsafe Array ToManaged()
            {
                _managed = new Array();

                fixed(byte* _fixed = _unmanaged.data)
                {
                    _managed.data = new byte[16];
                    var src = new ReadOnlySpan<byte>(_fixed, 16);
                    var dst = new Span<byte>(_managed.data, 0, 16);
                    src.CopyTo(dst);
                }

                return _managed;
            }
            public void Free() { }
        }
    }

    public partial struct BoolField
    {
        public bool val;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct BoolField
    {
        public BoolField(BoolField other)
        {
            val = other.val;
        }

        public Unmanaged ToUnmanaged()
        {
            var marshaller = new Marshaller(this);
            try { return marshaller.ToUnmanaged(); }
            finally { marshaller.Free(); }
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public sbyte val;

            public BoolField ToManaged()
            {
                var marshaller = new Marshaller(this);
                try { return marshaller.ToManaged(); }
                finally { marshaller.Free(); }
            }
        }

        [CustomMarshaller(typeof(BoolField), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private BoolField _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(BoolField managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(BoolField managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                _unmanaged.val = (sbyte) (_managed.val ? 1 : 0);

                return _unmanaged;
            }

            public unsafe BoolField ToManaged()
            {
                _managed = new BoolField();

                _managed.val = _unmanaged.val == 1 ? true : false;

                return _managed;
            }
            public void Free() { }
        }
    }

    public partial struct CallbackTable
    {
        public MyCallback my_callback;
        public MyCallbackNamespaced my_callback_namespaced;
        public MyCallbackVoid my_callback_void;
        public MyCallbackContextual my_callback_contextual;
        public SumDelegate1 sum_delegate_1;
        public SumDelegate2 sum_delegate_2;
        public SumDelegateReturn sum_delegate_return;
        public SumDelegateReturn2 sum_delegate_return_2;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct CallbackTable
    {
        public CallbackTable(CallbackTable other)
        {
            my_callback = other.my_callback;
            my_callback_namespaced = other.my_callback_namespaced;
            my_callback_void = other.my_callback_void;
            my_callback_contextual = other.my_callback_contextual;
            sum_delegate_1 = other.sum_delegate_1;
            sum_delegate_2 = other.sum_delegate_2;
            sum_delegate_return = other.sum_delegate_return;
            sum_delegate_return_2 = other.sum_delegate_return_2;
        }

        public Unmanaged ToUnmanaged()
        {
            var marshaller = new Marshaller(this);
            try { return marshaller.ToUnmanaged(); }
            finally { marshaller.Free(); }
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public MyCallback.Unmanaged my_callback;
            public MyCallbackNamespaced.Unmanaged my_callback_namespaced;
            public MyCallbackVoid.Unmanaged my_callback_void;
            public MyCallbackContextual.Unmanaged my_callback_contextual;
            public SumDelegate1.Unmanaged sum_delegate_1;
            public SumDelegate2.Unmanaged sum_delegate_2;
            public SumDelegateReturn.Unmanaged sum_delegate_return;
            public SumDelegateReturn2.Unmanaged sum_delegate_return_2;

            public CallbackTable ToManaged()
            {
                var marshaller = new Marshaller(this);
                try { return marshaller.ToManaged(); }
                finally { marshaller.Free(); }
            }
        }

        [CustomMarshaller(typeof(CallbackTable), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private CallbackTable _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(CallbackTable managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(CallbackTable managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                var _my_callback = new MyCallback.Marshaller(_managed.my_callback);
                _unmanaged.my_callback = _my_callback.ToUnmanaged();
                var _my_callback_namespaced = new MyCallbackNamespaced.Marshaller(_managed.my_callback_namespaced);
                _unmanaged.my_callback_namespaced = _my_callback_namespaced.ToUnmanaged();
                var _my_callback_void = new MyCallbackVoid.Marshaller(_managed.my_callback_void);
                _unmanaged.my_callback_void = _my_callback_void.ToUnmanaged();
                var _my_callback_contextual = new MyCallbackContextual.Marshaller(_managed.my_callback_contextual);
                _unmanaged.my_callback_contextual = _my_callback_contextual.ToUnmanaged();
                var _sum_delegate_1 = new SumDelegate1.Marshaller(_managed.sum_delegate_1);
                _unmanaged.sum_delegate_1 = _sum_delegate_1.ToUnmanaged();
                var _sum_delegate_2 = new SumDelegate2.Marshaller(_managed.sum_delegate_2);
                _unmanaged.sum_delegate_2 = _sum_delegate_2.ToUnmanaged();
                var _sum_delegate_return = new SumDelegateReturn.Marshaller(_managed.sum_delegate_return);
                _unmanaged.sum_delegate_return = _sum_delegate_return.ToUnmanaged();
                var _sum_delegate_return_2 = new SumDelegateReturn2.Marshaller(_managed.sum_delegate_return_2);
                _unmanaged.sum_delegate_return_2 = _sum_delegate_return_2.ToUnmanaged();

                return _unmanaged;
            }

            public unsafe CallbackTable ToManaged()
            {
                _managed = new CallbackTable();

                var _my_callback = new MyCallback.Marshaller(_unmanaged.my_callback);
                _managed.my_callback = _my_callback.ToManaged();
                var _my_callback_namespaced = new MyCallbackNamespaced.Marshaller(_unmanaged.my_callback_namespaced);
                _managed.my_callback_namespaced = _my_callback_namespaced.ToManaged();
                var _my_callback_void = new MyCallbackVoid.Marshaller(_unmanaged.my_callback_void);
                _managed.my_callback_void = _my_callback_void.ToManaged();
                var _my_callback_contextual = new MyCallbackContextual.Marshaller(_unmanaged.my_callback_contextual);
                _managed.my_callback_contextual = _my_callback_contextual.ToManaged();
                var _sum_delegate_1 = new SumDelegate1.Marshaller(_unmanaged.sum_delegate_1);
                _managed.sum_delegate_1 = _sum_delegate_1.ToManaged();
                var _sum_delegate_2 = new SumDelegate2.Marshaller(_unmanaged.sum_delegate_2);
                _managed.sum_delegate_2 = _sum_delegate_2.ToManaged();
                var _sum_delegate_return = new SumDelegateReturn.Marshaller(_unmanaged.sum_delegate_return);
                _managed.sum_delegate_return = _sum_delegate_return.ToManaged();
                var _sum_delegate_return_2 = new SumDelegateReturn2.Marshaller(_unmanaged.sum_delegate_return_2);
                _managed.sum_delegate_return_2 = _sum_delegate_return_2.ToManaged();

                return _managed;
            }
            public void Free() { }
        }
    }

    public partial struct CharArray
    {
        public FixedString str;
        public FixedString str_2;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct CharArray
    {
        public CharArray(CharArray other)
        {
            str = other.str;
            str_2 = other.str_2;
        }

        public Unmanaged ToUnmanaged()
        {
            var marshaller = new Marshaller(this);
            try { return marshaller.ToUnmanaged(); }
            finally { marshaller.Free(); }
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public FixedString.Unmanaged str;
            public FixedString.Unmanaged str_2;

            public CharArray ToManaged()
            {
                var marshaller = new Marshaller(this);
                try { return marshaller.ToManaged(); }
                finally { marshaller.Free(); }
            }
        }

        [CustomMarshaller(typeof(CharArray), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private CharArray _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(CharArray managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(CharArray managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                var _str = new FixedString.Marshaller(_managed.str);
                _unmanaged.str = _str.ToUnmanaged();
                var _str_2 = new FixedString.Marshaller(_managed.str_2);
                _unmanaged.str_2 = _str_2.ToUnmanaged();

                return _unmanaged;
            }

            public unsafe CharArray ToManaged()
            {
                _managed = new CharArray();

                var _str = new FixedString.Marshaller(_unmanaged.str);
                _managed.str = _str.ToManaged();
                var _str_2 = new FixedString.Marshaller(_unmanaged.str_2);
                _managed.str_2 = _str_2.ToManaged();

                return _managed;
            }
            public void Free() { }
        }
    }

    public partial struct Container
    {
        public Local foreign;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct Container
    {
        public Container(Container other)
        {
            foreign = other.foreign;
        }

        public Unmanaged ToUnmanaged()
        {
            var marshaller = new Marshaller(this);
            try { return marshaller.ToUnmanaged(); }
            finally { marshaller.Free(); }
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public Local.Unmanaged foreign;

            public Container ToManaged()
            {
                var marshaller = new Marshaller(this);
                try { return marshaller.ToManaged(); }
                finally { marshaller.Free(); }
            }
        }

        [CustomMarshaller(typeof(Container), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private Container _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(Container managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(Container managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                var _foreign = new Local.Marshaller(_managed.foreign);
                _unmanaged.foreign = _foreign.ToUnmanaged();

                return _unmanaged;
            }

            public unsafe Container ToManaged()
            {
                _managed = new Container();

                var _foreign = new Local.Marshaller(_unmanaged.foreign);
                _managed.foreign = _foreign.ToManaged();

                return _managed;
            }
            public void Free() { }
        }
    }

    public partial struct ExtraTypef32
    {
        public float x;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct ExtraTypef32
    {
        public ExtraTypef32(ExtraTypef32 other)
        {
            x = other.x;
        }

        public Unmanaged ToUnmanaged()
        {
            var marshaller = new Marshaller(this);
            try { return marshaller.ToUnmanaged(); }
            finally { marshaller.Free(); }
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public float x;

            public ExtraTypef32 ToManaged()
            {
                var marshaller = new Marshaller(this);
                try { return marshaller.ToManaged(); }
                finally { marshaller.Free(); }
            }
        }

        [CustomMarshaller(typeof(ExtraTypef32), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private ExtraTypef32 _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(ExtraTypef32 managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(ExtraTypef32 managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                _unmanaged.x = _managed.x;

                return _unmanaged;
            }

            public unsafe ExtraTypef32 ToManaged()
            {
                _managed = new ExtraTypef32();

                _managed.x = _unmanaged.x;

                return _managed;
            }
            public void Free() { }
        }
    }

    public partial struct FixedString
    {
        public byte[] data;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct FixedString
    {
        public FixedString(FixedString other)
        {
            data = other.data;
        }

        public Unmanaged ToUnmanaged()
        {
            var marshaller = new Marshaller(this);
            try { return marshaller.ToUnmanaged(); }
            finally { marshaller.Free(); }
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public fixed byte data[32];

            public FixedString ToManaged()
            {
                var marshaller = new Marshaller(this);
                try { return marshaller.ToManaged(); }
                finally { marshaller.Free(); }
            }
        }

        [CustomMarshaller(typeof(FixedString), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private FixedString _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(FixedString managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(FixedString managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                fixed(byte* _fixed = _unmanaged.data)
                {
                    if (_managed.data == null) { throw new InvalidOperationException("Array 'data' must not be null"); }
                    if (_managed.data.Length != 32) { throw new InvalidOperationException("Array size mismatch for 'data'"); }
                    var src = new ReadOnlySpan<byte>(_managed.data, 0, 32);
                    var dst = new Span<byte>(_fixed, 32);
                    src.CopyTo(dst);
                }

                return _unmanaged;
            }

            public unsafe FixedString ToManaged()
            {
                _managed = new FixedString();

                fixed(byte* _fixed = _unmanaged.data)
                {
                    _managed.data = new byte[32];
                    var src = new ReadOnlySpan<byte>(_fixed, 32);
                    var dst = new Span<byte>(_managed.data, 0, 32);
                    src.CopyTo(dst);
                }

                return _managed;
            }
            public void Free() { }
        }
    }

    public partial struct Genericu32
    {
        public IntPtr x;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct Genericu32
    {
        public Genericu32(Genericu32 other)
        {
            x = other.x;
        }

        public Unmanaged ToUnmanaged()
        {
            var marshaller = new Marshaller(this);
            try { return marshaller.ToUnmanaged(); }
            finally { marshaller.Free(); }
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public IntPtr x;

            public Genericu32 ToManaged()
            {
                var marshaller = new Marshaller(this);
                try { return marshaller.ToManaged(); }
                finally { marshaller.Free(); }
            }
        }

        [CustomMarshaller(typeof(Genericu32), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private Genericu32 _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(Genericu32 managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(Genericu32 managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                _unmanaged.x = _managed.x;

                return _unmanaged;
            }

            public unsafe Genericu32 ToManaged()
            {
                _managed = new Genericu32();

                _managed.x = _unmanaged.x;

                return _managed;
            }
            public void Free() { }
        }
    }

    public partial struct Genericu8
    {
        public IntPtr x;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct Genericu8
    {
        public Genericu8(Genericu8 other)
        {
            x = other.x;
        }

        public Unmanaged ToUnmanaged()
        {
            var marshaller = new Marshaller(this);
            try { return marshaller.ToUnmanaged(); }
            finally { marshaller.Free(); }
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public IntPtr x;

            public Genericu8 ToManaged()
            {
                var marshaller = new Marshaller(this);
                try { return marshaller.ToManaged(); }
                finally { marshaller.Free(); }
            }
        }

        [CustomMarshaller(typeof(Genericu8), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private Genericu8 _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(Genericu8 managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(Genericu8 managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                _unmanaged.x = _managed.x;

                return _unmanaged;
            }

            public unsafe Genericu8 ToManaged()
            {
                _managed = new Genericu8();

                _managed.x = _unmanaged.x;

                return _managed;
            }
            public void Free() { }
        }
    }

    public partial struct Inner
    {
        float x;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct Inner
    {
        public Inner(Inner other)
        {
            x = other.x;
        }

        public Unmanaged ToUnmanaged()
        {
            var marshaller = new Marshaller(this);
            try { return marshaller.ToUnmanaged(); }
            finally { marshaller.Free(); }
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public float x;

            public Inner ToManaged()
            {
                var marshaller = new Marshaller(this);
                try { return marshaller.ToManaged(); }
                finally { marshaller.Free(); }
            }
        }

        [CustomMarshaller(typeof(Inner), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private Inner _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(Inner managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(Inner managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                _unmanaged.x = _managed.x;

                return _unmanaged;
            }

            public unsafe Inner ToManaged()
            {
                _managed = new Inner();

                _managed.x = _unmanaged.x;

                return _managed;
            }
            public void Free() { }
        }
    }

    public partial struct Local
    {
        uint x;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct Local
    {
        public Local(Local other)
        {
            x = other.x;
        }

        public Unmanaged ToUnmanaged()
        {
            var marshaller = new Marshaller(this);
            try { return marshaller.ToUnmanaged(); }
            finally { marshaller.Free(); }
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public uint x;

            public Local ToManaged()
            {
                var marshaller = new Marshaller(this);
                try { return marshaller.ToManaged(); }
                finally { marshaller.Free(); }
            }
        }

        [CustomMarshaller(typeof(Local), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private Local _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(Local managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(Local managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                _unmanaged.x = _managed.x;

                return _unmanaged;
            }

            public unsafe Local ToManaged()
            {
                _managed = new Local();

                _managed.x = _unmanaged.x;

                return _managed;
            }
            public void Free() { }
        }
    }

    public partial struct NestedArray
    {
        public EnumRenamed field_enum;
        public Vec3f32 field_vec;
        public bool field_bool;
        public int field_int;
        public ushort[] field_array;
        public ushort[] field_array_2;
        public Array field_struct;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct NestedArray
    {
        public NestedArray(NestedArray other)
        {
            field_enum = other.field_enum;
            field_vec = other.field_vec;
            field_bool = other.field_bool;
            field_int = other.field_int;
            field_array = other.field_array;
            field_array_2 = other.field_array_2;
            field_struct = other.field_struct;
        }

        public Unmanaged ToUnmanaged()
        {
            var marshaller = new Marshaller(this);
            try { return marshaller.ToUnmanaged(); }
            finally { marshaller.Free(); }
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public EnumRenamed field_enum;
            public Vec3f32.Unmanaged field_vec;
            public sbyte field_bool;
            public int field_int;
            public fixed ushort field_array[5];
            public fixed ushort field_array_2[5];
            public Array.Unmanaged field_struct;

            public NestedArray ToManaged()
            {
                var marshaller = new Marshaller(this);
                try { return marshaller.ToManaged(); }
                finally { marshaller.Free(); }
            }
        }

        [CustomMarshaller(typeof(NestedArray), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private NestedArray _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(NestedArray managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(NestedArray managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                _unmanaged.field_enum = _managed.field_enum;
                var _field_vec = new Vec3f32.Marshaller(_managed.field_vec);
                _unmanaged.field_vec = _field_vec.ToUnmanaged();
                _unmanaged.field_bool = (sbyte) (_managed.field_bool ? 1 : 0);
                _unmanaged.field_int = _managed.field_int;
                fixed(ushort* _fixed = _unmanaged.field_array)
                {
                    if (_managed.field_array == null) { throw new InvalidOperationException("Array 'field_array' must not be null"); }
                    if (_managed.field_array.Length != 5) { throw new InvalidOperationException("Array size mismatch for 'field_array'"); }
                    var src = new ReadOnlySpan<ushort>(_managed.field_array, 0, 5);
                    var dst = new Span<ushort>(_fixed, 5);
                    src.CopyTo(dst);
                }
                fixed(ushort* _fixed = _unmanaged.field_array_2)
                {
                    if (_managed.field_array_2 == null) { throw new InvalidOperationException("Array 'field_array_2' must not be null"); }
                    if (_managed.field_array_2.Length != 5) { throw new InvalidOperationException("Array size mismatch for 'field_array_2'"); }
                    var src = new ReadOnlySpan<ushort>(_managed.field_array_2, 0, 5);
                    var dst = new Span<ushort>(_fixed, 5);
                    src.CopyTo(dst);
                }
                var _field_struct = new Array.Marshaller(_managed.field_struct);
                _unmanaged.field_struct = _field_struct.ToUnmanaged();

                return _unmanaged;
            }

            public unsafe NestedArray ToManaged()
            {
                _managed = new NestedArray();

                _managed.field_enum = _unmanaged.field_enum;
                var _field_vec = new Vec3f32.Marshaller(_unmanaged.field_vec);
                _managed.field_vec = _field_vec.ToManaged();
                _managed.field_bool = _unmanaged.field_bool == 1 ? true : false;
                _managed.field_int = _unmanaged.field_int;
                fixed(ushort* _fixed = _unmanaged.field_array)
                {
                    _managed.field_array = new ushort[5];
                    var src = new ReadOnlySpan<ushort>(_fixed, 5);
                    var dst = new Span<ushort>(_managed.field_array, 0, 5);
                    src.CopyTo(dst);
                }
                fixed(ushort* _fixed = _unmanaged.field_array_2)
                {
                    _managed.field_array_2 = new ushort[5];
                    var src = new ReadOnlySpan<ushort>(_fixed, 5);
                    var dst = new Span<ushort>(_managed.field_array_2, 0, 5);
                    src.CopyTo(dst);
                }
                var _field_struct = new Array.Marshaller(_unmanaged.field_struct);
                _managed.field_struct = _field_struct.ToManaged();

                return _managed;
            }
            public void Free() { }
        }
    }

    public partial struct Packed1
    {
        public byte x;
        public ushort y;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct Packed1
    {
        public Packed1(Packed1 other)
        {
            x = other.x;
            y = other.y;
        }

        public Unmanaged ToUnmanaged()
        {
            var marshaller = new Marshaller(this);
            try { return marshaller.ToUnmanaged(); }
            finally { marshaller.Free(); }
        }

        [StructLayout(LayoutKind.Sequential, Pack = 1)]
        public unsafe struct Unmanaged
        {
            public byte x;
            public ushort y;

            public Packed1 ToManaged()
            {
                var marshaller = new Marshaller(this);
                try { return marshaller.ToManaged(); }
                finally { marshaller.Free(); }
            }
        }

        [CustomMarshaller(typeof(Packed1), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private Packed1 _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(Packed1 managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(Packed1 managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                _unmanaged.x = _managed.x;
                _unmanaged.y = _managed.y;

                return _unmanaged;
            }

            public unsafe Packed1 ToManaged()
            {
                _managed = new Packed1();

                _managed.x = _unmanaged.x;
                _managed.y = _unmanaged.y;

                return _managed;
            }
            public void Free() { }
        }
    }

    public partial struct Packed2
    {
        public ushort y;
        public byte x;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct Packed2
    {
        public Packed2(Packed2 other)
        {
            y = other.y;
            x = other.x;
        }

        public Unmanaged ToUnmanaged()
        {
            var marshaller = new Marshaller(this);
            try { return marshaller.ToUnmanaged(); }
            finally { marshaller.Free(); }
        }

        [StructLayout(LayoutKind.Sequential, Pack = 1)]
        public unsafe struct Unmanaged
        {
            public ushort y;
            public byte x;

            public Packed2 ToManaged()
            {
                var marshaller = new Marshaller(this);
                try { return marshaller.ToManaged(); }
                finally { marshaller.Free(); }
            }
        }

        [CustomMarshaller(typeof(Packed2), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private Packed2 _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(Packed2 managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(Packed2 managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                _unmanaged.y = _managed.y;
                _unmanaged.x = _managed.x;

                return _unmanaged;
            }

            public unsafe Packed2 ToManaged()
            {
                _managed = new Packed2();

                _managed.y = _unmanaged.y;
                _managed.x = _unmanaged.x;

                return _managed;
            }
            public void Free() { }
        }
    }

    public partial struct Phantomu8
    {
        public uint x;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct Phantomu8
    {
        public Phantomu8(Phantomu8 other)
        {
            x = other.x;
        }

        public Unmanaged ToUnmanaged()
        {
            var marshaller = new Marshaller(this);
            try { return marshaller.ToUnmanaged(); }
            finally { marshaller.Free(); }
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public uint x;

            public Phantomu8 ToManaged()
            {
                var marshaller = new Marshaller(this);
                try { return marshaller.ToManaged(); }
                finally { marshaller.Free(); }
            }
        }

        [CustomMarshaller(typeof(Phantomu8), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private Phantomu8 _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(Phantomu8 managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(Phantomu8 managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                _unmanaged.x = _managed.x;

                return _unmanaged;
            }

            public unsafe Phantomu8 ToManaged()
            {
                _managed = new Phantomu8();

                _managed.x = _unmanaged.x;

                return _managed;
            }
            public void Free() { }
        }
    }

    /// Documented struct.
    public partial struct StructDocumented
    {
        /// Documented field.
        public float x;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct StructDocumented
    {
        public StructDocumented(StructDocumented other)
        {
            x = other.x;
        }

        public Unmanaged ToUnmanaged()
        {
            var marshaller = new Marshaller(this);
            try { return marshaller.ToUnmanaged(); }
            finally { marshaller.Free(); }
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public float x;

            public StructDocumented ToManaged()
            {
                var marshaller = new Marshaller(this);
                try { return marshaller.ToManaged(); }
                finally { marshaller.Free(); }
            }
        }

        [CustomMarshaller(typeof(StructDocumented), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private StructDocumented _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(StructDocumented managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(StructDocumented managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                _unmanaged.x = _managed.x;

                return _unmanaged;
            }

            public unsafe StructDocumented ToManaged()
            {
                _managed = new StructDocumented();

                _managed.x = _unmanaged.x;

                return _managed;
            }
            public void Free() { }
        }
    }

    public partial struct StructRenamed
    {
        public EnumRenamed e;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct StructRenamed
    {
        public StructRenamed(StructRenamed other)
        {
            e = other.e;
        }

        public Unmanaged ToUnmanaged()
        {
            var marshaller = new Marshaller(this);
            try { return marshaller.ToUnmanaged(); }
            finally { marshaller.Free(); }
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public EnumRenamed e;

            public StructRenamed ToManaged()
            {
                var marshaller = new Marshaller(this);
                try { return marshaller.ToManaged(); }
                finally { marshaller.Free(); }
            }
        }

        [CustomMarshaller(typeof(StructRenamed), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private StructRenamed _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(StructRenamed managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(StructRenamed managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                _unmanaged.e = _managed.e;

                return _unmanaged;
            }

            public unsafe StructRenamed ToManaged()
            {
                _managed = new StructRenamed();

                _managed.e = _unmanaged.e;

                return _managed;
            }
            public void Free() { }
        }
    }

    public partial struct Tupled
    {
        public byte x0;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct Tupled
    {
        public Tupled(Tupled other)
        {
            x0 = other.x0;
        }

        public Unmanaged ToUnmanaged()
        {
            var marshaller = new Marshaller(this);
            try { return marshaller.ToUnmanaged(); }
            finally { marshaller.Free(); }
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public byte x0;

            public Tupled ToManaged()
            {
                var marshaller = new Marshaller(this);
                try { return marshaller.ToManaged(); }
                finally { marshaller.Free(); }
            }
        }

        [CustomMarshaller(typeof(Tupled), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private Tupled _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(Tupled managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(Tupled managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                _unmanaged.x0 = _managed.x0;

                return _unmanaged;
            }

            public unsafe Tupled ToManaged()
            {
                _managed = new Tupled();

                _managed.x0 = _unmanaged.x0;

                return _managed;
            }
            public void Free() { }
        }
    }

    public partial struct UseCStrPtr
    {
        public string ascii_string;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct UseCStrPtr
    {
        public UseCStrPtr(UseCStrPtr other)
        {
            ascii_string = other.ascii_string;
        }

        public Unmanaged ToUnmanaged()
        {
            var marshaller = new Marshaller(this);
            try { return marshaller.ToUnmanaged(); }
            finally { marshaller.Free(); }
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public IntPtr ascii_string;

            public UseCStrPtr ToManaged()
            {
                var marshaller = new Marshaller(this);
                try { return marshaller.ToManaged(); }
                finally { marshaller.Free(); }
            }
        }

        [CustomMarshaller(typeof(UseCStrPtr), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private UseCStrPtr _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(UseCStrPtr managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(UseCStrPtr managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                _unmanaged.ascii_string = Marshal.StringToHGlobalAnsi(_managed.ascii_string);

                return _unmanaged;
            }

            public unsafe UseCStrPtr ToManaged()
            {
                _managed = new UseCStrPtr();

                _managed.ascii_string = Marshal.PtrToStringAnsi(_unmanaged.ascii_string);

                return _managed;
            }
            public void Free() { }
        }
    }

    public partial struct UseString
    {
        public string s1;
        public string s2;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct UseString
    {
        public UseString(UseString other)
        {
            s1 = other.s1;
            s2 = other.s2;
        }

        public Unmanaged ToUnmanaged()
        {
            var marshaller = new Marshaller(this);
            try { return marshaller.ToUnmanaged(); }
            finally { marshaller.Free(); }
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public Utf8String.Unmanaged s1;
            public Utf8String.Unmanaged s2;

            public UseString ToManaged()
            {
                var marshaller = new Marshaller(this);
                try { return marshaller.ToManaged(); }
                finally { marshaller.Free(); }
            }
        }

        [CustomMarshaller(typeof(UseString), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private UseString _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(UseString managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(UseString managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                var _s1 = new Utf8String.Marshaller(new Utf8String(_managed.s1));
                _unmanaged.s1 = _s1.ToUnmanaged();
                var _s2 = new Utf8String.Marshaller(new Utf8String(_managed.s2));
                _unmanaged.s2 = _s2.ToUnmanaged();

                return _unmanaged;
            }

            public unsafe UseString ToManaged()
            {
                _managed = new UseString();

                var _s1 = new Utf8String.Marshaller(_unmanaged.s1);
                _managed.s1 = _s1.ToManaged().String;
                var _s2 = new Utf8String.Marshaller(_unmanaged.s2);
                _managed.s2 = _s2.ToManaged().String;

                return _managed;
            }
            public void Free() { }
        }
    }

    public partial struct Vec1
    {
        public float x;
        public float y;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct Vec1
    {
        public Vec1(Vec1 other)
        {
            x = other.x;
            y = other.y;
        }

        public Unmanaged ToUnmanaged()
        {
            var marshaller = new Marshaller(this);
            try { return marshaller.ToUnmanaged(); }
            finally { marshaller.Free(); }
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public float x;
            public float y;

            public Vec1 ToManaged()
            {
                var marshaller = new Marshaller(this);
                try { return marshaller.ToManaged(); }
                finally { marshaller.Free(); }
            }
        }

        [CustomMarshaller(typeof(Vec1), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private Vec1 _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(Vec1 managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(Vec1 managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                _unmanaged.x = _managed.x;
                _unmanaged.y = _managed.y;

                return _unmanaged;
            }

            public unsafe Vec1 ToManaged()
            {
                _managed = new Vec1();

                _managed.x = _unmanaged.x;
                _managed.y = _unmanaged.y;

                return _managed;
            }
            public void Free() { }
        }
    }

    public partial struct Vec2
    {
        public double x;
        public double z;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct Vec2
    {
        public Vec2(Vec2 other)
        {
            x = other.x;
            z = other.z;
        }

        public Unmanaged ToUnmanaged()
        {
            var marshaller = new Marshaller(this);
            try { return marshaller.ToUnmanaged(); }
            finally { marshaller.Free(); }
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public double x;
            public double z;

            public Vec2 ToManaged()
            {
                var marshaller = new Marshaller(this);
                try { return marshaller.ToManaged(); }
                finally { marshaller.Free(); }
            }
        }

        [CustomMarshaller(typeof(Vec2), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private Vec2 _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(Vec2 managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(Vec2 managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                _unmanaged.x = _managed.x;
                _unmanaged.z = _managed.z;

                return _unmanaged;
            }

            public unsafe Vec2 ToManaged()
            {
                _managed = new Vec2();

                _managed.x = _unmanaged.x;
                _managed.z = _unmanaged.z;

                return _managed;
            }
            public void Free() { }
        }
    }

    public partial struct Vec3f32
    {
        public float x;
        public float y;
        public float z;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct Vec3f32
    {
        public Vec3f32(Vec3f32 other)
        {
            x = other.x;
            y = other.y;
            z = other.z;
        }

        public Unmanaged ToUnmanaged()
        {
            var marshaller = new Marshaller(this);
            try { return marshaller.ToUnmanaged(); }
            finally { marshaller.Free(); }
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public float x;
            public float y;
            public float z;

            public Vec3f32 ToManaged()
            {
                var marshaller = new Marshaller(this);
                try { return marshaller.ToManaged(); }
                finally { marshaller.Free(); }
            }
        }

        [CustomMarshaller(typeof(Vec3f32), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private Vec3f32 _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(Vec3f32 managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(Vec3f32 managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                _unmanaged.x = _managed.x;
                _unmanaged.y = _managed.y;
                _unmanaged.z = _managed.z;

                return _unmanaged;
            }

            public unsafe Vec3f32 ToManaged()
            {
                _managed = new Vec3f32();

                _managed.x = _unmanaged.x;
                _managed.y = _unmanaged.y;
                _managed.z = _unmanaged.z;

                return _managed;
            }
            public void Free() { }
        }
    }

    public partial struct Visibility1
    {
        public byte pblc;
        byte prvt;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct Visibility1
    {
        public Visibility1(Visibility1 other)
        {
            pblc = other.pblc;
            prvt = other.prvt;
        }

        public Unmanaged ToUnmanaged()
        {
            var marshaller = new Marshaller(this);
            try { return marshaller.ToUnmanaged(); }
            finally { marshaller.Free(); }
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public byte pblc;
            public byte prvt;

            public Visibility1 ToManaged()
            {
                var marshaller = new Marshaller(this);
                try { return marshaller.ToManaged(); }
                finally { marshaller.Free(); }
            }
        }

        [CustomMarshaller(typeof(Visibility1), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private Visibility1 _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(Visibility1 managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(Visibility1 managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                _unmanaged.pblc = _managed.pblc;
                _unmanaged.prvt = _managed.prvt;

                return _unmanaged;
            }

            public unsafe Visibility1 ToManaged()
            {
                _managed = new Visibility1();

                _managed.pblc = _unmanaged.pblc;
                _managed.prvt = _unmanaged.prvt;

                return _managed;
            }
            public void Free() { }
        }
    }

    public partial struct Visibility2
    {
        public byte pblc1;
        public byte pblc2;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct Visibility2
    {
        public Visibility2(Visibility2 other)
        {
            pblc1 = other.pblc1;
            pblc2 = other.pblc2;
        }

        public Unmanaged ToUnmanaged()
        {
            var marshaller = new Marshaller(this);
            try { return marshaller.ToUnmanaged(); }
            finally { marshaller.Free(); }
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public byte pblc1;
            public byte pblc2;

            public Visibility2 ToManaged()
            {
                var marshaller = new Marshaller(this);
                try { return marshaller.ToManaged(); }
                finally { marshaller.Free(); }
            }
        }

        [CustomMarshaller(typeof(Visibility2), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private Visibility2 _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(Visibility2 managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(Visibility2 managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                _unmanaged.pblc1 = _managed.pblc1;
                _unmanaged.pblc2 = _managed.pblc2;

                return _unmanaged;
            }

            public unsafe Visibility2 ToManaged()
            {
                _managed = new Visibility2();

                _managed.pblc1 = _unmanaged.pblc1;
                _managed.pblc2 = _unmanaged.pblc2;

                return _managed;
            }
            public void Free() { }
        }
    }

    public partial struct Weird1u32
    {
        uint x;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct Weird1u32
    {
        public Weird1u32(Weird1u32 other)
        {
            x = other.x;
        }

        public Unmanaged ToUnmanaged()
        {
            var marshaller = new Marshaller(this);
            try { return marshaller.ToUnmanaged(); }
            finally { marshaller.Free(); }
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public uint x;

            public Weird1u32 ToManaged()
            {
                var marshaller = new Marshaller(this);
                try { return marshaller.ToManaged(); }
                finally { marshaller.Free(); }
            }
        }

        [CustomMarshaller(typeof(Weird1u32), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private Weird1u32 _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(Weird1u32 managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(Weird1u32 managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                _unmanaged.x = _managed.x;

                return _unmanaged;
            }

            public unsafe Weird1u32 ToManaged()
            {
                _managed = new Weird1u32();

                _managed.x = _unmanaged.x;

                return _managed;
            }
            public void Free() { }
        }
    }

    public partial struct Weird2u8
    {
        byte t;
        byte[] a;
        IntPtr r;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct Weird2u8
    {
        public Weird2u8(Weird2u8 other)
        {
            t = other.t;
            a = other.a;
            r = other.r;
        }

        public Unmanaged ToUnmanaged()
        {
            var marshaller = new Marshaller(this);
            try { return marshaller.ToUnmanaged(); }
            finally { marshaller.Free(); }
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public byte t;
            public fixed byte a[5];
            public IntPtr r;

            public Weird2u8 ToManaged()
            {
                var marshaller = new Marshaller(this);
                try { return marshaller.ToManaged(); }
                finally { marshaller.Free(); }
            }
        }

        [CustomMarshaller(typeof(Weird2u8), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private Weird2u8 _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(Weird2u8 managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(Weird2u8 managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                _unmanaged.t = _managed.t;
                fixed(byte* _fixed = _unmanaged.a)
                {
                    if (_managed.a == null) { throw new InvalidOperationException("Array 'a' must not be null"); }
                    if (_managed.a.Length != 5) { throw new InvalidOperationException("Array size mismatch for 'a'"); }
                    var src = new ReadOnlySpan<byte>(_managed.a, 0, 5);
                    var dst = new Span<byte>(_fixed, 5);
                    src.CopyTo(dst);
                }
                _unmanaged.r = _managed.r;

                return _unmanaged;
            }

            public unsafe Weird2u8 ToManaged()
            {
                _managed = new Weird2u8();

                _managed.t = _unmanaged.t;
                fixed(byte* _fixed = _unmanaged.a)
                {
                    _managed.a = new byte[5];
                    var src = new ReadOnlySpan<byte>(_fixed, 5);
                    var dst = new Span<byte>(_managed.a, 0, 5);
                    src.CopyTo(dst);
                }
                _managed.r = _unmanaged.r;

                return _managed;
            }
            public void Free() { }
        }
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate byte InteropDelegate_fn_u8_rval_u8(byte x0);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void InteropDelegate_fn_CharArray(CharArray x0);
    public delegate void InteropDelegate_fn_CharArray_native(CharArray.Unmanaged x0);

    public enum Error
    {
        Ok = 0,
        Null = 100,
        Panic = 200,
        Delegate = 300,
        Fail = 400,
    }

    public partial struct ResultError
    {
        internal Error _err;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct ResultError
    {
        public ResultError(Error e) { _err = e; }

        public static ResultError OK => new ResultError(Error.Ok);
        public static ResultError NULL => new ResultError(Error.Null);
        public static ResultError PANIC => new ResultError(Error.Panic);
        public static ResultError DELEGATE => new ResultError(Error.Delegate);
        public static ResultError FAIL => new ResultError(Error.Fail);

        public void Ok()
        {
            if (_err == Error.Ok)
            {
                return;
            }
            throw new InteropException<Error>(_err);
        }

        public bool IsOk() { return _err == Error.Ok; }
        public Error Err() { return _err; }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public Error _err;
        }

        [CustomMarshaller(typeof(ResultError), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }


        public ref struct Marshaller
        {
            private ResultError _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(ResultError managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(ResultError managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {
                _unmanaged = new Unmanaged();
                _unmanaged._err = _managed._err;
                return _unmanaged;
            }

            public unsafe ResultError ToManaged()
            {
                _managed = new ResultError();
                _managed._err = _unmanaged._err;
                return _managed;
            }

            public void Free() { }
        }

    }


    public partial struct SliceBool
    {
        GCHandle _handle;
        IntPtr _data;
        ulong _len;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct SliceBool : IEnumerable<Bool>, IDisposable
    {
        public int Count => (int) _len;

        public unsafe ReadOnlySpan<Bool> ReadOnlySpan
        {
            get => new(_data.ToPointer(), (int)_len);
        }

        public unsafe Bool this[int i]
        {
            get
            {
                if (i >= Count) throw new IndexOutOfRangeException();
                return Unsafe.Read<Bool>((void*)IntPtr.Add(_data, i * Unsafe.SizeOf<Bool>()));
            }

        }

        public SliceBool(IntPtr data, ulong len)
        {
            _data = data;
            _len = len;
        }

        public SliceBool(Bool[] managed)
        {
            _handle = GCHandle.Alloc(managed, GCHandleType.Pinned);
            _data = _handle.AddrOfPinnedObject();
            _len = (ulong) managed.Length;
        }

        public IEnumerator<Bool> GetEnumerator()
        {
            for (var i = 0; i < Count; ++i) { yield return this[i]; }
        }

        IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();

        public void Dispose()
        {
            if (_handle is { IsAllocated: true }) { _handle.Free(); }
        }

        [CustomMarshaller(typeof(SliceBool), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            public IntPtr Data;
            public ulong Len;

            public SliceBool ToManaged()
            {
                return new SliceBool(Data, Len);
            }
        }

        public ref struct Marshaller
        {
            private SliceBool _managed;
            private Unmanaged _unmanaged;

            public void FromManaged(SliceBool managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public Unmanaged ToUnmanaged()
            {
                _unmanaged = new Unmanaged();
                _unmanaged.Data = _managed._data;
                _unmanaged.Len = _managed._len;
                return _unmanaged;
            }

            public unsafe SliceBool ToManaged()
            {
                _managed = new SliceBool();
                _managed._data = _unmanaged.Data;
                _managed._len = _unmanaged.Len;
                return _managed;
            }

            public void Free() { }
        }
    }

    public partial struct SliceI32
    {
        GCHandle _handle;
        IntPtr _data;
        ulong _len;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct SliceI32 : IEnumerable<int>, IDisposable
    {
        public int Count => (int) _len;

        public unsafe ReadOnlySpan<int> ReadOnlySpan
        {
            get => new(_data.ToPointer(), (int)_len);
        }

        public unsafe int this[int i]
        {
            get
            {
                if (i >= Count) throw new IndexOutOfRangeException();
                return Unsafe.Read<int>((void*)IntPtr.Add(_data, i * Unsafe.SizeOf<int>()));
            }

        }

        public SliceI32(IntPtr data, ulong len)
        {
            _data = data;
            _len = len;
        }

        public SliceI32(int[] managed)
        {
            _handle = GCHandle.Alloc(managed, GCHandleType.Pinned);
            _data = _handle.AddrOfPinnedObject();
            _len = (ulong) managed.Length;
        }

        public IEnumerator<int> GetEnumerator()
        {
            for (var i = 0; i < Count; ++i) { yield return this[i]; }
        }

        IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();

        public void Dispose()
        {
            if (_handle is { IsAllocated: true }) { _handle.Free(); }
        }

        [CustomMarshaller(typeof(SliceI32), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            public IntPtr Data;
            public ulong Len;

            public SliceI32 ToManaged()
            {
                return new SliceI32(Data, Len);
            }
        }

        public ref struct Marshaller
        {
            private SliceI32 _managed;
            private Unmanaged _unmanaged;

            public void FromManaged(SliceI32 managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public Unmanaged ToUnmanaged()
            {
                _unmanaged = new Unmanaged();
                _unmanaged.Data = _managed._data;
                _unmanaged.Len = _managed._len;
                return _unmanaged;
            }

            public unsafe SliceI32 ToManaged()
            {
                _managed = new SliceI32();
                _managed._data = _unmanaged.Data;
                _managed._len = _unmanaged.Len;
                return _managed;
            }

            public void Free() { }
        }
    }

    public partial struct SliceU32
    {
        GCHandle _handle;
        IntPtr _data;
        ulong _len;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct SliceU32 : IEnumerable<uint>, IDisposable
    {
        public int Count => (int) _len;

        public unsafe ReadOnlySpan<uint> ReadOnlySpan
        {
            get => new(_data.ToPointer(), (int)_len);
        }

        public unsafe uint this[int i]
        {
            get
            {
                if (i >= Count) throw new IndexOutOfRangeException();
                return Unsafe.Read<uint>((void*)IntPtr.Add(_data, i * Unsafe.SizeOf<uint>()));
            }

        }

        public SliceU32(IntPtr data, ulong len)
        {
            _data = data;
            _len = len;
        }

        public SliceU32(uint[] managed)
        {
            _handle = GCHandle.Alloc(managed, GCHandleType.Pinned);
            _data = _handle.AddrOfPinnedObject();
            _len = (ulong) managed.Length;
        }

        public IEnumerator<uint> GetEnumerator()
        {
            for (var i = 0; i < Count; ++i) { yield return this[i]; }
        }

        IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();

        public void Dispose()
        {
            if (_handle is { IsAllocated: true }) { _handle.Free(); }
        }

        [CustomMarshaller(typeof(SliceU32), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            public IntPtr Data;
            public ulong Len;

            public SliceU32 ToManaged()
            {
                return new SliceU32(Data, Len);
            }
        }

        public ref struct Marshaller
        {
            private SliceU32 _managed;
            private Unmanaged _unmanaged;

            public void FromManaged(SliceU32 managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public Unmanaged ToUnmanaged()
            {
                _unmanaged = new Unmanaged();
                _unmanaged.Data = _managed._data;
                _unmanaged.Len = _managed._len;
                return _unmanaged;
            }

            public unsafe SliceU32 ToManaged()
            {
                _managed = new SliceU32();
                _managed._data = _unmanaged.Data;
                _managed._len = _unmanaged.Len;
                return _managed;
            }

            public void Free() { }
        }
    }

    public partial struct SliceU8
    {
        GCHandle _handle;
        IntPtr _data;
        ulong _len;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct SliceU8 : IEnumerable<byte>, IDisposable
    {
        public int Count => (int) _len;

        public unsafe ReadOnlySpan<byte> ReadOnlySpan
        {
            get => new(_data.ToPointer(), (int)_len);
        }

        public unsafe byte this[int i]
        {
            get
            {
                if (i >= Count) throw new IndexOutOfRangeException();
                return Unsafe.Read<byte>((void*)IntPtr.Add(_data, i * Unsafe.SizeOf<byte>()));
            }

        }

        public SliceU8(IntPtr data, ulong len)
        {
            _data = data;
            _len = len;
        }

        public SliceU8(byte[] managed)
        {
            _handle = GCHandle.Alloc(managed, GCHandleType.Pinned);
            _data = _handle.AddrOfPinnedObject();
            _len = (ulong) managed.Length;
        }

        public IEnumerator<byte> GetEnumerator()
        {
            for (var i = 0; i < Count; ++i) { yield return this[i]; }
        }

        IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();

        public void Dispose()
        {
            if (_handle is { IsAllocated: true }) { _handle.Free(); }
        }

        [CustomMarshaller(typeof(SliceU8), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            public IntPtr Data;
            public ulong Len;

            public SliceU8 ToManaged()
            {
                return new SliceU8(Data, Len);
            }
        }

        public ref struct Marshaller
        {
            private SliceU8 _managed;
            private Unmanaged _unmanaged;

            public void FromManaged(SliceU8 managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public Unmanaged ToUnmanaged()
            {
                _unmanaged = new Unmanaged();
                _unmanaged.Data = _managed._data;
                _unmanaged.Len = _managed._len;
                return _unmanaged;
            }

            public unsafe SliceU8 ToManaged()
            {
                _managed = new SliceU8();
                _managed._data = _unmanaged.Data;
                _managed._len = _unmanaged.Len;
                return _managed;
            }

            public void Free() { }
        }
    }

    public partial struct SliceUseCStrPtr
    {
        GCHandle _handle;
        IntPtr _data;
        ulong _len;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct SliceUseCStrPtr : IEnumerable<UseCStrPtr>, IDisposable
    {
        public int Count => (int) _len;

        public unsafe ReadOnlySpan<UseCStrPtr> ReadOnlySpan
        {
            get => new(_data.ToPointer(), (int)_len);
        }

        public unsafe UseCStrPtr this[int i]
        {
            get
            {
                if (i >= Count) throw new IndexOutOfRangeException();
                return Unsafe.Read<UseCStrPtr>((void*)IntPtr.Add(_data, i * Unsafe.SizeOf<UseCStrPtr>()));
            }

        }

        public SliceUseCStrPtr(IntPtr data, ulong len)
        {
            _data = data;
            _len = len;
        }

        public SliceUseCStrPtr(UseCStrPtr[] managed)
        {
            _handle = GCHandle.Alloc(managed, GCHandleType.Pinned);
            _data = _handle.AddrOfPinnedObject();
            _len = (ulong) managed.Length;
        }

        public IEnumerator<UseCStrPtr> GetEnumerator()
        {
            for (var i = 0; i < Count; ++i) { yield return this[i]; }
        }

        IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();

        public void Dispose()
        {
            if (_handle is { IsAllocated: true }) { _handle.Free(); }
        }

        [CustomMarshaller(typeof(SliceUseCStrPtr), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            public IntPtr Data;
            public ulong Len;

            public SliceUseCStrPtr ToManaged()
            {
                return new SliceUseCStrPtr(Data, Len);
            }
        }

        public ref struct Marshaller
        {
            private SliceUseCStrPtr _managed;
            private Unmanaged _unmanaged;

            public void FromManaged(SliceUseCStrPtr managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public Unmanaged ToUnmanaged()
            {
                _unmanaged = new Unmanaged();
                _unmanaged.Data = _managed._data;
                _unmanaged.Len = _managed._len;
                return _unmanaged;
            }

            public unsafe SliceUseCStrPtr ToManaged()
            {
                _managed = new SliceUseCStrPtr();
                _managed._data = _unmanaged.Data;
                _managed._len = _unmanaged.Len;
                return _managed;
            }

            public void Free() { }
        }
    }

    public partial struct SliceUseString
    {
        UseString[] _managed;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct SliceUseString : IEnumerable<UseString>, IDisposable
    {
        public int Count => _managed?.Length ?? (int) 0;

        public unsafe UseString this[int i]
        {
            get
            {
                if (i >= Count) throw new IndexOutOfRangeException();
                if (_managed is not null) { return _managed[i]; }
                return default;
            }
        }

        public SliceUseString(UseString[] managed)
        {
            _managed = managed;
        }

        public IEnumerator<UseString> GetEnumerator()
        {
            for (var i = 0; i < Count; ++i) { yield return this[i]; }
        }

        IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();

        public void Dispose() { }

        [CustomMarshaller(typeof(SliceUseString), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            public IntPtr Data;
            public ulong Len;
        }

        public ref struct Marshaller
        {
            private SliceUseString _managed;
            private Unmanaged _unmanaged;

            public void FromManaged(SliceUseString managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {
                var size = sizeof(UseString.Unmanaged);
                _unmanaged = new Unmanaged();
                _unmanaged.Data = Marshal.AllocHGlobal(size * _managed.Count);
                _unmanaged.Len = (ulong) _managed.Count;
                for (var i = 0; i < _managed.Count; ++i)
                {
                    var _marshaller = new UseString.Marshaller();
                    _marshaller.FromManaged(new UseString(_managed._managed[i]));
                    var unmanaged = _marshaller.ToUnmanaged();
                    var dst = IntPtr.Add(_unmanaged.Data, i * size);
                    Marshal.StructureToPtr(unmanaged, dst, false);
                }
                return _unmanaged;
            }

            public unsafe SliceUseString ToManaged()
            {
                _managed = new SliceUseString();
                return _managed;
            }

            public void Free() { Marshal.FreeHGlobal(_unmanaged.Data); }
        }
    }

    public partial struct SliceUtf8String
    {
        string[] _managed;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct SliceUtf8String : IEnumerable<string>, IDisposable
    {
        public int Count => _managed?.Length ?? (int) 0;

        public unsafe string this[int i]
        {
            get
            {
                if (i >= Count) throw new IndexOutOfRangeException();
                if (_managed is not null) { return _managed[i]; }
                return default;
            }
        }

        public SliceUtf8String(string[] managed)
        {
            _managed = managed;
        }

        public IEnumerator<string> GetEnumerator()
        {
            for (var i = 0; i < Count; ++i) { yield return this[i]; }
        }

        IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();

        public void Dispose() { }

        [CustomMarshaller(typeof(SliceUtf8String), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            public IntPtr Data;
            public ulong Len;
        }

        public ref struct Marshaller
        {
            private SliceUtf8String _managed;
            private Unmanaged _unmanaged;

            public void FromManaged(SliceUtf8String managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {
                var size = sizeof(Utf8String.Unmanaged);
                _unmanaged = new Unmanaged();
                _unmanaged.Data = Marshal.AllocHGlobal(size * _managed.Count);
                _unmanaged.Len = (ulong) _managed.Count;
                for (var i = 0; i < _managed.Count; ++i)
                {
                    var _marshaller = new Utf8String.Marshaller();
                    _marshaller.FromManaged(new Utf8String(_managed._managed[i]));
                    var unmanaged = _marshaller.ToUnmanaged();
                    var dst = IntPtr.Add(_unmanaged.Data, i * size);
                    Marshal.StructureToPtr(unmanaged, dst, false);
                }
                return _unmanaged;
            }

            public unsafe SliceUtf8String ToManaged()
            {
                _managed = new SliceUtf8String();
                return _managed;
            }

            public void Free() { Marshal.FreeHGlobal(_unmanaged.Data); }
        }
    }

    public partial struct SliceVec3f32
    {
        GCHandle _handle;
        IntPtr _data;
        ulong _len;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct SliceVec3f32 : IEnumerable<Vec3f32>, IDisposable
    {
        public int Count => (int) _len;

        public unsafe ReadOnlySpan<Vec3f32> ReadOnlySpan
        {
            get => new(_data.ToPointer(), (int)_len);
        }

        public unsafe Vec3f32 this[int i]
        {
            get
            {
                if (i >= Count) throw new IndexOutOfRangeException();
                return Unsafe.Read<Vec3f32>((void*)IntPtr.Add(_data, i * Unsafe.SizeOf<Vec3f32>()));
            }

        }

        public SliceVec3f32(IntPtr data, ulong len)
        {
            _data = data;
            _len = len;
        }

        public SliceVec3f32(Vec3f32[] managed)
        {
            _handle = GCHandle.Alloc(managed, GCHandleType.Pinned);
            _data = _handle.AddrOfPinnedObject();
            _len = (ulong) managed.Length;
        }

        public IEnumerator<Vec3f32> GetEnumerator()
        {
            for (var i = 0; i < Count; ++i) { yield return this[i]; }
        }

        IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();

        public void Dispose()
        {
            if (_handle is { IsAllocated: true }) { _handle.Free(); }
        }

        [CustomMarshaller(typeof(SliceVec3f32), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            public IntPtr Data;
            public ulong Len;

            public SliceVec3f32 ToManaged()
            {
                return new SliceVec3f32(Data, Len);
            }
        }

        public ref struct Marshaller
        {
            private SliceVec3f32 _managed;
            private Unmanaged _unmanaged;

            public void FromManaged(SliceVec3f32 managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public Unmanaged ToUnmanaged()
            {
                _unmanaged = new Unmanaged();
                _unmanaged.Data = _managed._data;
                _unmanaged.Len = _managed._len;
                return _unmanaged;
            }

            public unsafe SliceVec3f32 ToManaged()
            {
                _managed = new SliceVec3f32();
                _managed._data = _unmanaged.Data;
                _managed._len = _unmanaged.Len;
                return _managed;
            }

            public void Free() { }
        }
    }

    public partial struct SliceMutCharArray
    {
        GCHandle _handle;
        IntPtr _data;
        ulong _len;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct SliceMutCharArray : IEnumerable<CharArray>, IDisposable
    {
        public int Count => (int) _len;

        public unsafe ReadOnlySpan<CharArray> ReadOnlySpan
        {
            get => new(_data.ToPointer(), (int)_len);
        }

        public unsafe CharArray this[int i]
        {
            get
            {
                if (i >= Count) throw new IndexOutOfRangeException();
                return Unsafe.Read<CharArray>((void*)IntPtr.Add(_data, i * Unsafe.SizeOf<CharArray>()));
            }

            set
            {
                if (i >= Count) throw new IndexOutOfRangeException();
                Unsafe.Write<CharArray>((void*)IntPtr.Add(_data, i * Unsafe.SizeOf<CharArray>()), value);
            }
        }

        public SliceMutCharArray(IntPtr data, ulong len)
        {
            _data = data;
            _len = len;
        }

        public SliceMutCharArray(CharArray[] managed)
        {
            _handle = GCHandle.Alloc(managed, GCHandleType.Pinned);
            _data = _handle.AddrOfPinnedObject();
            _len = (ulong) managed.Length;
        }

        public IEnumerator<CharArray> GetEnumerator()
        {
            for (var i = 0; i < Count; ++i) { yield return this[i]; }
        }

        IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();

        public void Dispose()
        {
            if (_handle is { IsAllocated: true }) { _handle.Free(); }
        }

        [CustomMarshaller(typeof(SliceMutCharArray), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            public IntPtr Data;
            public ulong Len;

            public SliceMutCharArray ToManaged()
            {
                return new SliceMutCharArray(Data, Len);
            }
        }

        public ref struct Marshaller
        {
            private SliceMutCharArray _managed;
            private Unmanaged _unmanaged;

            public void FromManaged(SliceMutCharArray managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public Unmanaged ToUnmanaged()
            {
                _unmanaged = new Unmanaged();
                _unmanaged.Data = _managed._data;
                _unmanaged.Len = _managed._len;
                return _unmanaged;
            }

            public unsafe SliceMutCharArray ToManaged()
            {
                _managed = new SliceMutCharArray();
                _managed._data = _unmanaged.Data;
                _managed._len = _unmanaged.Len;
                return _managed;
            }

            public void Free() { }
        }
    }

    public partial struct SliceMutU32
    {
        GCHandle _handle;
        IntPtr _data;
        ulong _len;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct SliceMutU32 : IEnumerable<uint>, IDisposable
    {
        public int Count => (int) _len;

        public unsafe ReadOnlySpan<uint> ReadOnlySpan
        {
            get => new(_data.ToPointer(), (int)_len);
        }

        public unsafe uint this[int i]
        {
            get
            {
                if (i >= Count) throw new IndexOutOfRangeException();
                return Unsafe.Read<uint>((void*)IntPtr.Add(_data, i * Unsafe.SizeOf<uint>()));
            }

            set
            {
                if (i >= Count) throw new IndexOutOfRangeException();
                Unsafe.Write<uint>((void*)IntPtr.Add(_data, i * Unsafe.SizeOf<uint>()), value);
            }
        }

        public SliceMutU32(IntPtr data, ulong len)
        {
            _data = data;
            _len = len;
        }

        public SliceMutU32(uint[] managed)
        {
            _handle = GCHandle.Alloc(managed, GCHandleType.Pinned);
            _data = _handle.AddrOfPinnedObject();
            _len = (ulong) managed.Length;
        }

        public IEnumerator<uint> GetEnumerator()
        {
            for (var i = 0; i < Count; ++i) { yield return this[i]; }
        }

        IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();

        public void Dispose()
        {
            if (_handle is { IsAllocated: true }) { _handle.Free(); }
        }

        [CustomMarshaller(typeof(SliceMutU32), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            public IntPtr Data;
            public ulong Len;

            public SliceMutU32 ToManaged()
            {
                return new SliceMutU32(Data, Len);
            }
        }

        public ref struct Marshaller
        {
            private SliceMutU32 _managed;
            private Unmanaged _unmanaged;

            public void FromManaged(SliceMutU32 managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public Unmanaged ToUnmanaged()
            {
                _unmanaged = new Unmanaged();
                _unmanaged.Data = _managed._data;
                _unmanaged.Len = _managed._len;
                return _unmanaged;
            }

            public unsafe SliceMutU32 ToManaged()
            {
                _managed = new SliceMutU32();
                _managed._data = _unmanaged.Data;
                _managed._len = _unmanaged.Len;
                return _managed;
            }

            public void Free() { }
        }
    }

    public partial struct SliceMutU8
    {
        GCHandle _handle;
        IntPtr _data;
        ulong _len;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct SliceMutU8 : IEnumerable<byte>, IDisposable
    {
        public int Count => (int) _len;

        public unsafe ReadOnlySpan<byte> ReadOnlySpan
        {
            get => new(_data.ToPointer(), (int)_len);
        }

        public unsafe byte this[int i]
        {
            get
            {
                if (i >= Count) throw new IndexOutOfRangeException();
                return Unsafe.Read<byte>((void*)IntPtr.Add(_data, i * Unsafe.SizeOf<byte>()));
            }

            set
            {
                if (i >= Count) throw new IndexOutOfRangeException();
                Unsafe.Write<byte>((void*)IntPtr.Add(_data, i * Unsafe.SizeOf<byte>()), value);
            }
        }

        public SliceMutU8(IntPtr data, ulong len)
        {
            _data = data;
            _len = len;
        }

        public SliceMutU8(byte[] managed)
        {
            _handle = GCHandle.Alloc(managed, GCHandleType.Pinned);
            _data = _handle.AddrOfPinnedObject();
            _len = (ulong) managed.Length;
        }

        public IEnumerator<byte> GetEnumerator()
        {
            for (var i = 0; i < Count; ++i) { yield return this[i]; }
        }

        IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();

        public void Dispose()
        {
            if (_handle is { IsAllocated: true }) { _handle.Free(); }
        }

        [CustomMarshaller(typeof(SliceMutU8), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            public IntPtr Data;
            public ulong Len;

            public SliceMutU8 ToManaged()
            {
                return new SliceMutU8(Data, Len);
            }
        }

        public ref struct Marshaller
        {
            private SliceMutU8 _managed;
            private Unmanaged _unmanaged;

            public void FromManaged(SliceMutU8 managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public Unmanaged ToUnmanaged()
            {
                _unmanaged = new Unmanaged();
                _unmanaged.Data = _managed._data;
                _unmanaged.Len = _managed._len;
                return _unmanaged;
            }

            public unsafe SliceMutU8 ToManaged()
            {
                _managed = new SliceMutU8();
                _managed._data = _unmanaged.Data;
                _managed._len = _unmanaged.Len;
                return _managed;
            }

            public void Free() { }
        }
    }

    ///Option type containing boolean flag and maybe valid data.
    public partial struct OptionInner
    {
        ///Element that is maybe valid.
        Inner t;
        ///Byte where `1` means element `t` is valid.
        byte is_some;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct OptionInner
    {
        public OptionInner(OptionInner other)
        {
            t = other.t;
            is_some = other.is_some;
        }

        public Unmanaged ToUnmanaged()
        {
            var marshaller = new Marshaller(this);
            try { return marshaller.ToUnmanaged(); }
            finally { marshaller.Free(); }
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public Inner.Unmanaged t;
            public byte is_some;

            public OptionInner ToManaged()
            {
                var marshaller = new Marshaller(this);
                try { return marshaller.ToManaged(); }
                finally { marshaller.Free(); }
            }
        }

        [CustomMarshaller(typeof(OptionInner), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private OptionInner _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(OptionInner managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(OptionInner managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                var _t = new Inner.Marshaller(_managed.t);
                _unmanaged.t = _t.ToUnmanaged();
                _unmanaged.is_some = _managed.is_some;

                return _unmanaged;
            }

            public unsafe OptionInner ToManaged()
            {
                _managed = new OptionInner();

                var _t = new Inner.Marshaller(_unmanaged.t);
                _managed.t = _t.ToManaged();
                _managed.is_some = _unmanaged.is_some;

                return _managed;
            }
            public void Free() { }
        }
    }

    public partial struct OptionInner
    {
        public static OptionInner FromNullable(Inner? nullable)
        {
            var result = new OptionInner();
            if (nullable.HasValue)
            {
                result.is_some = 1;
                result.t = nullable.Value;
            }

            return result;
        }

        public Inner? ToNullable()
        {
            return this.is_some == 1 ? this.t : (Inner?)null;
        }
    }


    ///Result that contains value or an error.
    public partial struct ResultConstPtrServiceAsyncError
    {
        ///Element if err is `Ok`.
        IntPtr t;
        ///Error value.
        Error err;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct ResultConstPtrServiceAsyncError
    {
        public ResultConstPtrServiceAsyncError(ResultConstPtrServiceAsyncError other)
        {
            t = other.t;
            err = other.err;
        }

        public Unmanaged ToUnmanaged()
        {
            var marshaller = new Marshaller(this);
            try { return marshaller.ToUnmanaged(); }
            finally { marshaller.Free(); }
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public IntPtr t;
            public Error err;

            public ResultConstPtrServiceAsyncError ToManaged()
            {
                var marshaller = new Marshaller(this);
                try { return marshaller.ToManaged(); }
                finally { marshaller.Free(); }
            }
        }

        [CustomMarshaller(typeof(ResultConstPtrServiceAsyncError), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private ResultConstPtrServiceAsyncError _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(ResultConstPtrServiceAsyncError managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(ResultConstPtrServiceAsyncError managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                _unmanaged.t = _managed.t;
                _unmanaged.err = _managed.err;

                return _unmanaged;
            }

            public unsafe ResultConstPtrServiceAsyncError ToManaged()
            {
                _managed = new ResultConstPtrServiceAsyncError();

                _managed.t = _unmanaged.t;
                _managed.err = _unmanaged.err;

                return _managed;
            }
            public void Free() { }
        }
    }

    public partial struct ResultConstPtrServiceAsyncError
    {
        public IntPtr Ok()
        {
            if (err == Error.Ok)
            {
                return t;
            }
            throw new InteropException<Error>(err);
        }

        public bool IsOk() { return err == Error.Ok; }
        public Error Err() { return err; }

    }


    ///Result that contains value or an error.
    public partial struct ResultConstPtrServiceBasicError
    {
        ///Element if err is `Ok`.
        IntPtr t;
        ///Error value.
        Error err;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct ResultConstPtrServiceBasicError
    {
        public ResultConstPtrServiceBasicError(ResultConstPtrServiceBasicError other)
        {
            t = other.t;
            err = other.err;
        }

        public Unmanaged ToUnmanaged()
        {
            var marshaller = new Marshaller(this);
            try { return marshaller.ToUnmanaged(); }
            finally { marshaller.Free(); }
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public IntPtr t;
            public Error err;

            public ResultConstPtrServiceBasicError ToManaged()
            {
                var marshaller = new Marshaller(this);
                try { return marshaller.ToManaged(); }
                finally { marshaller.Free(); }
            }
        }

        [CustomMarshaller(typeof(ResultConstPtrServiceBasicError), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private ResultConstPtrServiceBasicError _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(ResultConstPtrServiceBasicError managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(ResultConstPtrServiceBasicError managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                _unmanaged.t = _managed.t;
                _unmanaged.err = _managed.err;

                return _unmanaged;
            }

            public unsafe ResultConstPtrServiceBasicError ToManaged()
            {
                _managed = new ResultConstPtrServiceBasicError();

                _managed.t = _unmanaged.t;
                _managed.err = _unmanaged.err;

                return _managed;
            }
            public void Free() { }
        }
    }

    public partial struct ResultConstPtrServiceBasicError
    {
        public IntPtr Ok()
        {
            if (err == Error.Ok)
            {
                return t;
            }
            throw new InteropException<Error>(err);
        }

        public bool IsOk() { return err == Error.Ok; }
        public Error Err() { return err; }

    }


    ///Result that contains value or an error.
    public partial struct ResultConstPtrServiceCallbacksError
    {
        ///Element if err is `Ok`.
        IntPtr t;
        ///Error value.
        Error err;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct ResultConstPtrServiceCallbacksError
    {
        public ResultConstPtrServiceCallbacksError(ResultConstPtrServiceCallbacksError other)
        {
            t = other.t;
            err = other.err;
        }

        public Unmanaged ToUnmanaged()
        {
            var marshaller = new Marshaller(this);
            try { return marshaller.ToUnmanaged(); }
            finally { marshaller.Free(); }
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public IntPtr t;
            public Error err;

            public ResultConstPtrServiceCallbacksError ToManaged()
            {
                var marshaller = new Marshaller(this);
                try { return marshaller.ToManaged(); }
                finally { marshaller.Free(); }
            }
        }

        [CustomMarshaller(typeof(ResultConstPtrServiceCallbacksError), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private ResultConstPtrServiceCallbacksError _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(ResultConstPtrServiceCallbacksError managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(ResultConstPtrServiceCallbacksError managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                _unmanaged.t = _managed.t;
                _unmanaged.err = _managed.err;

                return _unmanaged;
            }

            public unsafe ResultConstPtrServiceCallbacksError ToManaged()
            {
                _managed = new ResultConstPtrServiceCallbacksError();

                _managed.t = _unmanaged.t;
                _managed.err = _unmanaged.err;

                return _managed;
            }
            public void Free() { }
        }
    }

    public partial struct ResultConstPtrServiceCallbacksError
    {
        public IntPtr Ok()
        {
            if (err == Error.Ok)
            {
                return t;
            }
            throw new InteropException<Error>(err);
        }

        public bool IsOk() { return err == Error.Ok; }
        public Error Err() { return err; }

    }


    ///Result that contains value or an error.
    public partial struct ResultConstPtrServiceDependentError
    {
        ///Element if err is `Ok`.
        IntPtr t;
        ///Error value.
        Error err;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct ResultConstPtrServiceDependentError
    {
        public ResultConstPtrServiceDependentError(ResultConstPtrServiceDependentError other)
        {
            t = other.t;
            err = other.err;
        }

        public Unmanaged ToUnmanaged()
        {
            var marshaller = new Marshaller(this);
            try { return marshaller.ToUnmanaged(); }
            finally { marshaller.Free(); }
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public IntPtr t;
            public Error err;

            public ResultConstPtrServiceDependentError ToManaged()
            {
                var marshaller = new Marshaller(this);
                try { return marshaller.ToManaged(); }
                finally { marshaller.Free(); }
            }
        }

        [CustomMarshaller(typeof(ResultConstPtrServiceDependentError), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private ResultConstPtrServiceDependentError _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(ResultConstPtrServiceDependentError managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(ResultConstPtrServiceDependentError managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                _unmanaged.t = _managed.t;
                _unmanaged.err = _managed.err;

                return _unmanaged;
            }

            public unsafe ResultConstPtrServiceDependentError ToManaged()
            {
                _managed = new ResultConstPtrServiceDependentError();

                _managed.t = _unmanaged.t;
                _managed.err = _unmanaged.err;

                return _managed;
            }
            public void Free() { }
        }
    }

    public partial struct ResultConstPtrServiceDependentError
    {
        public IntPtr Ok()
        {
            if (err == Error.Ok)
            {
                return t;
            }
            throw new InteropException<Error>(err);
        }

        public bool IsOk() { return err == Error.Ok; }
        public Error Err() { return err; }

    }


    ///Result that contains value or an error.
    public partial struct ResultConstPtrServiceIgnoringMethodsError
    {
        ///Element if err is `Ok`.
        IntPtr t;
        ///Error value.
        Error err;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct ResultConstPtrServiceIgnoringMethodsError
    {
        public ResultConstPtrServiceIgnoringMethodsError(ResultConstPtrServiceIgnoringMethodsError other)
        {
            t = other.t;
            err = other.err;
        }

        public Unmanaged ToUnmanaged()
        {
            var marshaller = new Marshaller(this);
            try { return marshaller.ToUnmanaged(); }
            finally { marshaller.Free(); }
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public IntPtr t;
            public Error err;

            public ResultConstPtrServiceIgnoringMethodsError ToManaged()
            {
                var marshaller = new Marshaller(this);
                try { return marshaller.ToManaged(); }
                finally { marshaller.Free(); }
            }
        }

        [CustomMarshaller(typeof(ResultConstPtrServiceIgnoringMethodsError), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private ResultConstPtrServiceIgnoringMethodsError _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(ResultConstPtrServiceIgnoringMethodsError managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(ResultConstPtrServiceIgnoringMethodsError managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                _unmanaged.t = _managed.t;
                _unmanaged.err = _managed.err;

                return _unmanaged;
            }

            public unsafe ResultConstPtrServiceIgnoringMethodsError ToManaged()
            {
                _managed = new ResultConstPtrServiceIgnoringMethodsError();

                _managed.t = _unmanaged.t;
                _managed.err = _unmanaged.err;

                return _managed;
            }
            public void Free() { }
        }
    }

    public partial struct ResultConstPtrServiceIgnoringMethodsError
    {
        public IntPtr Ok()
        {
            if (err == Error.Ok)
            {
                return t;
            }
            throw new InteropException<Error>(err);
        }

        public bool IsOk() { return err == Error.Ok; }
        public Error Err() { return err; }

    }


    ///Result that contains value or an error.
    public partial struct ResultConstPtrServiceMainError
    {
        ///Element if err is `Ok`.
        IntPtr t;
        ///Error value.
        Error err;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct ResultConstPtrServiceMainError
    {
        public ResultConstPtrServiceMainError(ResultConstPtrServiceMainError other)
        {
            t = other.t;
            err = other.err;
        }

        public Unmanaged ToUnmanaged()
        {
            var marshaller = new Marshaller(this);
            try { return marshaller.ToUnmanaged(); }
            finally { marshaller.Free(); }
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public IntPtr t;
            public Error err;

            public ResultConstPtrServiceMainError ToManaged()
            {
                var marshaller = new Marshaller(this);
                try { return marshaller.ToManaged(); }
                finally { marshaller.Free(); }
            }
        }

        [CustomMarshaller(typeof(ResultConstPtrServiceMainError), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private ResultConstPtrServiceMainError _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(ResultConstPtrServiceMainError managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(ResultConstPtrServiceMainError managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                _unmanaged.t = _managed.t;
                _unmanaged.err = _managed.err;

                return _unmanaged;
            }

            public unsafe ResultConstPtrServiceMainError ToManaged()
            {
                _managed = new ResultConstPtrServiceMainError();

                _managed.t = _unmanaged.t;
                _managed.err = _unmanaged.err;

                return _managed;
            }
            public void Free() { }
        }
    }

    public partial struct ResultConstPtrServiceMainError
    {
        public IntPtr Ok()
        {
            if (err == Error.Ok)
            {
                return t;
            }
            throw new InteropException<Error>(err);
        }

        public bool IsOk() { return err == Error.Ok; }
        public Error Err() { return err; }

    }


    ///Result that contains value or an error.
    public partial struct ResultConstPtrServiceMultipleCtorsError
    {
        ///Element if err is `Ok`.
        IntPtr t;
        ///Error value.
        Error err;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct ResultConstPtrServiceMultipleCtorsError
    {
        public ResultConstPtrServiceMultipleCtorsError(ResultConstPtrServiceMultipleCtorsError other)
        {
            t = other.t;
            err = other.err;
        }

        public Unmanaged ToUnmanaged()
        {
            var marshaller = new Marshaller(this);
            try { return marshaller.ToUnmanaged(); }
            finally { marshaller.Free(); }
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public IntPtr t;
            public Error err;

            public ResultConstPtrServiceMultipleCtorsError ToManaged()
            {
                var marshaller = new Marshaller(this);
                try { return marshaller.ToManaged(); }
                finally { marshaller.Free(); }
            }
        }

        [CustomMarshaller(typeof(ResultConstPtrServiceMultipleCtorsError), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private ResultConstPtrServiceMultipleCtorsError _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(ResultConstPtrServiceMultipleCtorsError managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(ResultConstPtrServiceMultipleCtorsError managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                _unmanaged.t = _managed.t;
                _unmanaged.err = _managed.err;

                return _unmanaged;
            }

            public unsafe ResultConstPtrServiceMultipleCtorsError ToManaged()
            {
                _managed = new ResultConstPtrServiceMultipleCtorsError();

                _managed.t = _unmanaged.t;
                _managed.err = _unmanaged.err;

                return _managed;
            }
            public void Free() { }
        }
    }

    public partial struct ResultConstPtrServiceMultipleCtorsError
    {
        public IntPtr Ok()
        {
            if (err == Error.Ok)
            {
                return t;
            }
            throw new InteropException<Error>(err);
        }

        public bool IsOk() { return err == Error.Ok; }
        public Error Err() { return err; }

    }


    ///Result that contains value or an error.
    public partial struct ResultConstPtrServiceOnPanicError
    {
        ///Element if err is `Ok`.
        IntPtr t;
        ///Error value.
        Error err;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct ResultConstPtrServiceOnPanicError
    {
        public ResultConstPtrServiceOnPanicError(ResultConstPtrServiceOnPanicError other)
        {
            t = other.t;
            err = other.err;
        }

        public Unmanaged ToUnmanaged()
        {
            var marshaller = new Marshaller(this);
            try { return marshaller.ToUnmanaged(); }
            finally { marshaller.Free(); }
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public IntPtr t;
            public Error err;

            public ResultConstPtrServiceOnPanicError ToManaged()
            {
                var marshaller = new Marshaller(this);
                try { return marshaller.ToManaged(); }
                finally { marshaller.Free(); }
            }
        }

        [CustomMarshaller(typeof(ResultConstPtrServiceOnPanicError), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private ResultConstPtrServiceOnPanicError _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(ResultConstPtrServiceOnPanicError managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(ResultConstPtrServiceOnPanicError managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                _unmanaged.t = _managed.t;
                _unmanaged.err = _managed.err;

                return _unmanaged;
            }

            public unsafe ResultConstPtrServiceOnPanicError ToManaged()
            {
                _managed = new ResultConstPtrServiceOnPanicError();

                _managed.t = _unmanaged.t;
                _managed.err = _unmanaged.err;

                return _managed;
            }
            public void Free() { }
        }
    }

    public partial struct ResultConstPtrServiceOnPanicError
    {
        public IntPtr Ok()
        {
            if (err == Error.Ok)
            {
                return t;
            }
            throw new InteropException<Error>(err);
        }

        public bool IsOk() { return err == Error.Ok; }
        public Error Err() { return err; }

    }


    ///Result that contains value or an error.
    public partial struct ResultConstPtrServiceResultError
    {
        ///Element if err is `Ok`.
        IntPtr t;
        ///Error value.
        Error err;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct ResultConstPtrServiceResultError
    {
        public ResultConstPtrServiceResultError(ResultConstPtrServiceResultError other)
        {
            t = other.t;
            err = other.err;
        }

        public Unmanaged ToUnmanaged()
        {
            var marshaller = new Marshaller(this);
            try { return marshaller.ToUnmanaged(); }
            finally { marshaller.Free(); }
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public IntPtr t;
            public Error err;

            public ResultConstPtrServiceResultError ToManaged()
            {
                var marshaller = new Marshaller(this);
                try { return marshaller.ToManaged(); }
                finally { marshaller.Free(); }
            }
        }

        [CustomMarshaller(typeof(ResultConstPtrServiceResultError), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private ResultConstPtrServiceResultError _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(ResultConstPtrServiceResultError managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(ResultConstPtrServiceResultError managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                _unmanaged.t = _managed.t;
                _unmanaged.err = _managed.err;

                return _unmanaged;
            }

            public unsafe ResultConstPtrServiceResultError ToManaged()
            {
                _managed = new ResultConstPtrServiceResultError();

                _managed.t = _unmanaged.t;
                _managed.err = _unmanaged.err;

                return _managed;
            }
            public void Free() { }
        }
    }

    public partial struct ResultConstPtrServiceResultError
    {
        public IntPtr Ok()
        {
            if (err == Error.Ok)
            {
                return t;
            }
            throw new InteropException<Error>(err);
        }

        public bool IsOk() { return err == Error.Ok; }
        public Error Err() { return err; }

    }


    ///Result that contains value or an error.
    public partial struct ResultConstPtrServiceStringsError
    {
        ///Element if err is `Ok`.
        IntPtr t;
        ///Error value.
        Error err;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct ResultConstPtrServiceStringsError
    {
        public ResultConstPtrServiceStringsError(ResultConstPtrServiceStringsError other)
        {
            t = other.t;
            err = other.err;
        }

        public Unmanaged ToUnmanaged()
        {
            var marshaller = new Marshaller(this);
            try { return marshaller.ToUnmanaged(); }
            finally { marshaller.Free(); }
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public IntPtr t;
            public Error err;

            public ResultConstPtrServiceStringsError ToManaged()
            {
                var marshaller = new Marshaller(this);
                try { return marshaller.ToManaged(); }
                finally { marshaller.Free(); }
            }
        }

        [CustomMarshaller(typeof(ResultConstPtrServiceStringsError), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private ResultConstPtrServiceStringsError _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(ResultConstPtrServiceStringsError managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(ResultConstPtrServiceStringsError managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                _unmanaged.t = _managed.t;
                _unmanaged.err = _managed.err;

                return _unmanaged;
            }

            public unsafe ResultConstPtrServiceStringsError ToManaged()
            {
                _managed = new ResultConstPtrServiceStringsError();

                _managed.t = _unmanaged.t;
                _managed.err = _unmanaged.err;

                return _managed;
            }
            public void Free() { }
        }
    }

    public partial struct ResultConstPtrServiceStringsError
    {
        public IntPtr Ok()
        {
            if (err == Error.Ok)
            {
                return t;
            }
            throw new InteropException<Error>(err);
        }

        public bool IsOk() { return err == Error.Ok; }
        public Error Err() { return err; }

    }


    ///Result that contains value or an error.
    public partial struct ResultConstPtrServiceVariousSlicesError
    {
        ///Element if err is `Ok`.
        IntPtr t;
        ///Error value.
        Error err;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct ResultConstPtrServiceVariousSlicesError
    {
        public ResultConstPtrServiceVariousSlicesError(ResultConstPtrServiceVariousSlicesError other)
        {
            t = other.t;
            err = other.err;
        }

        public Unmanaged ToUnmanaged()
        {
            var marshaller = new Marshaller(this);
            try { return marshaller.ToUnmanaged(); }
            finally { marshaller.Free(); }
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public IntPtr t;
            public Error err;

            public ResultConstPtrServiceVariousSlicesError ToManaged()
            {
                var marshaller = new Marshaller(this);
                try { return marshaller.ToManaged(); }
                finally { marshaller.Free(); }
            }
        }

        [CustomMarshaller(typeof(ResultConstPtrServiceVariousSlicesError), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private ResultConstPtrServiceVariousSlicesError _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(ResultConstPtrServiceVariousSlicesError managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(ResultConstPtrServiceVariousSlicesError managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                _unmanaged.t = _managed.t;
                _unmanaged.err = _managed.err;

                return _unmanaged;
            }

            public unsafe ResultConstPtrServiceVariousSlicesError ToManaged()
            {
                _managed = new ResultConstPtrServiceVariousSlicesError();

                _managed.t = _unmanaged.t;
                _managed.err = _unmanaged.err;

                return _managed;
            }
            public void Free() { }
        }
    }

    public partial struct ResultConstPtrServiceVariousSlicesError
    {
        public IntPtr Ok()
        {
            if (err == Error.Ok)
            {
                return t;
            }
            throw new InteropException<Error>(err);
        }

        public bool IsOk() { return err == Error.Ok; }
        public Error Err() { return err; }

    }


    ///Result that contains value or an error.
    public partial struct ResultNestedArrayError
    {
        ///Element if err is `Ok`.
        NestedArray t;
        ///Error value.
        Error err;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct ResultNestedArrayError
    {
        public ResultNestedArrayError(ResultNestedArrayError other)
        {
            t = other.t;
            err = other.err;
        }

        public Unmanaged ToUnmanaged()
        {
            var marshaller = new Marshaller(this);
            try { return marshaller.ToUnmanaged(); }
            finally { marshaller.Free(); }
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public NestedArray.Unmanaged t;
            public Error err;

            public ResultNestedArrayError ToManaged()
            {
                var marshaller = new Marshaller(this);
                try { return marshaller.ToManaged(); }
                finally { marshaller.Free(); }
            }
        }

        [CustomMarshaller(typeof(ResultNestedArrayError), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private ResultNestedArrayError _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(ResultNestedArrayError managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(ResultNestedArrayError managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                var _t = new NestedArray.Marshaller(_managed.t);
                _unmanaged.t = _t.ToUnmanaged();
                _unmanaged.err = _managed.err;

                return _unmanaged;
            }

            public unsafe ResultNestedArrayError ToManaged()
            {
                _managed = new ResultNestedArrayError();

                var _t = new NestedArray.Marshaller(_unmanaged.t);
                _managed.t = _t.ToManaged();
                _managed.err = _unmanaged.err;

                return _managed;
            }
            public void Free() { }
        }
    }

    public partial struct ResultNestedArrayError
    {
        public NestedArray Ok()
        {
            if (err == Error.Ok)
            {
                return t;
            }
            throw new InteropException<Error>(err);
        }

        public bool IsOk() { return err == Error.Ok; }
        public Error Err() { return err; }

    }


    ///Result that contains value or an error.
    public partial struct ResultU32Error
    {
        ///Element if err is `Ok`.
        uint t;
        ///Error value.
        Error err;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct ResultU32Error
    {
        public ResultU32Error(ResultU32Error other)
        {
            t = other.t;
            err = other.err;
        }

        public Unmanaged ToUnmanaged()
        {
            var marshaller = new Marshaller(this);
            try { return marshaller.ToUnmanaged(); }
            finally { marshaller.Free(); }
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public uint t;
            public Error err;

            public ResultU32Error ToManaged()
            {
                var marshaller = new Marshaller(this);
                try { return marshaller.ToManaged(); }
                finally { marshaller.Free(); }
            }
        }

        [CustomMarshaller(typeof(ResultU32Error), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private ResultU32Error _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(ResultU32Error managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(ResultU32Error managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                _unmanaged.t = _managed.t;
                _unmanaged.err = _managed.err;

                return _unmanaged;
            }

            public unsafe ResultU32Error ToManaged()
            {
                _managed = new ResultU32Error();

                _managed.t = _unmanaged.t;
                _managed.err = _unmanaged.err;

                return _managed;
            }
            public void Free() { }
        }
    }

    public partial struct ResultU32Error
    {
        public uint Ok()
        {
            if (err == Error.Ok)
            {
                return t;
            }
            throw new InteropException<Error>(err);
        }

        public bool IsOk() { return err == Error.Ok; }
        public Error Err() { return err; }

    }


    ///Result that contains value or an error.
    public partial struct ResultU64Error
    {
        ///Element if err is `Ok`.
        ulong t;
        ///Error value.
        Error err;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct ResultU64Error
    {
        public ResultU64Error(ResultU64Error other)
        {
            t = other.t;
            err = other.err;
        }

        public Unmanaged ToUnmanaged()
        {
            var marshaller = new Marshaller(this);
            try { return marshaller.ToUnmanaged(); }
            finally { marshaller.Free(); }
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public ulong t;
            public Error err;

            public ResultU64Error ToManaged()
            {
                var marshaller = new Marshaller(this);
                try { return marshaller.ToManaged(); }
                finally { marshaller.Free(); }
            }
        }

        [CustomMarshaller(typeof(ResultU64Error), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private ResultU64Error _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(ResultU64Error managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(ResultU64Error managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                _unmanaged.t = _managed.t;
                _unmanaged.err = _managed.err;

                return _unmanaged;
            }

            public unsafe ResultU64Error ToManaged()
            {
                _managed = new ResultU64Error();

                _managed.t = _unmanaged.t;
                _managed.err = _unmanaged.err;

                return _managed;
            }
            public void Free() { }
        }
    }

    public partial struct ResultU64Error
    {
        public ulong Ok()
        {
            if (err == Error.Ok)
            {
                return t;
            }
            throw new InteropException<Error>(err);
        }

        public bool IsOk() { return err == Error.Ok; }
        public Error Err() { return err; }

    }


    ///Result that contains value or an error.
    public partial struct ResultUseStringError
    {
        ///Element if err is `Ok`.
        UseString t;
        ///Error value.
        Error err;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct ResultUseStringError
    {
        public ResultUseStringError(ResultUseStringError other)
        {
            t = other.t;
            err = other.err;
        }

        public Unmanaged ToUnmanaged()
        {
            var marshaller = new Marshaller(this);
            try { return marshaller.ToUnmanaged(); }
            finally { marshaller.Free(); }
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public UseString.Unmanaged t;
            public Error err;

            public ResultUseStringError ToManaged()
            {
                var marshaller = new Marshaller(this);
                try { return marshaller.ToManaged(); }
                finally { marshaller.Free(); }
            }
        }

        [CustomMarshaller(typeof(ResultUseStringError), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private ResultUseStringError _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(ResultUseStringError managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(ResultUseStringError managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                var _t = new UseString.Marshaller(_managed.t);
                _unmanaged.t = _t.ToUnmanaged();
                _unmanaged.err = _managed.err;

                return _unmanaged;
            }

            public unsafe ResultUseStringError ToManaged()
            {
                _managed = new ResultUseStringError();

                var _t = new UseString.Marshaller(_unmanaged.t);
                _managed.t = _t.ToManaged();
                _managed.err = _unmanaged.err;

                return _managed;
            }
            public void Free() { }
        }
    }

    public partial struct ResultUseStringError
    {
        public UseString Ok()
        {
            if (err == Error.Ok)
            {
                return t;
            }
            throw new InteropException<Error>(err);
        }

        public bool IsOk() { return err == Error.Ok; }
        public Error Err() { return err; }

    }


    ///Result that contains value or an error.
    public partial struct ResultUtf8StringError
    {
        ///Element if err is `Ok`.
        string t;
        ///Error value.
        Error err;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct ResultUtf8StringError
    {
        public ResultUtf8StringError(ResultUtf8StringError other)
        {
            t = other.t;
            err = other.err;
        }

        public Unmanaged ToUnmanaged()
        {
            var marshaller = new Marshaller(this);
            try { return marshaller.ToUnmanaged(); }
            finally { marshaller.Free(); }
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public Utf8String.Unmanaged t;
            public Error err;

            public ResultUtf8StringError ToManaged()
            {
                var marshaller = new Marshaller(this);
                try { return marshaller.ToManaged(); }
                finally { marshaller.Free(); }
            }
        }

        [CustomMarshaller(typeof(ResultUtf8StringError), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private ResultUtf8StringError _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(ResultUtf8StringError managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(ResultUtf8StringError managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                var _t = new Utf8String.Marshaller(new Utf8String(_managed.t));
                _unmanaged.t = _t.ToUnmanaged();
                _unmanaged.err = _managed.err;

                return _unmanaged;
            }

            public unsafe ResultUtf8StringError ToManaged()
            {
                _managed = new ResultUtf8StringError();

                var _t = new Utf8String.Marshaller(_unmanaged.t);
                _managed.t = _t.ToManaged().String;
                _managed.err = _unmanaged.err;

                return _managed;
            }
            public void Free() { }
        }
    }

    public partial struct ResultUtf8StringError
    {
        public string Ok()
        {
            if (err == Error.Ok)
            {
                return t;
            }
            throw new InteropException<Error>(err);
        }

        public bool IsOk() { return err == Error.Ok; }
        public Error Err() { return err; }

    }


    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct Bool
    {
        byte value;
    }

    public partial struct Bool
    {
        public static readonly Bool True = new Bool { value =  1 };
        public static readonly Bool False = new Bool { value =  0 };
        public Bool(bool b)
        {
            value = (byte) (b ? 1 : 0);
        }
        public bool Is => value == 1;
    }


    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void CallbackCharArray2Native(CharArray.Unmanaged value, IntPtr callback_data); // 'True' native callback signature
    public delegate void CallbackCharArray2Delegate(CharArray value); // Our C# signature

    public partial class CallbackCharArray2
    {
        private CallbackCharArray2Delegate _managed; // C# callback
        private CallbackCharArray2Native _native; // Native callback 
        private IntPtr _ptr; // Raw function pointer of native callback
        private Exception _exception; // Set if the callback encountered an Exception
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class CallbackCharArray2 : IDisposable
    {

        public CallbackCharArray2() { }

        public CallbackCharArray2(CallbackCharArray2Delegate managed)
        {
            _managed = managed;
            _native = CallTrampoline;
            _ptr = Marshal.GetFunctionPointerForDelegate(_native);
        }

        // Helper to invoke managed code from the native invocation.
        private void CallTrampoline(CharArray.Unmanaged value, IntPtr callback_data)
        {
            // We ignore the last parameter, a generic callback pointer, as it's not needed in C#.
            try
            {
                _managed(value.ToManaged());
            }
            catch (Exception e)
            {
                _exception = e;
                return;
            }
        }

        // Invokes the callback.
        public void Call(CharArray value)
        {
            var __target = Marshal.GetDelegateForFunctionPointer<CallbackCharArray2Native>(_ptr);
            // TODO
            // __target(value.ToManaged());
            return;
        }

        public void Dispose()
        {
            // This means when the callback was invoked from Rust C# had an exception which
            // we caught (otherwise C# might not re-enter Rust, and we leak memory). Now is
            // the time to rethrow it.
            if (_exception != null) throw _exception;
        }

        [CustomMarshaller(typeof(CallbackCharArray2), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta {  }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            internal IntPtr Callback;
            internal IntPtr Data;
        }

        public ref struct Marshaller
        {
            private CallbackCharArray2 _managed;
            private Unmanaged _unmanaged;

            public Marshaller(CallbackCharArray2 managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(CallbackCharArray2 managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public Unmanaged ToUnmanaged()
            {
                _unmanaged = new Unmanaged();
                _unmanaged.Callback = _managed?._ptr ?? IntPtr.Zero;
                _unmanaged.Data = IntPtr.Zero;
                return _unmanaged;
            }

            public CallbackCharArray2 ToManaged()
            {
                _managed = new CallbackCharArray2();
                _managed._ptr = _unmanaged.Callback;
                return _managed;
            }

            public void Free() { }
        }
    }


    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate byte CallbackFFISliceNative(SliceU8.Unmanaged slice, IntPtr callback_data); // 'True' native callback signature
    public delegate byte CallbackFFISliceDelegate(SliceU8 slice); // Our C# signature

    public partial class CallbackFFISlice
    {
        private CallbackFFISliceDelegate _managed; // C# callback
        private CallbackFFISliceNative _native; // Native callback 
        private IntPtr _ptr; // Raw function pointer of native callback
        private Exception _exception; // Set if the callback encountered an Exception
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class CallbackFFISlice : IDisposable
    {

        public CallbackFFISlice() { }

        public CallbackFFISlice(CallbackFFISliceDelegate managed)
        {
            _managed = managed;
            _native = CallTrampoline;
            _ptr = Marshal.GetFunctionPointerForDelegate(_native);
        }

        // Helper to invoke managed code from the native invocation.
        private byte CallTrampoline(SliceU8.Unmanaged slice, IntPtr callback_data)
        {
            // We ignore the last parameter, a generic callback pointer, as it's not needed in C#.
            try
            {
                return _managed(slice.ToManaged());
            }
            catch (Exception e)
            {
                _exception = e;
                return default;
            }
        }

        // Invokes the callback.
        public byte Call(SliceU8 slice)
        {
            var __target = Marshal.GetDelegateForFunctionPointer<CallbackFFISliceNative>(_ptr);
            // TODO
            // return __target(slice.ToManaged());
            return default;
        }

        public void Dispose()
        {
            // This means when the callback was invoked from Rust C# had an exception which
            // we caught (otherwise C# might not re-enter Rust, and we leak memory). Now is
            // the time to rethrow it.
            if (_exception != null) throw _exception;
        }

        [CustomMarshaller(typeof(CallbackFFISlice), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta {  }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            internal IntPtr Callback;
            internal IntPtr Data;
        }

        public ref struct Marshaller
        {
            private CallbackFFISlice _managed;
            private Unmanaged _unmanaged;

            public Marshaller(CallbackFFISlice managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(CallbackFFISlice managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public Unmanaged ToUnmanaged()
            {
                _unmanaged = new Unmanaged();
                _unmanaged.Callback = _managed?._ptr ?? IntPtr.Zero;
                _unmanaged.Data = IntPtr.Zero;
                return _unmanaged;
            }

            public CallbackFFISlice ToManaged()
            {
                _managed = new CallbackFFISlice();
                _managed._ptr = _unmanaged.Callback;
                return _managed;
            }

            public void Free() { }
        }
    }


    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate Vec3f32.Unmanaged CallbackHugeVecSliceNative(SliceVec3f32.Unmanaged slice, IntPtr callback_data); // 'True' native callback signature
    public delegate Vec3f32 CallbackHugeVecSliceDelegate(SliceVec3f32 slice); // Our C# signature

    public partial class CallbackHugeVecSlice
    {
        private CallbackHugeVecSliceDelegate _managed; // C# callback
        private CallbackHugeVecSliceNative _native; // Native callback 
        private IntPtr _ptr; // Raw function pointer of native callback
        private Exception _exception; // Set if the callback encountered an Exception
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class CallbackHugeVecSlice : IDisposable
    {

        public CallbackHugeVecSlice() { }

        public CallbackHugeVecSlice(CallbackHugeVecSliceDelegate managed)
        {
            _managed = managed;
            _native = CallTrampoline;
            _ptr = Marshal.GetFunctionPointerForDelegate(_native);
        }

        // Helper to invoke managed code from the native invocation.
        private Vec3f32.Unmanaged CallTrampoline(SliceVec3f32.Unmanaged slice, IntPtr callback_data)
        {
            // We ignore the last parameter, a generic callback pointer, as it's not needed in C#.
            try
            {
                return _managed(slice.ToManaged()).ToUnmanaged();
            }
            catch (Exception e)
            {
                _exception = e;
                return default;
            }
        }

        // Invokes the callback.
        public Vec3f32 Call(SliceVec3f32 slice)
        {
            var __target = Marshal.GetDelegateForFunctionPointer<CallbackHugeVecSliceNative>(_ptr);
            // TODO
            // return __target(slice.ToManaged());
            return default;
        }

        public void Dispose()
        {
            // This means when the callback was invoked from Rust C# had an exception which
            // we caught (otherwise C# might not re-enter Rust, and we leak memory). Now is
            // the time to rethrow it.
            if (_exception != null) throw _exception;
        }

        [CustomMarshaller(typeof(CallbackHugeVecSlice), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta {  }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            internal IntPtr Callback;
            internal IntPtr Data;
        }

        public ref struct Marshaller
        {
            private CallbackHugeVecSlice _managed;
            private Unmanaged _unmanaged;

            public Marshaller(CallbackHugeVecSlice managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(CallbackHugeVecSlice managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public Unmanaged ToUnmanaged()
            {
                _unmanaged = new Unmanaged();
                _unmanaged.Callback = _managed?._ptr ?? IntPtr.Zero;
                _unmanaged.Data = IntPtr.Zero;
                return _unmanaged;
            }

            public CallbackHugeVecSlice ToManaged()
            {
                _managed = new CallbackHugeVecSlice();
                _managed._ptr = _unmanaged.Callback;
                return _managed;
            }

            public void Free() { }
        }
    }


    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void CallbackSliceMutNative(SliceMutU8.Unmanaged slice, IntPtr callback_data); // 'True' native callback signature
    public delegate void CallbackSliceMutDelegate(SliceMutU8 slice); // Our C# signature

    public partial class CallbackSliceMut
    {
        private CallbackSliceMutDelegate _managed; // C# callback
        private CallbackSliceMutNative _native; // Native callback 
        private IntPtr _ptr; // Raw function pointer of native callback
        private Exception _exception; // Set if the callback encountered an Exception
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class CallbackSliceMut : IDisposable
    {

        public CallbackSliceMut() { }

        public CallbackSliceMut(CallbackSliceMutDelegate managed)
        {
            _managed = managed;
            _native = CallTrampoline;
            _ptr = Marshal.GetFunctionPointerForDelegate(_native);
        }

        // Helper to invoke managed code from the native invocation.
        private void CallTrampoline(SliceMutU8.Unmanaged slice, IntPtr callback_data)
        {
            // We ignore the last parameter, a generic callback pointer, as it's not needed in C#.
            try
            {
                _managed(slice.ToManaged());
            }
            catch (Exception e)
            {
                _exception = e;
                return;
            }
        }

        // Invokes the callback.
        public void Call(SliceMutU8 slice)
        {
            var __target = Marshal.GetDelegateForFunctionPointer<CallbackSliceMutNative>(_ptr);
            // TODO
            // __target(slice.ToManaged());
            return;
        }

        public void Dispose()
        {
            // This means when the callback was invoked from Rust C# had an exception which
            // we caught (otherwise C# might not re-enter Rust, and we leak memory). Now is
            // the time to rethrow it.
            if (_exception != null) throw _exception;
        }

        [CustomMarshaller(typeof(CallbackSliceMut), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta {  }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            internal IntPtr Callback;
            internal IntPtr Data;
        }

        public ref struct Marshaller
        {
            private CallbackSliceMut _managed;
            private Unmanaged _unmanaged;

            public Marshaller(CallbackSliceMut managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(CallbackSliceMut managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public Unmanaged ToUnmanaged()
            {
                _unmanaged = new Unmanaged();
                _unmanaged.Callback = _managed?._ptr ?? IntPtr.Zero;
                _unmanaged.Data = IntPtr.Zero;
                return _unmanaged;
            }

            public CallbackSliceMut ToManaged()
            {
                _managed = new CallbackSliceMut();
                _managed._ptr = _unmanaged.Callback;
                return _managed;
            }

            public void Free() { }
        }
    }


    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate byte CallbackU8Native(byte value, IntPtr callback_data); // 'True' native callback signature
    public delegate byte CallbackU8Delegate(byte value); // Our C# signature

    public partial class CallbackU8
    {
        private CallbackU8Delegate _managed; // C# callback
        private CallbackU8Native _native; // Native callback 
        private IntPtr _ptr; // Raw function pointer of native callback
        private Exception _exception; // Set if the callback encountered an Exception
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class CallbackU8 : IDisposable
    {

        public CallbackU8() { }

        public CallbackU8(CallbackU8Delegate managed)
        {
            _managed = managed;
            _native = CallTrampoline;
            _ptr = Marshal.GetFunctionPointerForDelegate(_native);
        }

        // Helper to invoke managed code from the native invocation.
        private byte CallTrampoline(byte value, IntPtr callback_data)
        {
            // We ignore the last parameter, a generic callback pointer, as it's not needed in C#.
            try
            {
                return _managed(value);
            }
            catch (Exception e)
            {
                _exception = e;
                return default;
            }
        }

        // Invokes the callback.
        public byte Call(byte value)
        {
            var __target = Marshal.GetDelegateForFunctionPointer<CallbackU8Native>(_ptr);
            // TODO
            // return __target(value);
            return default;
        }

        public void Dispose()
        {
            // This means when the callback was invoked from Rust C# had an exception which
            // we caught (otherwise C# might not re-enter Rust, and we leak memory). Now is
            // the time to rethrow it.
            if (_exception != null) throw _exception;
        }

        [CustomMarshaller(typeof(CallbackU8), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta {  }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            internal IntPtr Callback;
            internal IntPtr Data;
        }

        public ref struct Marshaller
        {
            private CallbackU8 _managed;
            private Unmanaged _unmanaged;

            public Marshaller(CallbackU8 managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(CallbackU8 managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public Unmanaged ToUnmanaged()
            {
                _unmanaged = new Unmanaged();
                _unmanaged.Callback = _managed?._ptr ?? IntPtr.Zero;
                _unmanaged.Data = IntPtr.Zero;
                return _unmanaged;
            }

            public CallbackU8 ToManaged()
            {
                _managed = new CallbackU8();
                _managed._ptr = _unmanaged.Callback;
                return _managed;
            }

            public void Free() { }
        }
    }


    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate uint MyCallbackNative(uint value, IntPtr callback_data); // 'True' native callback signature
    public delegate uint MyCallbackDelegate(uint value); // Our C# signature

    public partial class MyCallback
    {
        private MyCallbackDelegate _managed; // C# callback
        private MyCallbackNative _native; // Native callback 
        private IntPtr _ptr; // Raw function pointer of native callback
        private Exception _exception; // Set if the callback encountered an Exception
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class MyCallback : IDisposable
    {

        public MyCallback() { }

        public MyCallback(MyCallbackDelegate managed)
        {
            _managed = managed;
            _native = CallTrampoline;
            _ptr = Marshal.GetFunctionPointerForDelegate(_native);
        }

        // Helper to invoke managed code from the native invocation.
        private uint CallTrampoline(uint value, IntPtr callback_data)
        {
            // We ignore the last parameter, a generic callback pointer, as it's not needed in C#.
            try
            {
                return _managed(value);
            }
            catch (Exception e)
            {
                _exception = e;
                return default;
            }
        }

        // Invokes the callback.
        public uint Call(uint value)
        {
            var __target = Marshal.GetDelegateForFunctionPointer<MyCallbackNative>(_ptr);
            // TODO
            // return __target(value);
            return default;
        }

        public void Dispose()
        {
            // This means when the callback was invoked from Rust C# had an exception which
            // we caught (otherwise C# might not re-enter Rust, and we leak memory). Now is
            // the time to rethrow it.
            if (_exception != null) throw _exception;
        }

        [CustomMarshaller(typeof(MyCallback), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta {  }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            internal IntPtr Callback;
            internal IntPtr Data;
        }

        public ref struct Marshaller
        {
            private MyCallback _managed;
            private Unmanaged _unmanaged;

            public Marshaller(MyCallback managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(MyCallback managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public Unmanaged ToUnmanaged()
            {
                _unmanaged = new Unmanaged();
                _unmanaged.Callback = _managed?._ptr ?? IntPtr.Zero;
                _unmanaged.Data = IntPtr.Zero;
                return _unmanaged;
            }

            public MyCallback ToManaged()
            {
                _managed = new MyCallback();
                _managed._ptr = _unmanaged.Callback;
                return _managed;
            }

            public void Free() { }
        }
    }


    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void MyCallbackContextualNative(IntPtr context, uint value, IntPtr callback_data); // 'True' native callback signature
    public delegate void MyCallbackContextualDelegate(IntPtr context, uint value); // Our C# signature

    public partial class MyCallbackContextual
    {
        private MyCallbackContextualDelegate _managed; // C# callback
        private MyCallbackContextualNative _native; // Native callback 
        private IntPtr _ptr; // Raw function pointer of native callback
        private Exception _exception; // Set if the callback encountered an Exception
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class MyCallbackContextual : IDisposable
    {

        public MyCallbackContextual() { }

        public MyCallbackContextual(MyCallbackContextualDelegate managed)
        {
            _managed = managed;
            _native = CallTrampoline;
            _ptr = Marshal.GetFunctionPointerForDelegate(_native);
        }

        // Helper to invoke managed code from the native invocation.
        private void CallTrampoline(IntPtr context, uint value, IntPtr callback_data)
        {
            // We ignore the last parameter, a generic callback pointer, as it's not needed in C#.
            try
            {
                _managed(context, value);
            }
            catch (Exception e)
            {
                _exception = e;
                return;
            }
        }

        // Invokes the callback.
        public void Call(IntPtr context, uint value)
        {
            var __target = Marshal.GetDelegateForFunctionPointer<MyCallbackContextualNative>(_ptr);
            // TODO
            // __target(context, value);
            return;
        }

        public void Dispose()
        {
            // This means when the callback was invoked from Rust C# had an exception which
            // we caught (otherwise C# might not re-enter Rust, and we leak memory). Now is
            // the time to rethrow it.
            if (_exception != null) throw _exception;
        }

        [CustomMarshaller(typeof(MyCallbackContextual), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta {  }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            internal IntPtr Callback;
            internal IntPtr Data;
        }

        public ref struct Marshaller
        {
            private MyCallbackContextual _managed;
            private Unmanaged _unmanaged;

            public Marshaller(MyCallbackContextual managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(MyCallbackContextual managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public Unmanaged ToUnmanaged()
            {
                _unmanaged = new Unmanaged();
                _unmanaged.Callback = _managed?._ptr ?? IntPtr.Zero;
                _unmanaged.Data = IntPtr.Zero;
                return _unmanaged;
            }

            public MyCallbackContextual ToManaged()
            {
                _managed = new MyCallbackContextual();
                _managed._ptr = _unmanaged.Callback;
                return _managed;
            }

            public void Free() { }
        }
    }


    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void MyCallbackVoidNative(IntPtr ptr, IntPtr callback_data); // 'True' native callback signature
    public delegate void MyCallbackVoidDelegate(IntPtr ptr); // Our C# signature

    public partial class MyCallbackVoid
    {
        private MyCallbackVoidDelegate _managed; // C# callback
        private MyCallbackVoidNative _native; // Native callback 
        private IntPtr _ptr; // Raw function pointer of native callback
        private Exception _exception; // Set if the callback encountered an Exception
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class MyCallbackVoid : IDisposable
    {

        public MyCallbackVoid() { }

        public MyCallbackVoid(MyCallbackVoidDelegate managed)
        {
            _managed = managed;
            _native = CallTrampoline;
            _ptr = Marshal.GetFunctionPointerForDelegate(_native);
        }

        // Helper to invoke managed code from the native invocation.
        private void CallTrampoline(IntPtr ptr, IntPtr callback_data)
        {
            // We ignore the last parameter, a generic callback pointer, as it's not needed in C#.
            try
            {
                _managed(ptr);
            }
            catch (Exception e)
            {
                _exception = e;
                return;
            }
        }

        // Invokes the callback.
        public void Call(IntPtr ptr)
        {
            var __target = Marshal.GetDelegateForFunctionPointer<MyCallbackVoidNative>(_ptr);
            // TODO
            // __target(ptr);
            return;
        }

        public void Dispose()
        {
            // This means when the callback was invoked from Rust C# had an exception which
            // we caught (otherwise C# might not re-enter Rust, and we leak memory). Now is
            // the time to rethrow it.
            if (_exception != null) throw _exception;
        }

        [CustomMarshaller(typeof(MyCallbackVoid), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta {  }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            internal IntPtr Callback;
            internal IntPtr Data;
        }

        public ref struct Marshaller
        {
            private MyCallbackVoid _managed;
            private Unmanaged _unmanaged;

            public Marshaller(MyCallbackVoid managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(MyCallbackVoid managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public Unmanaged ToUnmanaged()
            {
                _unmanaged = new Unmanaged();
                _unmanaged.Callback = _managed?._ptr ?? IntPtr.Zero;
                _unmanaged.Data = IntPtr.Zero;
                return _unmanaged;
            }

            public MyCallbackVoid ToManaged()
            {
                _managed = new MyCallbackVoid();
                _managed._ptr = _unmanaged.Callback;
                return _managed;
            }

            public void Free() { }
        }
    }


    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void NestedStringCallbackNative(UseString.Unmanaged s, IntPtr callback_data); // 'True' native callback signature
    public delegate void NestedStringCallbackDelegate(UseString s); // Our C# signature

    public partial class NestedStringCallback
    {
        private NestedStringCallbackDelegate _managed; // C# callback
        private NestedStringCallbackNative _native; // Native callback 
        private IntPtr _ptr; // Raw function pointer of native callback
        private Exception _exception; // Set if the callback encountered an Exception
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class NestedStringCallback : IDisposable
    {

        public NestedStringCallback() { }

        public NestedStringCallback(NestedStringCallbackDelegate managed)
        {
            _managed = managed;
            _native = CallTrampoline;
            _ptr = Marshal.GetFunctionPointerForDelegate(_native);
        }

        // Helper to invoke managed code from the native invocation.
        private void CallTrampoline(UseString.Unmanaged s, IntPtr callback_data)
        {
            // We ignore the last parameter, a generic callback pointer, as it's not needed in C#.
            try
            {
                _managed(s.ToManaged());
            }
            catch (Exception e)
            {
                _exception = e;
                return;
            }
        }

        // Invokes the callback.
        public void Call(UseString s)
        {
            var __target = Marshal.GetDelegateForFunctionPointer<NestedStringCallbackNative>(_ptr);
            // TODO
            // __target(s.ToManaged());
            return;
        }

        public void Dispose()
        {
            // This means when the callback was invoked from Rust C# had an exception which
            // we caught (otherwise C# might not re-enter Rust, and we leak memory). Now is
            // the time to rethrow it.
            if (_exception != null) throw _exception;
        }

        [CustomMarshaller(typeof(NestedStringCallback), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta {  }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            internal IntPtr Callback;
            internal IntPtr Data;
        }

        public ref struct Marshaller
        {
            private NestedStringCallback _managed;
            private Unmanaged _unmanaged;

            public Marshaller(NestedStringCallback managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(NestedStringCallback managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public Unmanaged ToUnmanaged()
            {
                _unmanaged = new Unmanaged();
                _unmanaged.Callback = _managed?._ptr ?? IntPtr.Zero;
                _unmanaged.Data = IntPtr.Zero;
                return _unmanaged;
            }

            public NestedStringCallback ToManaged()
            {
                _managed = new NestedStringCallback();
                _managed._ptr = _unmanaged.Callback;
                return _managed;
            }

            public void Free() { }
        }
    }


    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void StringCallbackNative(Utf8String.Unmanaged s, IntPtr callback_data); // 'True' native callback signature
    public delegate void StringCallbackDelegate(string s); // Our C# signature

    public partial class StringCallback
    {
        private StringCallbackDelegate _managed; // C# callback
        private StringCallbackNative _native; // Native callback 
        private IntPtr _ptr; // Raw function pointer of native callback
        private Exception _exception; // Set if the callback encountered an Exception
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class StringCallback : IDisposable
    {

        public StringCallback() { }

        public StringCallback(StringCallbackDelegate managed)
        {
            _managed = managed;
            _native = CallTrampoline;
            _ptr = Marshal.GetFunctionPointerForDelegate(_native);
        }

        // Helper to invoke managed code from the native invocation.
        private void CallTrampoline(Utf8String.Unmanaged s, IntPtr callback_data)
        {
            // We ignore the last parameter, a generic callback pointer, as it's not needed in C#.
            try
            {
                _managed(s.ToManaged());
            }
            catch (Exception e)
            {
                _exception = e;
                return;
            }
        }

        // Invokes the callback.
        public void Call(string s)
        {
            var __target = Marshal.GetDelegateForFunctionPointer<StringCallbackNative>(_ptr);
            // TODO
            // __target(s.ToManaged());
            return;
        }

        public void Dispose()
        {
            // This means when the callback was invoked from Rust C# had an exception which
            // we caught (otherwise C# might not re-enter Rust, and we leak memory). Now is
            // the time to rethrow it.
            if (_exception != null) throw _exception;
        }

        [CustomMarshaller(typeof(StringCallback), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta {  }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            internal IntPtr Callback;
            internal IntPtr Data;
        }

        public ref struct Marshaller
        {
            private StringCallback _managed;
            private Unmanaged _unmanaged;

            public Marshaller(StringCallback managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(StringCallback managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public Unmanaged ToUnmanaged()
            {
                _unmanaged = new Unmanaged();
                _unmanaged.Callback = _managed?._ptr ?? IntPtr.Zero;
                _unmanaged.Data = IntPtr.Zero;
                return _unmanaged;
            }

            public StringCallback ToManaged()
            {
                _managed = new StringCallback();
                _managed._ptr = _unmanaged.Callback;
                return _managed;
            }

            public void Free() { }
        }
    }


    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void SumDelegate1Native(IntPtr callback_data); // 'True' native callback signature
    public delegate void SumDelegate1Delegate(); // Our C# signature

    public partial class SumDelegate1
    {
        private SumDelegate1Delegate _managed; // C# callback
        private SumDelegate1Native _native; // Native callback 
        private IntPtr _ptr; // Raw function pointer of native callback
        private Exception _exception; // Set if the callback encountered an Exception
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class SumDelegate1 : IDisposable
    {

        public SumDelegate1() { }

        public SumDelegate1(SumDelegate1Delegate managed)
        {
            _managed = managed;
            _native = CallTrampoline;
            _ptr = Marshal.GetFunctionPointerForDelegate(_native);
        }

        // Helper to invoke managed code from the native invocation.
        private void CallTrampoline(IntPtr callback_data)
        {
            // We ignore the last parameter, a generic callback pointer, as it's not needed in C#.
            try
            {
                _managed();
            }
            catch (Exception e)
            {
                _exception = e;
                return;
            }
        }

        // Invokes the callback.
        public void Call()
        {
            var __target = Marshal.GetDelegateForFunctionPointer<SumDelegate1Native>(_ptr);
            // TODO
            // __target();
            return;
        }

        public void Dispose()
        {
            // This means when the callback was invoked from Rust C# had an exception which
            // we caught (otherwise C# might not re-enter Rust, and we leak memory). Now is
            // the time to rethrow it.
            if (_exception != null) throw _exception;
        }

        [CustomMarshaller(typeof(SumDelegate1), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta {  }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            internal IntPtr Callback;
            internal IntPtr Data;
        }

        public ref struct Marshaller
        {
            private SumDelegate1 _managed;
            private Unmanaged _unmanaged;

            public Marshaller(SumDelegate1 managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(SumDelegate1 managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public Unmanaged ToUnmanaged()
            {
                _unmanaged = new Unmanaged();
                _unmanaged.Callback = _managed?._ptr ?? IntPtr.Zero;
                _unmanaged.Data = IntPtr.Zero;
                return _unmanaged;
            }

            public SumDelegate1 ToManaged()
            {
                _managed = new SumDelegate1();
                _managed._ptr = _unmanaged.Callback;
                return _managed;
            }

            public void Free() { }
        }
    }


    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate int SumDelegate2Native(int x, int y, IntPtr callback_data); // 'True' native callback signature
    public delegate int SumDelegate2Delegate(int x, int y); // Our C# signature

    public partial class SumDelegate2
    {
        private SumDelegate2Delegate _managed; // C# callback
        private SumDelegate2Native _native; // Native callback 
        private IntPtr _ptr; // Raw function pointer of native callback
        private Exception _exception; // Set if the callback encountered an Exception
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class SumDelegate2 : IDisposable
    {

        public SumDelegate2() { }

        public SumDelegate2(SumDelegate2Delegate managed)
        {
            _managed = managed;
            _native = CallTrampoline;
            _ptr = Marshal.GetFunctionPointerForDelegate(_native);
        }

        // Helper to invoke managed code from the native invocation.
        private int CallTrampoline(int x, int y, IntPtr callback_data)
        {
            // We ignore the last parameter, a generic callback pointer, as it's not needed in C#.
            try
            {
                return _managed(x, y);
            }
            catch (Exception e)
            {
                _exception = e;
                return default;
            }
        }

        // Invokes the callback.
        public int Call(int x, int y)
        {
            var __target = Marshal.GetDelegateForFunctionPointer<SumDelegate2Native>(_ptr);
            // TODO
            // return __target(x, y);
            return default;
        }

        public void Dispose()
        {
            // This means when the callback was invoked from Rust C# had an exception which
            // we caught (otherwise C# might not re-enter Rust, and we leak memory). Now is
            // the time to rethrow it.
            if (_exception != null) throw _exception;
        }

        [CustomMarshaller(typeof(SumDelegate2), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta {  }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            internal IntPtr Callback;
            internal IntPtr Data;
        }

        public ref struct Marshaller
        {
            private SumDelegate2 _managed;
            private Unmanaged _unmanaged;

            public Marshaller(SumDelegate2 managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(SumDelegate2 managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public Unmanaged ToUnmanaged()
            {
                _unmanaged = new Unmanaged();
                _unmanaged.Callback = _managed?._ptr ?? IntPtr.Zero;
                _unmanaged.Data = IntPtr.Zero;
                return _unmanaged;
            }

            public SumDelegate2 ToManaged()
            {
                _managed = new SumDelegate2();
                _managed._ptr = _unmanaged.Callback;
                return _managed;
            }

            public void Free() { }
        }
    }


    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate ResultError SumDelegateReturnNative(int x, int y, IntPtr callback_data); // 'True' native callback signature
    public delegate ResultError SumDelegateReturnDelegate(int x, int y); // Our C# signature

    public partial class SumDelegateReturn
    {
        private SumDelegateReturnDelegate _managed; // C# callback
        private SumDelegateReturnNative _native; // Native callback 
        private IntPtr _ptr; // Raw function pointer of native callback
        private Exception _exception; // Set if the callback encountered an Exception
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class SumDelegateReturn : IDisposable
    {

        public SumDelegateReturn() { }

        public SumDelegateReturn(SumDelegateReturnDelegate managed)
        {
            _managed = managed;
            _native = CallTrampoline;
            _ptr = Marshal.GetFunctionPointerForDelegate(_native);
        }

        // Helper to invoke managed code from the native invocation.
        private ResultError CallTrampoline(int x, int y, IntPtr callback_data)
        {
            // We ignore the last parameter, a generic callback pointer, as it's not needed in C#.
            try
            {
                return _managed(x, y);
            }
            catch (Exception e)
            {
                _exception = e;
                return new ResultError(Error.Panic);
            }
        }

        // Invokes the callback.
        public ResultError Call(int x, int y)
        {
            var __target = Marshal.GetDelegateForFunctionPointer<SumDelegateReturnNative>(_ptr);
            // TODO
            // return __target(x, y);
            return new ResultError(Error.Panic);
        }

        public void Dispose()
        {
            // This means when the callback was invoked from Rust C# had an exception which
            // we caught (otherwise C# might not re-enter Rust, and we leak memory). Now is
            // the time to rethrow it.
            if (_exception != null) throw _exception;
        }

        [CustomMarshaller(typeof(SumDelegateReturn), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta {  }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            internal IntPtr Callback;
            internal IntPtr Data;
        }

        public ref struct Marshaller
        {
            private SumDelegateReturn _managed;
            private Unmanaged _unmanaged;

            public Marshaller(SumDelegateReturn managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(SumDelegateReturn managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public Unmanaged ToUnmanaged()
            {
                _unmanaged = new Unmanaged();
                _unmanaged.Callback = _managed?._ptr ?? IntPtr.Zero;
                _unmanaged.Data = IntPtr.Zero;
                return _unmanaged;
            }

            public SumDelegateReturn ToManaged()
            {
                _managed = new SumDelegateReturn();
                _managed._ptr = _unmanaged.Callback;
                return _managed;
            }

            public void Free() { }
        }
    }


    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void SumDelegateReturn2Native(int x, int y, IntPtr callback_data); // 'True' native callback signature
    public delegate void SumDelegateReturn2Delegate(int x, int y); // Our C# signature

    public partial class SumDelegateReturn2
    {
        private SumDelegateReturn2Delegate _managed; // C# callback
        private SumDelegateReturn2Native _native; // Native callback 
        private IntPtr _ptr; // Raw function pointer of native callback
        private Exception _exception; // Set if the callback encountered an Exception
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class SumDelegateReturn2 : IDisposable
    {

        public SumDelegateReturn2() { }

        public SumDelegateReturn2(SumDelegateReturn2Delegate managed)
        {
            _managed = managed;
            _native = CallTrampoline;
            _ptr = Marshal.GetFunctionPointerForDelegate(_native);
        }

        // Helper to invoke managed code from the native invocation.
        private void CallTrampoline(int x, int y, IntPtr callback_data)
        {
            // We ignore the last parameter, a generic callback pointer, as it's not needed in C#.
            try
            {
                _managed(x, y);
            }
            catch (Exception e)
            {
                _exception = e;
                return;
            }
        }

        // Invokes the callback.
        public void Call(int x, int y)
        {
            var __target = Marshal.GetDelegateForFunctionPointer<SumDelegateReturn2Native>(_ptr);
            // TODO
            // __target(x, y);
            return;
        }

        public void Dispose()
        {
            // This means when the callback was invoked from Rust C# had an exception which
            // we caught (otherwise C# might not re-enter Rust, and we leak memory). Now is
            // the time to rethrow it.
            if (_exception != null) throw _exception;
        }

        [CustomMarshaller(typeof(SumDelegateReturn2), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta {  }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            internal IntPtr Callback;
            internal IntPtr Data;
        }

        public ref struct Marshaller
        {
            private SumDelegateReturn2 _managed;
            private Unmanaged _unmanaged;

            public Marshaller(SumDelegateReturn2 managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(SumDelegateReturn2 managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public Unmanaged ToUnmanaged()
            {
                _unmanaged = new Unmanaged();
                _unmanaged.Callback = _managed?._ptr ?? IntPtr.Zero;
                _unmanaged.Data = IntPtr.Zero;
                return _unmanaged;
            }

            public SumDelegateReturn2 ToManaged()
            {
                _managed = new SumDelegateReturn2();
                _managed._ptr = _unmanaged.Callback;
                return _managed;
            }

            public void Free() { }
        }
    }



    public partial class ServiceAsync : IDisposable
    {
        private IntPtr _context;

        private ServiceAsync() {}

        public static ServiceAsync New()
        {
            var self = new ServiceAsync();
            self._context = Interop.service_async_new().Ok();
            return self;
        }

        public void Dispose()
        {
            Interop.service_async_destroy(_context).Ok();
        }

        public Task<ulong> ReturnAfterMs(ulong x, ulong ms)
        {
            return Interop.service_async_return_after_ms(_context, x, ms);
        }

        public Task<NestedArray> ProcessStruct(NestedArray x)
        {
            return Interop.service_async_process_struct(_context, x);
        }

        public Task<string> HandleString(string s)
        {
            return Interop.service_async_handle_string(_context, s);
        }

        public Task<UseString> HandleNestedString(string s)
        {
            return Interop.service_async_handle_nested_string(_context, s);
        }

        public Task Fail()
        {
            return Interop.service_async_fail(_context);
        }

        public void Bad()
        {
            Interop.service_async_bad(_context);
        }

        public IntPtr Context => _context;
    }


    public partial class ServiceBasic : IDisposable
    {
        private IntPtr _context;

        private ServiceBasic() {}

        public static ServiceBasic New()
        {
            var self = new ServiceBasic();
            self._context = Interop.service_basic_new().Ok();
            return self;
        }

        public void Dispose()
        {
            Interop.service_basic_destroy(_context).Ok();
        }

        public IntPtr Context => _context;
    }


    public partial class ServiceMain : IDisposable
    {
        private IntPtr _context;

        private ServiceMain() {}

        public static ServiceMain New(uint value)
        {
            var self = new ServiceMain();
            self._context = Interop.service_main_new(value).Ok();
            return self;
        }

        public void Dispose()
        {
            Interop.service_main_destroy(_context).Ok();
        }

        public IntPtr Context => _context;
    }


    public partial class ServiceDependent : IDisposable
    {
        private IntPtr _context;

        private ServiceDependent() {}

        public static ServiceDependent FromMain(IntPtr main)
        {
            var self = new ServiceDependent();
            self._context = Interop.service_dependent_from_main(main).Ok();
            return self;
        }

        public void Dispose()
        {
            Interop.service_dependent_destroy(_context).Ok();
        }

        public uint Get()
        {
            return Interop.service_dependent_get(_context);
        }

        public IntPtr Context => _context;
    }


    public partial class ServiceResult : IDisposable
    {
        private IntPtr _context;

        private ServiceResult() {}

        public static ServiceResult New()
        {
            var self = new ServiceResult();
            self._context = Interop.service_result_new().Ok();
            return self;
        }

        public void Dispose()
        {
            Interop.service_result_destroy(_context).Ok();
        }

        public void Test()
        {
            Interop.service_result_test(_context).Ok();
        }

        public IntPtr Context => _context;
    }


    /// Some struct we want to expose as a class.
    public partial class ServiceOnPanic : IDisposable
    {
        private IntPtr _context;

        private ServiceOnPanic() {}

        public static ServiceOnPanic New()
        {
            var self = new ServiceOnPanic();
            self._context = Interop.service_on_panic_new().Ok();
            return self;
        }

        public void Dispose()
        {
            Interop.service_on_panic_destroy(_context).Ok();
        }

        /// Methods returning a Result<(), _> are the default and do not
        /// need annotations.
        public void ReturnResult(uint anon1)
        {
            Interop.service_on_panic_return_result(_context, anon1).Ok();
        }

        /// Methods returning a value need an `on_panic` annotation.
        public uint ReturnDefaultValue(uint x)
        {
            return Interop.service_on_panic_return_default_value(_context, x);
        }

        /// This function has no panic safeguards. It will be a bit faster to
        /// call, but if it panics your host app will abort.
        public string ReturnUbOnPanic()
        {
            var s = Interop.service_on_panic_return_ub_on_panic(_context);
            return Marshal.PtrToStringAnsi(s);
        }

        public IntPtr Context => _context;
    }


    /// Some struct we want to expose as a class.
    public partial class ServiceCallbacks : IDisposable
    {
        private IntPtr _context;

        private ServiceCallbacks() {}

        public static ServiceCallbacks New()
        {
            var self = new ServiceCallbacks();
            self._context = Interop.service_callbacks_new().Ok();
            return self;
        }

        public void Dispose()
        {
            Interop.service_callbacks_destroy(_context).Ok();
        }

        public void CallbackSimple(MyCallback callback)
        {
            Interop.service_callbacks_callback_simple(_context, callback).Ok();
        }

        public ResultError CallbackSimple(MyCallbackDelegate callback)
        {
            return Interop.service_callbacks_callback_simple(_context, callback);
        }

        public void CallbackFfiReturn(SumDelegateReturn callback)
        {
            Interop.service_callbacks_callback_ffi_return(_context, callback).Ok();
        }

        public ResultError CallbackFfiReturn(SumDelegateReturnDelegate callback)
        {
            return Interop.service_callbacks_callback_ffi_return(_context, callback);
        }

        public void CallbackWithSlice(SumDelegateReturn callback, SliceI32 input)
        {
            Interop.service_callbacks_callback_with_slice(_context, callback, input).Ok();
        }

        public ResultError CallbackWithSlice(SumDelegateReturnDelegate callback, ReadOnlySpan<int> input)
        {
            return Interop.service_callbacks_callback_with_slice(_context, callback, input);
        }

        public void SetDelegateTable(CallbackTable table)
        {
            Interop.service_callbacks_set_delegate_table(_context, table);
        }

        public void InvokeDelegates()
        {
            Interop.service_callbacks_invoke_delegates(_context).Ok();
        }

        public IntPtr Context => _context;
    }


    public partial class ServiceIgnoringMethods : IDisposable
    {
        private IntPtr _context;

        private ServiceIgnoringMethods() {}

        public static ServiceIgnoringMethods New()
        {
            var self = new ServiceIgnoringMethods();
            self._context = Interop.service_ignoring_methods_new().Ok();
            return self;
        }

        public void Dispose()
        {
            Interop.service_ignoring_methods_destroy(_context).Ok();
        }

        public IntPtr Context => _context;
    }


    /// Some struct we want to expose as a class.
    public partial class ServiceMultipleCtors : IDisposable
    {
        private IntPtr _context;

        private ServiceMultipleCtors() {}

        public static ServiceMultipleCtors NewWith(uint some_value)
        {
            var self = new ServiceMultipleCtors();
            self._context = Interop.service_multiple_ctors_new_with(some_value).Ok();
            return self;
        }

        public static ServiceMultipleCtors NewWithout()
        {
            var self = new ServiceMultipleCtors();
            self._context = Interop.service_multiple_ctors_new_without().Ok();
            return self;
        }

        public static ServiceMultipleCtors NewWithString([MarshalAs(UnmanagedType.LPStr)] string anon0)
        {
            var self = new ServiceMultipleCtors();
            self._context = Interop.service_multiple_ctors_new_with_string(anon0).Ok();
            return self;
        }

        public static ServiceMultipleCtors NewFailing(byte some_value)
        {
            var self = new ServiceMultipleCtors();
            self._context = Interop.service_multiple_ctors_new_failing(some_value).Ok();
            return self;
        }

        public void Dispose()
        {
            Interop.service_multiple_ctors_destroy(_context).Ok();
        }

        public IntPtr Context => _context;
    }


    /// Some struct we want to expose as a class.
    public partial class ServiceVariousSlices : IDisposable
    {
        private IntPtr _context;

        private ServiceVariousSlices() {}

        public static ServiceVariousSlices New()
        {
            var self = new ServiceVariousSlices();
            self._context = Interop.service_various_slices_new().Ok();
            return self;
        }

        public void Dispose()
        {
            Interop.service_various_slices_destroy(_context).Ok();
        }

        public byte MutSelf(SliceU8 slice)
        {
            return Interop.service_various_slices_mut_self(_context, slice);
        }

        public byte MutSelf(ReadOnlySpan<byte> slice)
        {
            return Interop.service_various_slices_mut_self(_context, slice);
        }

        /// Single line.
        public void MutSelfVoid(SliceBool slice)
        {
            Interop.service_various_slices_mut_self_void(_context, slice);
        }

        /// Single line.
        public void MutSelfVoid(ReadOnlySpan<Bool> slice)
        {
            Interop.service_various_slices_mut_self_void(_context, slice);
        }

        public byte MutSelfRef(ref byte x, ref byte y)
        {
            return Interop.service_various_slices_mut_self_ref(_context, ref x, ref y);
        }

        public byte MutSelfRefSlice(ref byte x, ref byte y, SliceU8 slice)
        {
            return Interop.service_various_slices_mut_self_ref_slice(_context, ref x, ref y, slice);
        }

        public byte MutSelfRefSlice(ref byte x, ref byte y, ReadOnlySpan<byte> slice)
        {
            return Interop.service_various_slices_mut_self_ref_slice(_context, ref x, ref y, slice);
        }

        public byte MutSelfRefSliceLimited(ref byte x, ref byte y, SliceU8 slice, SliceU8 slice2)
        {
            return Interop.service_various_slices_mut_self_ref_slice_limited(_context, ref x, ref y, slice, slice2);
        }

        public byte MutSelfRefSliceLimited(ref byte x, ref byte y, ReadOnlySpan<byte> slice, ReadOnlySpan<byte> slice2)
        {
            return Interop.service_various_slices_mut_self_ref_slice_limited(_context, ref x, ref y, slice, slice2);
        }

        public void MutSelfFfiError(SliceMutU8 slice)
        {
            Interop.service_various_slices_mut_self_ffi_error(_context, slice).Ok();
        }

        public ResultError MutSelfFfiError(Span<byte> slice)
        {
            return Interop.service_various_slices_mut_self_ffi_error(_context, slice);
        }

        public void MutSelfNoError(SliceMutU8 slice)
        {
            Interop.service_various_slices_mut_self_no_error(_context, slice).Ok();
        }

        public ResultError MutSelfNoError(Span<byte> slice)
        {
            return Interop.service_various_slices_mut_self_no_error(_context, slice);
        }

        /// Warning, you _must_ discard the returned slice object before calling into this service
        /// again, as otherwise undefined behavior might happen.
        public SliceU32 ReturnSlice()
        {
            return Interop.service_various_slices_return_slice(_context);
        }

        /// Warning, you _must_ discard the returned slice object before calling into this service
        /// again, as otherwise undefined behavior might happen.
        public SliceMutU32 ReturnSliceMut()
        {
            return Interop.service_various_slices_return_slice_mut(_context);
        }

        public IntPtr Context => _context;
    }


    /// Some struct we want to expose as a class.
    public partial class ServiceStrings : IDisposable
    {
        private IntPtr _context;

        private ServiceStrings() {}

        public static ServiceStrings New()
        {
            var self = new ServiceStrings();
            self._context = Interop.service_strings_new().Ok();
            return self;
        }

        public void Dispose()
        {
            Interop.service_strings_destroy(_context).Ok();
        }

        public void PassString([MarshalAs(UnmanagedType.LPStr)] string anon1)
        {
            Interop.service_strings_pass_string(_context, anon1);
        }

        public string ReturnString()
        {
            var s = Interop.service_strings_return_string(_context);
            return Marshal.PtrToStringAnsi(s);
        }

        public IntPtr Context => _context;
    }



    public class InteropException<T> : Exception
    {
        public T Error { get; private set; }

        public InteropException(T error): base($"Something went wrong: {error}")
        {
            Error = error;
        }
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void AsyncHelperNative(IntPtr data, IntPtr callback_data);
    public delegate void AsyncHelperDelegate(IntPtr data);

    public partial struct AsyncHelper
    {
        private AsyncHelperDelegate _managed;
        private AsyncHelperNative _native;
        private IntPtr _ptr;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct AsyncHelper : IDisposable
    {
        public AsyncHelper() { }

        public AsyncHelper(AsyncHelperDelegate managed)
        {
            _managed = managed;
            _native = Call;
            _ptr = Marshal.GetFunctionPointerForDelegate(_native);
        }

        void Call(IntPtr data, IntPtr _)
        {
            _managed(data);
        }

        public void Dispose()
        {
            if (_ptr == IntPtr.Zero) return;
            Marshal.FreeHGlobal(_ptr);
            _ptr = IntPtr.Zero;
        }

        [CustomMarshaller(typeof(AsyncHelper), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            internal IntPtr Callback;
            internal IntPtr Data;
        }

        public ref struct Marshaller
        {
            private AsyncHelper _managed;
            private Unmanaged _unmanaged;

            public void FromManaged(AsyncHelper managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public Unmanaged ToUnmanaged()
            {
                _unmanaged = new Unmanaged();
                _unmanaged.Callback = _managed._ptr;
                _unmanaged.Data = IntPtr.Zero;
                return _unmanaged;
            }

            public AsyncHelper ToManaged()
            {
                _managed = new AsyncHelper();
                _managed._ptr = _unmanaged.Callback;
                return _managed;
            }

            public void Free() { }
        }
    }
    public partial struct Utf8String
    {
        string _s;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct Utf8String: IDisposable
    {
        public Utf8String(string s) { _s = s; }

        public string String => _s;

        public void Dispose() { }

        public Unmanaged ToUnmanaged()
        {
            var marshaller = new Marshaller(this);
            try { return marshaller.ToUnmanaged(); }
            finally { marshaller.Free(); }
        }

        /// A highly dangerous 'use once type' that has ownership semantics!
        /// Once passed over an FFI boundary 'the other side' is meant to own
        /// (and free) it. Rust handles that fine, but if in C# you put this
        /// in a struct and then call Rust multiple times with that struct
        /// you'll free the same pointer multiple times, and get UB!
        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public IntPtr ptr;
            public ulong len;
            public ulong capacity;

            public string ToManaged()
            {
                var marshaller = new Marshaller(this);
                try { return marshaller.ToManaged().String; }
                finally { marshaller.Free(); }
            }

        }

        public partial class InteropHelper
        {
            [LibraryImport(Interop.NativeLib, EntryPoint = "interoptopus_string_create")]
            public static partial long interoptopus_string_create(IntPtr utf8, ulong len, out Unmanaged rval);

            [LibraryImport(Interop.NativeLib, EntryPoint = "interoptopus_string_destroy")]
            public static partial long interoptopus_string_destroy(Unmanaged utf8);
        }

        [CustomMarshaller(typeof(Utf8String), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private Utf8String _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(Utf8String managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(Utf8String managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {
                var utf8Bytes = Encoding.UTF8.GetBytes(_managed._s);
                var len = utf8Bytes.Length;

                fixed (byte* p = utf8Bytes)
                {
                    InteropHelper.interoptopus_string_create((IntPtr)p, (ulong)len, out var rval);
                    _unmanaged = rval;
                }

                return _unmanaged;
            }

            public unsafe Utf8String ToManaged()
            {
                var span = new ReadOnlySpan<byte>((byte*)_unmanaged.ptr, (int)_unmanaged.len);

                _managed = new Utf8String();
                _managed._s = Encoding.UTF8.GetString(span);

                InteropHelper.interoptopus_string_destroy(_unmanaged);

                return _managed;
            }

            public void Free() { }
        }
    }

}
