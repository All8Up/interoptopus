// Automatically generated by Interoptopus.

// Debug - write_imports 
#pragma warning disable 0105
using System;
using System.Text;
using System.Threading.Tasks;
using System.Reflection;
using System.Linq.Expressions;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Runtime.InteropServices.Marshalling;
using System.Runtime.CompilerServices;
using My.Company;
using My.Company.Common;
#pragma warning restore 0105

// Debug - write_namespace_context 
namespace My.Company
{
    // Debug - write_class_context 
    public static partial class Interop
    {
        // Debug - write_native_lib_string 
        public const string NativeLib = "interoptopus_reference_project";

        // Debug - write_abi_guard 
        static Interop()
        {
            var api_version = Interop.pattern_api_guard();
            if (api_version != 10179430876365156536ul)
            {
                throw new TypeLoadException($"API reports hash {api_version} which differs from hash in bindings (10179430876365156536). You probably forgot to update / copy either the bindings or the library.");
            }
        }

        // Debug - write_constant 
        public const byte U8 = (byte) 255;

        // Debug - write_constant 
        public const float F32_MIN_POSITIVE = (float) 0.000000000000000000000000000000000000011754944;

        // Debug - write_constant 
        public const int COMPUTED_I32 = (int) -2147483647;


        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "interoptopus_string_create")]
        // Debug - write_function_declaration 
        public static partial long interoptopus_string_create(IntPtr utf8, ulong len, out Utf8String rval);

        // Debug - write_function_overload 
        // Debug - no overload for interoptopus_string_create 

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "interoptopus_string_destroy")]
        // Debug - write_function_declaration 
        public static partial long interoptopus_string_destroy(Utf8String utf8);

        // Debug - write_function_overload 
        public static unsafe long interoptopus_string_destroy(string utf8)
        {
            var utf8_wrapped = new Utf8String(utf8);
            try
            {
                return interoptopus_string_destroy(utf8_wrapped);
            }
            finally
            {
                utf8_wrapped.Dispose();
            }
        }

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "alignment_1")]
        // Debug - write_function_declaration 
        public static partial Packed2 alignment_1(Packed1 a);

        // Debug - write_function_overload 
        // Debug - no overload for alignment_1 

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "array_1")]
        // Debug - write_function_declaration 
        public static partial byte array_1(Array x);

        // Debug - write_function_overload 
        // Debug - no overload for array_1 

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "array_2")]
        // Debug - write_function_declaration 
        public static partial Array array_2();

        // Debug - write_function_overload 
        // Debug - no overload for array_2 

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "array_3")]
        // Debug - write_function_declaration 
        public static partial void array_3(out Array arr);

        // Debug - write_function_overload 
        // Debug - no overload for array_3 

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "char_array_1")]
        // Debug - write_function_declaration 
        public static partial CharArray char_array_1();

        // Debug - write_function_overload 
        // Debug - no overload for char_array_1 

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "char_array_2")]
        // Debug - write_function_declaration 
        public static partial CharArray char_array_2(CharArray arr);

        // Debug - write_function_overload 
        // Debug - no overload for char_array_2 

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "char_array_3")]
        // Debug - write_function_declaration 
        public static partial byte char_array_3(ref CharArray arr);

        // Debug - write_function_overload 
        // Debug - no overload for char_array_3 

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "nested_array_1")]
        // Debug - write_function_declaration 
        public static partial NestedArray nested_array_1();

        // Debug - write_function_overload 
        // Debug - no overload for nested_array_1 

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "nested_array_2")]
        // Debug - write_function_declaration 
        public static partial void nested_array_2(out NestedArray result);

        // Debug - write_function_overload 
        // Debug - no overload for nested_array_2 

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "nested_array_3")]
        // Debug - write_function_declaration 
        public static partial byte nested_array_3(NestedArray input);

        // Debug - write_function_overload 
        // Debug - no overload for nested_array_3 

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "behavior_sleep")]
        // Debug - write_function_declaration 
        public static partial void behavior_sleep(ulong millis);

        // Debug - write_function_overload 
        // Debug - no overload for behavior_sleep 

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "behavior_panics")]
        // Debug - write_function_declaration 
        public static partial ResultFFIError behavior_panics();

        // Debug - write_function_overload 
        // Debug - no overload for behavior_panics 

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "fnptr_1")]
        // Debug - write_function_declaration 
        public static partial byte fnptr_1(InteropDelegate_fn_u8_rval_u8 callback, byte value);

        // Debug - write_function_overload 
        // Debug - no overload for fnptr_1 

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "fnptr_2")]
        // Debug - write_function_declaration 
        public static partial void fnptr_2(InteropDelegate_fn_CharArray_native callback, CharArray value);

        // Debug - write_function_overload 
        // Debug - no overload for fnptr_2 

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "generic_1a")]
        // Debug - write_function_declaration 
        public static partial uint generic_1a(Genericu32 x, Phantomu8 y);

        // Debug - write_function_overload 
        // Debug - no overload for generic_1a 

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "generic_1b")]
        // Debug - write_function_declaration 
        public static partial byte generic_1b(Genericu8 x, Phantomu8 y);

        // Debug - write_function_overload 
        // Debug - no overload for generic_1b 

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "generic_1c")]
        // Debug - write_function_declaration 
        public static partial byte generic_1c(ref Genericu8 x, ref Genericu8 y);

        // Debug - write_function_overload 
        // Debug - no overload for generic_1c 

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "generic_2")]
        // Debug - write_function_declaration 
        public static partial byte generic_2(IntPtr x);

        // Debug - write_function_overload 
        // Debug - no overload for generic_2 

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "generic_3")]
        // Debug - write_function_declaration 
        public static partial byte generic_3(IntPtr x);

        // Debug - write_function_overload 
        // Debug - no overload for generic_3 

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "generic_4")]
        // Debug - write_function_declaration 
        public static partial byte generic_4(IntPtr x);

        // Debug - write_function_overload 
        // Debug - no overload for generic_4 

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "generic_5")]
        [return: MarshalAs(UnmanagedType.U1)]
        // Debug - write_function_declaration 
        public static partial bool generic_5(Weird1u32 x, Weird2u8 y);

        // Debug - write_function_overload 
        // Debug - no overload for generic_5 

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "meta_ambiguous_1")]
        // Debug - write_function_declaration 
        public static partial Vec1 meta_ambiguous_1(Vec1 x);

        // Debug - write_function_overload 
        // Debug - no overload for meta_ambiguous_1 

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "meta_ambiguous_2")]
        // Debug - write_function_declaration 
        public static partial Vec2 meta_ambiguous_2(Vec2 x);

        // Debug - write_function_overload 
        // Debug - no overload for meta_ambiguous_2 

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "meta_ambiguous_3")]
        [return: MarshalAs(UnmanagedType.U1)]
        // Debug - write_function_declaration 
        public static partial bool meta_ambiguous_3(Vec1 x, Vec2 y);

        // Debug - write_function_overload 
        // Debug - no overload for meta_ambiguous_3 

        // Debug - write_function 
        /// This function has documentation.
        [LibraryImport(NativeLib, EntryPoint = "meta_documented")]
        // Debug - write_function_declaration 
        public static partial EnumDocumented meta_documented(StructDocumented x);

        // Debug - write_function_overload 
        // Debug - no overload for meta_documented 

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "meta_visibility1")]
        // Debug - write_function_declaration 
        public static partial void meta_visibility1(Visibility1 x, Visibility2 y);

        // Debug - write_function_overload 
        // Debug - no overload for meta_visibility1 

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "meta_renamed")]
        // Debug - write_function_declaration 
        public static partial EnumRenamed meta_renamed(StructRenamed x);

        // Debug - write_function_overload 
        // Debug - no overload for meta_renamed 

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "namespaced_inner_option")]
        // Debug - write_function_declaration 
        public static partial OptionVec namespaced_inner_option(OptionVec x);

        // Debug - write_function_overload 
        // Debug - no overload for namespaced_inner_option 

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "namespaced_inner_slice")]
        // Debug - write_function_declaration 
        public static partial SliceVec namespaced_inner_slice(SliceVec x);

        // Debug - write_function_overload 
        public static unsafe SliceVec namespaced_inner_slice(ReadOnlySpan<Vec> x)
        {
            fixed (void* ptr_x = x)
            {
                var x_slice = new SliceVec(new IntPtr(ptr_x), (ulong) x.Length);
                try
                {
                    return namespaced_inner_slice(x_slice);
                }
                finally
                {
                }
            }
        }

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "namespaced_inner_slice_mut")]
        // Debug - write_function_declaration 
        public static partial SliceMutVec namespaced_inner_slice_mut(SliceMutVec x);

        // Debug - write_function_overload 
        public static unsafe SliceMutVec namespaced_inner_slice_mut(Span<Vec> x)
        {
            fixed (void* ptr_x = x)
            {
                var x_slice = new SliceMutVec(new IntPtr(ptr_x), (ulong) x.Length);
                try
                {
                    return namespaced_inner_slice_mut(x_slice);
                }
                finally
                {
                }
            }
        }

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "namespaced_type")]
        // Debug - write_function_declaration 
        public static partial Vec namespaced_type(Vec x);

        // Debug - write_function_overload 
        // Debug - no overload for namespaced_type 

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "primitive_args_5")]
        // Debug - write_function_declaration 
        public static partial long primitive_args_5(long x0, long x1, long x2, long x3, long x4);

        // Debug - write_function_overload 
        // Debug - no overload for primitive_args_5 

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "primitive_args_10")]
        // Debug - write_function_declaration 
        public static partial long primitive_args_10(long x0, long x1, long x2, long x3, long x4, long x5, long x6, long x7, long x8, long x9);

        // Debug - write_function_overload 
        // Debug - no overload for primitive_args_10 

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "primitive_bool")]
        [return: MarshalAs(UnmanagedType.U1)]
        // Debug - write_function_declaration 
        public static partial bool primitive_bool([MarshalAs(UnmanagedType.U1)] bool x);

        // Debug - write_function_overload 
        // Debug - no overload for primitive_bool 

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "primitive_f32")]
        // Debug - write_function_declaration 
        public static partial float primitive_f32(float x);

        // Debug - write_function_overload 
        // Debug - no overload for primitive_f32 

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "primitive_f64")]
        // Debug - write_function_declaration 
        public static partial double primitive_f64(double x);

        // Debug - write_function_overload 
        // Debug - no overload for primitive_f64 

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "primitive_i16")]
        // Debug - write_function_declaration 
        public static partial short primitive_i16(short x);

        // Debug - write_function_overload 
        // Debug - no overload for primitive_i16 

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "primitive_i32")]
        // Debug - write_function_declaration 
        public static partial int primitive_i32(int x);

        // Debug - write_function_overload 
        // Debug - no overload for primitive_i32 

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "primitive_i64")]
        // Debug - write_function_declaration 
        public static partial long primitive_i64(long x);

        // Debug - write_function_overload 
        // Debug - no overload for primitive_i64 

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "primitive_i8")]
        // Debug - write_function_declaration 
        public static partial sbyte primitive_i8(sbyte x);

        // Debug - write_function_overload 
        // Debug - no overload for primitive_i8 

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "primitive_u16")]
        // Debug - write_function_declaration 
        public static partial ushort primitive_u16(ushort x);

        // Debug - write_function_overload 
        // Debug - no overload for primitive_u16 

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "primitive_u32")]
        // Debug - write_function_declaration 
        public static partial uint primitive_u32(uint x);

        // Debug - write_function_overload 
        // Debug - no overload for primitive_u32 

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "primitive_u64")]
        // Debug - write_function_declaration 
        public static partial ulong primitive_u64(ulong x);

        // Debug - write_function_overload 
        // Debug - no overload for primitive_u64 

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "primitive_u8")]
        // Debug - write_function_declaration 
        public static partial byte primitive_u8(byte x);

        // Debug - write_function_overload 
        // Debug - no overload for primitive_u8 

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "primitive_void")]
        // Debug - write_function_declaration 
        public static partial void primitive_void();

        // Debug - write_function_overload 
        // Debug - no overload for primitive_void 

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "primitive_void2")]
        // Debug - write_function_declaration 
        public static partial void primitive_void2();

        // Debug - write_function_overload 
        // Debug - no overload for primitive_void2 

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "ptr1")]
        // Debug - write_function_declaration 
        public static partial IntPtr ptr1(ref long x);

        // Debug - write_function_overload 
        // Debug - no overload for ptr1 

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "ptr2")]
        // Debug - write_function_declaration 
        public static partial IntPtr ptr2(ref IntPtr x);

        // Debug - write_function_overload 
        // Debug - no overload for ptr2 

        // Debug - write_function 
        /// # Safety
        ///
        /// Parameter x must point to valid data.
        [LibraryImport(NativeLib, EntryPoint = "ptr3")]
        // Debug - write_function_declaration 
        public static partial IntPtr ptr3(out long x);

        // Debug - write_function_overload 
        // Debug - no overload for ptr3 

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "ref1")]
        // Debug - write_function_declaration 
        public static partial IntPtr ref1(ref long x);

        // Debug - write_function_overload 
        // Debug - no overload for ref1 

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "ref2")]
        // Debug - write_function_declaration 
        public static partial IntPtr ref2(out long x);

        // Debug - write_function_overload 
        // Debug - no overload for ref2 

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "ref3")]
        [return: MarshalAs(UnmanagedType.U1)]
        // Debug - write_function_declaration 
        public static partial bool ref3(ref long x);

        // Debug - write_function_overload 
        // Debug - no overload for ref3 

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "ref4")]
        [return: MarshalAs(UnmanagedType.U1)]
        // Debug - write_function_declaration 
        public static partial bool ref4(out long x);

        // Debug - write_function_overload 
        // Debug - no overload for ref4 

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "struct1")]
        // Debug - write_function_declaration 
        public static partial Tupled struct1(Tupled x);

        // Debug - write_function_overload 
        // Debug - no overload for struct1 

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "struct2")]
        // Debug - write_function_declaration 
        public static partial ResultFFIError struct2(Vec3f32 a, ref Tupled b);

        // Debug - write_function_overload 
        // Debug - no overload for struct2 

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "struct3")]
        [return: MarshalAs(UnmanagedType.U1)]
        // Debug - write_function_declaration 
        public static partial bool struct3(BoolField x);

        // Debug - write_function_overload 
        // Debug - no overload for struct3 

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "pattern_ascii_pointer_1")]
        // Debug - write_function_declaration 
        public static partial uint pattern_ascii_pointer_1([MarshalAs(UnmanagedType.LPStr)] string x);

        // Debug - write_function_overload 
        // Debug - no overload for pattern_ascii_pointer_1 

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "pattern_ascii_pointer_2")]
        // Debug - write_function_declaration 
        public static partial IntPtr pattern_ascii_pointer_2();

        // Debug - write_function_overload 
        // Debug - no overload for pattern_ascii_pointer_2 

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "pattern_ascii_pointer_3")]
        // Debug - write_function_declaration 
        public static partial IntPtr pattern_ascii_pointer_3([MarshalAs(UnmanagedType.LPStr)] string x);

        // Debug - write_function_overload 
        // Debug - no overload for pattern_ascii_pointer_3 

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "pattern_ascii_pointer_4")]
        // Debug - write_function_declaration 
        public static partial IntPtr pattern_ascii_pointer_4([MarshalAs(UnmanagedType.LPStr)] string x, uint l);

        // Debug - write_function_overload 
        // Debug - no overload for pattern_ascii_pointer_4 

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "pattern_ascii_pointer_5")]
        // Debug - write_function_declaration 
        public static partial byte pattern_ascii_pointer_5([MarshalAs(UnmanagedType.LPStr)] string x, uint i);

        // Debug - write_function_overload 
        // Debug - no overload for pattern_ascii_pointer_5 

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "pattern_ascii_pointer_return_slice")]
        // Debug - write_function_declaration 
        public static partial SliceUseCStrPtr pattern_ascii_pointer_return_slice();

        // Debug - write_function_overload 
        // Debug - no overload for pattern_ascii_pointer_return_slice 

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "pattern_string_1")]
        // Debug - write_function_declaration 
        public static partial Utf8String pattern_string_1(Utf8String x);

        // Debug - write_function_overload 
        public static unsafe Utf8String pattern_string_1(string x)
        {
            var x_wrapped = new Utf8String(x);
            try
            {
                return pattern_string_1(x_wrapped);
            }
            finally
            {
                x_wrapped.Dispose();
            }
        }

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "pattern_string_2")]
        // Debug - write_function_declaration 
        public static partial uint pattern_string_2(Utf8String x);

        // Debug - write_function_overload 
        public static unsafe uint pattern_string_2(string x)
        {
            var x_wrapped = new Utf8String(x);
            try
            {
                return pattern_string_2(x_wrapped);
            }
            finally
            {
                x_wrapped.Dispose();
            }
        }

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "pattern_string_3")]
        // Debug - write_function_declaration 
        public static partial Utf8String pattern_string_3();

        // Debug - write_function_overload 
        // Debug - no overload for pattern_string_3 

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "pattern_string_4")]
        // Debug - write_function_declaration 
        public static partial UseUtf8String pattern_string_4(UseUtf8String x);

        // Debug - write_function_overload 
        // Debug - no overload for pattern_string_4 

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "pattern_string_5")]
        // Debug - write_function_declaration 
        public static partial ResultUseUtf8StringFFIError pattern_string_5(UseUtf8String x);

        // Debug - write_function_overload 
        // Debug - no overload for pattern_string_5 

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "pattern_string_6a")]
        // Debug - write_function_declaration 
        public static partial ResultFFIError pattern_string_6a(ref UseUtf8String ignored);

        // Debug - write_function_overload 
        // Debug - no overload for pattern_string_6a 

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "pattern_string_6b")]
        // Debug - write_function_declaration 
        public static partial ResultFFIError pattern_string_6b(out UseUtf8String y);

        // Debug - write_function_overload 
        // Debug - no overload for pattern_string_6b 

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "pattern_string_7")]
        // Debug - write_function_declaration 
        public static partial ResultUtf8StringFFIError pattern_string_7(SliceUtf8String x, ulong i);

        // Debug - write_function_overload 
        public static unsafe ResultUtf8StringFFIError pattern_string_7(string[] x, ulong i)
        {
            var x_wrapped = new SliceUtf8String(x);
            try
            {
                return pattern_string_7(x_wrapped, i);
            }
            finally
            {
                x_wrapped.Dispose();
            }
        }

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "pattern_string_8")]
        // Debug - write_function_declaration 
        public static partial ResultUseUtf8StringFFIError pattern_string_8(SliceUseUtf8String x, ulong i);

        // Debug - write_function_overload 
        public static unsafe ResultUseUtf8StringFFIError pattern_string_8(UseUtf8String[] x, ulong i)
        {
            var x_wrapped = new SliceUseUtf8String(x);
            try
            {
                return pattern_string_8(x_wrapped, i);
            }
            finally
            {
                x_wrapped.Dispose();
            }
        }

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "pattern_ffi_slice_1")]
        // Debug - write_function_declaration 
        public static partial uint pattern_ffi_slice_1(SliceU32 ffi_slice);

        // Debug - write_function_overload 
        public static unsafe uint pattern_ffi_slice_1(ReadOnlySpan<uint> ffi_slice)
        {
            fixed (void* ptr_ffi_slice = ffi_slice)
            {
                var ffi_slice_slice = new SliceU32(new IntPtr(ptr_ffi_slice), (ulong) ffi_slice.Length);
                try
                {
                    return pattern_ffi_slice_1(ffi_slice_slice);
                }
                finally
                {
                }
            }
        }

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "pattern_ffi_slice_1b")]
        // Debug - write_function_declaration 
        public static partial uint pattern_ffi_slice_1b(SliceMutU32 ffi_slice);

        // Debug - write_function_overload 
        public static unsafe uint pattern_ffi_slice_1b(Span<uint> ffi_slice)
        {
            fixed (void* ptr_ffi_slice = ffi_slice)
            {
                var ffi_slice_slice = new SliceMutU32(new IntPtr(ptr_ffi_slice), (ulong) ffi_slice.Length);
                try
                {
                    return pattern_ffi_slice_1b(ffi_slice_slice);
                }
                finally
                {
                }
            }
        }

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "pattern_ffi_slice_2")]
        // Debug - write_function_declaration 
        public static partial Vec3f32 pattern_ffi_slice_2(SliceVec3f32 ffi_slice, int i);

        // Debug - write_function_overload 
        public static unsafe Vec3f32 pattern_ffi_slice_2(ReadOnlySpan<Vec3f32> ffi_slice, int i)
        {
            fixed (void* ptr_ffi_slice = ffi_slice)
            {
                var ffi_slice_slice = new SliceVec3f32(new IntPtr(ptr_ffi_slice), (ulong) ffi_slice.Length);
                try
                {
                    return pattern_ffi_slice_2(ffi_slice_slice, i);
                }
                finally
                {
                }
            }
        }

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "pattern_ffi_slice_3")]
        // Debug - write_function_declaration 
        public static partial void pattern_ffi_slice_3(SliceMutU8 slice, CallbackSliceMut callback);

        // Debug - write_function_overload 
        public static unsafe void pattern_ffi_slice_3(Span<byte> slice, CallbackSliceMutDelegate callback)
        {
            fixed (void* ptr_slice = slice)
            {
                var slice_slice = new SliceMutU8(new IntPtr(ptr_slice), (ulong) slice.Length);
                var callback_wrapped = new CallbackSliceMut(callback);
                try
                {
                    pattern_ffi_slice_3(slice_slice, callback_wrapped);
                }
                finally
                {
                    callback_wrapped.Dispose();
                }
            }
        }

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "pattern_ffi_slice_4")]
        // Debug - write_function_declaration 
        public static partial void pattern_ffi_slice_4(SliceU8 slice, SliceMutU8 slice2);

        // Debug - write_function_overload 
        public static unsafe void pattern_ffi_slice_4(ReadOnlySpan<byte> slice, Span<byte> slice2)
        {
            fixed (void* ptr_slice = slice)
            {
                var slice_slice = new SliceU8(new IntPtr(ptr_slice), (ulong) slice.Length);
                fixed (void* ptr_slice2 = slice2)
                {
                    var slice2_slice = new SliceMutU8(new IntPtr(ptr_slice2), (ulong) slice2.Length);
                    try
                    {
                        pattern_ffi_slice_4(slice_slice, slice2_slice);
                    }
                    finally
                    {
                    }
                }
            }
        }

        // Debug - write_function 
        /// It is (probably?) UB to call this function with the same FFI slice data at the same time.
        [LibraryImport(NativeLib, EntryPoint = "pattern_ffi_slice_5")]
        // Debug - write_function_declaration 
        public static partial void pattern_ffi_slice_5(ref SliceU8 slice, ref SliceMutU8 slice2);

        // Debug - write_function_overload 
        /// It is (probably?) UB to call this function with the same FFI slice data at the same time.
        public static unsafe void pattern_ffi_slice_5(ReadOnlySpan<byte> slice, Span<byte> slice2)
        {
            fixed (void* ptr_slice = slice)
            {
                var slice_slice = new SliceU8(new IntPtr(ptr_slice), (ulong) slice.Length);
                fixed (void* ptr_slice2 = slice2)
                {
                    var slice2_slice = new SliceMutU8(new IntPtr(ptr_slice2), (ulong) slice2.Length);
                    try
                    {
                        pattern_ffi_slice_5(ref slice_slice, ref slice2_slice);
                    }
                    finally
                    {
                    }
                }
            }
        }

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "pattern_ffi_slice_6")]
        // Debug - write_function_declaration 
        public static partial void pattern_ffi_slice_6(ref SliceMutU8 slice, CallbackU8 callback);

        // Debug - write_function_overload 
        public static unsafe void pattern_ffi_slice_6(Span<byte> slice, CallbackU8Delegate callback)
        {
            fixed (void* ptr_slice = slice)
            {
                var slice_slice = new SliceMutU8(new IntPtr(ptr_slice), (ulong) slice.Length);
                var callback_wrapped = new CallbackU8(callback);
                try
                {
                    pattern_ffi_slice_6(ref slice_slice, callback_wrapped);
                }
                finally
                {
                    callback_wrapped.Dispose();
                }
            }
        }

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "pattern_ffi_slice_8")]
        // Debug - write_function_declaration 
        public static partial void pattern_ffi_slice_8(ref SliceMutCharArray slice, CallbackCharArray2 callback);

        // Debug - write_function_overload 
        public static unsafe void pattern_ffi_slice_8(Span<CharArray> slice, CallbackCharArray2Delegate callback)
        {
            fixed (void* ptr_slice = slice)
            {
                var slice_slice = new SliceMutCharArray(new IntPtr(ptr_slice), (ulong) slice.Length);
                var callback_wrapped = new CallbackCharArray2(callback);
                try
                {
                    pattern_ffi_slice_8(ref slice_slice, callback_wrapped);
                }
                finally
                {
                    callback_wrapped.Dispose();
                }
            }
        }

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "pattern_ffi_slice_delegate")]
        // Debug - write_function_declaration 
        public static partial byte pattern_ffi_slice_delegate(CallbackFFISlice callback);

        // Debug - write_function_overload 
        public static unsafe byte pattern_ffi_slice_delegate(CallbackFFISliceDelegate callback)
        {
            var callback_wrapped = new CallbackFFISlice(callback);
            try
            {
                return pattern_ffi_slice_delegate(callback_wrapped);
            }
            finally
            {
                callback_wrapped.Dispose();
            }
        }

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "pattern_ffi_slice_delegate_huge")]
        // Debug - write_function_declaration 
        public static partial Vec3f32 pattern_ffi_slice_delegate_huge(CallbackHugeVecSlice callback);

        // Debug - write_function_overload 
        public static unsafe Vec3f32 pattern_ffi_slice_delegate_huge(CallbackHugeVecSliceDelegate callback)
        {
            var callback_wrapped = new CallbackHugeVecSlice(callback);
            try
            {
                return pattern_ffi_slice_delegate_huge(callback_wrapped);
            }
            finally
            {
                callback_wrapped.Dispose();
            }
        }

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "pattern_ffi_option_1")]
        // Debug - write_function_declaration 
        public static partial OptionInner pattern_ffi_option_1(OptionInner ffi_slice);

        // Debug - write_function_overload 
        // Debug - no overload for pattern_ffi_option_1 

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "pattern_ffi_option_2")]
        // Debug - write_function_declaration 
        public static partial Inner pattern_ffi_option_2(OptionInner ffi_slice);

        // Debug - write_function_overload 
        // Debug - no overload for pattern_ffi_option_2 

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "pattern_ffi_bool")]
        // Debug - write_function_declaration 
        public static partial Bool pattern_ffi_bool(Bool ffi_bool);

        // Debug - write_function_overload 
        // Debug - no overload for pattern_ffi_bool 

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "pattern_ffi_cchar")]
        // Debug - write_function_declaration 
        public static partial sbyte pattern_ffi_cchar(sbyte ffi_cchar);

        // Debug - write_function_overload 
        // Debug - no overload for pattern_ffi_cchar 

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "pattern_ffi_cchar_const_pointer")]
        // Debug - write_function_declaration 
        public static partial IntPtr pattern_ffi_cchar_const_pointer(IntPtr ffi_cchar);

        // Debug - write_function_overload 
        // Debug - no overload for pattern_ffi_cchar_const_pointer 

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "pattern_ffi_cchar_mut_pointer")]
        // Debug - write_function_declaration 
        public static partial IntPtr pattern_ffi_cchar_mut_pointer(IntPtr ffi_cchar);

        // Debug - write_function_overload 
        // Debug - no overload for pattern_ffi_cchar_mut_pointer 

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "pattern_result_1")]
        // Debug - write_function_declaration 
        public static partial ResultU32FFIError pattern_result_1(ResultU32FFIError x);

        // Debug - write_function_overload 
        // Debug - no overload for pattern_result_1 

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "pattern_result_2")]
        // Debug - write_function_declaration 
        public static partial ResultFFIError pattern_result_2();

        // Debug - write_function_overload 
        // Debug - no overload for pattern_result_2 

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "pattern_result_3")]
        // Debug - write_function_declaration 
        public static partial ResultFFIError pattern_result_3(ResultFFIError x);

        // Debug - write_function_overload 
        // Debug - no overload for pattern_result_3 

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "pattern_api_guard")]
        // Debug - write_function_declaration 
        public static partial ulong pattern_api_guard();

        // Debug - write_function_overload 
        // Debug - no overload for pattern_api_guard 

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "pattern_callback_1")]
        // Debug - write_function_declaration 
        public static partial uint pattern_callback_1(MyCallback callback, uint x);

        // Debug - write_function_overload 
        public static unsafe uint pattern_callback_1(MyCallbackDelegate callback, uint x)
        {
            var callback_wrapped = new MyCallback(callback);
            try
            {
                return pattern_callback_1(callback_wrapped, x);
            }
            finally
            {
                callback_wrapped.Dispose();
            }
        }

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "pattern_callback_2")]
        // Debug - write_function_declaration 
        public static partial MyCallbackVoid pattern_callback_2(MyCallbackVoid callback);

        // Debug - write_function_overload 
        public static unsafe MyCallbackVoid pattern_callback_2(MyCallbackVoidDelegate callback)
        {
            var callback_wrapped = new MyCallbackVoid(callback);
            try
            {
                return pattern_callback_2(callback_wrapped);
            }
            finally
            {
                callback_wrapped.Dispose();
            }
        }

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "pattern_callback_4")]
        // Debug - write_function_declaration 
        public static partial uint pattern_callback_4(MyCallbackNamespaced callback, uint x);

        // Debug - write_function_overload 
        public static unsafe uint pattern_callback_4(MyCallbackNamespacedDelegate callback, uint x)
        {
            var callback_wrapped = new MyCallbackNamespaced(callback);
            try
            {
                return pattern_callback_4(callback_wrapped, x);
            }
            finally
            {
                callback_wrapped.Dispose();
            }
        }

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "pattern_callback_5")]
        // Debug - write_function_declaration 
        public static partial SumDelegate1 pattern_callback_5();

        // Debug - write_function_overload 
        // Debug - no overload for pattern_callback_5 

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "pattern_callback_6")]
        // Debug - write_function_declaration 
        public static partial SumDelegate2 pattern_callback_6();

        // Debug - write_function_overload 
        // Debug - no overload for pattern_callback_6 

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "pattern_callback_7")]
        // Debug - write_function_declaration 
        public static partial ResultFFIError pattern_callback_7(SumDelegateReturn c1, SumDelegateReturn2 c2, int x, int i, out int o);

        // Debug - write_function_overload 
        public static unsafe ResultFFIError pattern_callback_7(SumDelegateReturnDelegate c1, SumDelegateReturn2Delegate c2, int x, int i, out int o)
        {
            var c1_wrapped = new SumDelegateReturn(c1);
            var c2_wrapped = new SumDelegateReturn2(c2);
            try
            {
                return pattern_callback_7(c1_wrapped, c2_wrapped, x, i, out o);
            }
            finally
            {
                c1_wrapped.Dispose();
                c2_wrapped.Dispose();
            }
        }

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "pattern_surrogates_1")]
        // Debug - write_function_declaration 
        public static partial void pattern_surrogates_1(Local s, out Container c);

        // Debug - write_function_overload 
        // Debug - no overload for pattern_surrogates_1 

        // Debug - write_function 
        /// Destroys the given instance.
        ///
        /// # Safety
        ///
        /// The passed parameter MUST have been created with the corresponding init function;
        /// passing any other value results in undefined behavior.
        [LibraryImport(NativeLib, EntryPoint = "service_async_destroy")]
        // Debug - write_function_declaration 
        public static partial ResultConstPtrServiceAsyncFFIError service_async_destroy(IntPtr _context);

        // Debug - write_function_overload 
        // Debug - no overload for service_async_destroy 

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "service_async_new")]
        // Debug - write_function_declaration 
        public static partial ResultConstPtrServiceAsyncFFIError service_async_new();

        // Debug - write_function_overload 
        // Debug - no overload for service_async_new 

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "service_async_return_after_ms")]
        // Debug - write_function_declaration 
        public static partial ResultFFIError service_async_return_after_ms(IntPtr _context, ulong x, ulong ms, AsyncHelper _async_callback);

        // Debug - write_function_overload 
        public static unsafe Task<ulong> service_async_return_after_ms(IntPtr _context, ulong x, ulong ms)
        {
            var cs = new TaskCompletionSource<ulong>();
            GCHandle pinned = default;
            var cb = new AsyncHelper((x) => {
                var unmanaged = Marshal.PtrToStructure<ResultU64FFIError.Unmanaged>(x);
                var marshaller = new ResultU64FFIError.Marshaller(unmanaged);
                var managed = marshaller.ToManaged();
                if (managed.IsOk()) { cs.SetResult(managed.Ok()); }
                else { cs.SetException(new InteropException<FFIError>(managed.Err())); }
                pinned.Free();
            });
            pinned = GCHandle.Alloc(cb);
            try
            {
                service_async_return_after_ms(_context, x, ms, cb).Ok();
                return cs.Task;
            }
            finally
            {
            }
            return cs.Task;
        }

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "service_async_process_struct")]
        // Debug - write_function_declaration 
        public static partial ResultFFIError service_async_process_struct(IntPtr _context, NestedArray x, AsyncHelper _async_callback);

        // Debug - write_function_overload 
        public static unsafe Task<NestedArray> service_async_process_struct(IntPtr _context, NestedArray x)
        {
            var cs = new TaskCompletionSource<NestedArray>();
            GCHandle pinned = default;
            var cb = new AsyncHelper((x) => {
                var unmanaged = Marshal.PtrToStructure<ResultNestedArrayFFIError.Unmanaged>(x);
                var marshaller = new ResultNestedArrayFFIError.Marshaller(unmanaged);
                var managed = marshaller.ToManaged();
                if (managed.IsOk()) { cs.SetResult(managed.Ok()); }
                else { cs.SetException(new InteropException<FFIError>(managed.Err())); }
                pinned.Free();
            });
            pinned = GCHandle.Alloc(cb);
            try
            {
                service_async_process_struct(_context, x, cb).Ok();
                return cs.Task;
            }
            finally
            {
            }
            return cs.Task;
        }

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "service_async_handle_string")]
        // Debug - write_function_declaration 
        public static partial ResultFFIError service_async_handle_string(IntPtr _context, Utf8String s, AsyncHelper _async_callback);

        // Debug - write_function_overload 
        public static unsafe Task<string> service_async_handle_string(IntPtr _context, string s)
        {
            var cs = new TaskCompletionSource<string>();
            GCHandle pinned = default;
            var cb = new AsyncHelper((x) => {
                var unmanaged = Marshal.PtrToStructure<ResultUtf8StringFFIError.Unmanaged>(x);
                var marshaller = new ResultUtf8StringFFIError.Marshaller(unmanaged);
                var managed = marshaller.ToManaged();
                if (managed.IsOk()) { cs.SetResult(managed.Ok()); }
                else { cs.SetException(new InteropException<FFIError>(managed.Err())); }
                pinned.Free();
            });
            pinned = GCHandle.Alloc(cb);
            var s_wrapped = new Utf8String(s);
            try
            {
                service_async_handle_string(_context, s_wrapped, cb).Ok();
                return cs.Task;
            }
            finally
            {
                s_wrapped.Dispose();
            }
            return cs.Task;
        }

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "service_async_handle_nested_string")]
        // Debug - write_function_declaration 
        public static partial ResultFFIError service_async_handle_nested_string(IntPtr _context, Utf8String s, AsyncHelper _async_callback);

        // Debug - write_function_overload 
        public static unsafe Task<UseUtf8String> service_async_handle_nested_string(IntPtr _context, string s)
        {
            var cs = new TaskCompletionSource<UseUtf8String>();
            GCHandle pinned = default;
            var cb = new AsyncHelper((x) => {
                var unmanaged = Marshal.PtrToStructure<ResultUseUtf8StringFFIError.Unmanaged>(x);
                var marshaller = new ResultUseUtf8StringFFIError.Marshaller(unmanaged);
                var managed = marshaller.ToManaged();
                if (managed.IsOk()) { cs.SetResult(managed.Ok()); }
                else { cs.SetException(new InteropException<FFIError>(managed.Err())); }
                pinned.Free();
            });
            pinned = GCHandle.Alloc(cb);
            var s_wrapped = new Utf8String(s);
            try
            {
                service_async_handle_nested_string(_context, s_wrapped, cb).Ok();
                return cs.Task;
            }
            finally
            {
                s_wrapped.Dispose();
            }
            return cs.Task;
        }

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "service_async_fail")]
        // Debug - write_function_declaration 
        public static partial ResultFFIError service_async_fail(IntPtr _context, AsyncHelper _async_callback);

        // Debug - write_function_overload 
        public static unsafe Task service_async_fail(IntPtr _context)
        {
            var cs = new TaskCompletionSource();
            GCHandle pinned = default;
            var cb = new AsyncHelper((x) => {
                var unmanaged = Marshal.PtrToStructure<ResultFFIError.Unmanaged>(x);
                var marshaller = new ResultFFIError.Marshaller(unmanaged);
                var managed = marshaller.ToManaged();
                if (managed.IsOk()) { cs.SetResult(); }
                else { cs.SetException(new InteropException<FFIError>(managed.Err())); }
                pinned.Free();
            });
            pinned = GCHandle.Alloc(cb);
            try
            {
                service_async_fail(_context, cb).Ok();
                return cs.Task;
            }
            finally
            {
            }
            return cs.Task;
        }

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "service_async_bad")]
        // Debug - write_function_declaration 
        public static partial void service_async_bad(IntPtr _context);

        // Debug - write_function_overload 
        // Debug - no overload for service_async_bad 

        // Debug - write_function 
        /// Destroys the given instance.
        ///
        /// # Safety
        ///
        /// The passed parameter MUST have been created with the corresponding init function;
        /// passing any other value results in undefined behavior.
        [LibraryImport(NativeLib, EntryPoint = "service_basic_destroy")]
        // Debug - write_function_declaration 
        public static partial ResultConstPtrServiceBasicFFIError service_basic_destroy(IntPtr _context);

        // Debug - write_function_overload 
        // Debug - no overload for service_basic_destroy 

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "service_basic_new")]
        // Debug - write_function_declaration 
        public static partial ResultConstPtrServiceBasicFFIError service_basic_new();

        // Debug - write_function_overload 
        // Debug - no overload for service_basic_new 

        // Debug - write_function 
        /// Destroys the given instance.
        ///
        /// # Safety
        ///
        /// The passed parameter MUST have been created with the corresponding init function;
        /// passing any other value results in undefined behavior.
        [LibraryImport(NativeLib, EntryPoint = "service_result_destroy")]
        // Debug - write_function_declaration 
        public static partial ResultConstPtrServiceResultFFIError service_result_destroy(IntPtr _context);

        // Debug - write_function_overload 
        // Debug - no overload for service_result_destroy 

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "service_result_new")]
        // Debug - write_function_declaration 
        public static partial ResultConstPtrServiceResultFFIError service_result_new();

        // Debug - write_function_overload 
        // Debug - no overload for service_result_new 

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "service_result_test")]
        // Debug - write_function_declaration 
        public static partial ResultFFIError service_result_test(IntPtr _context);

        // Debug - write_function_overload 
        // Debug - no overload for service_result_test 

        // Debug - write_function 
        /// Destroys the given instance.
        ///
        /// # Safety
        ///
        /// The passed parameter MUST have been created with the corresponding init function;
        /// passing any other value results in undefined behavior.
        [LibraryImport(NativeLib, EntryPoint = "service_on_panic_destroy")]
        // Debug - write_function_declaration 
        public static partial ResultConstPtrServiceOnPanicFFIError service_on_panic_destroy(IntPtr _context);

        // Debug - write_function_overload 
        // Debug - no overload for service_on_panic_destroy 

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "service_on_panic_new")]
        // Debug - write_function_declaration 
        public static partial ResultConstPtrServiceOnPanicFFIError service_on_panic_new();

        // Debug - write_function_overload 
        // Debug - no overload for service_on_panic_new 

        // Debug - write_function 
        /// Methods returning a Result<(), _> are the default and do not
        /// need annotations.
        [LibraryImport(NativeLib, EntryPoint = "service_on_panic_return_result")]
        // Debug - write_function_declaration 
        public static partial ResultFFIError service_on_panic_return_result(IntPtr _context, uint anon1);

        // Debug - write_function_overload 
        // Debug - no overload for service_on_panic_return_result 

        // Debug - write_function 
        /// Methods returning a value need an `on_panic` annotation.
        [LibraryImport(NativeLib, EntryPoint = "service_on_panic_return_default_value")]
        // Debug - write_function_declaration 
        public static partial uint service_on_panic_return_default_value(IntPtr _context, uint x);

        // Debug - write_function_overload 
        // Debug - no overload for service_on_panic_return_default_value 

        // Debug - write_function 
        /// This function has no panic safeguards. It will be a bit faster to
        /// call, but if it panics your host app will abort.
        [LibraryImport(NativeLib, EntryPoint = "service_on_panic_return_ub_on_panic")]
        // Debug - write_function_declaration 
        public static partial IntPtr service_on_panic_return_ub_on_panic(IntPtr _context);

        // Debug - write_function_overload 
        // Debug - no overload for service_on_panic_return_ub_on_panic 

        // Debug - write_function 
        /// Destroys the given instance.
        ///
        /// # Safety
        ///
        /// The passed parameter MUST have been created with the corresponding init function;
        /// passing any other value results in undefined behavior.
        [LibraryImport(NativeLib, EntryPoint = "service_callbacks_destroy")]
        // Debug - write_function_declaration 
        public static partial ResultConstPtrServiceCallbacksFFIError service_callbacks_destroy(IntPtr _context);

        // Debug - write_function_overload 
        // Debug - no overload for service_callbacks_destroy 

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "service_callbacks_new")]
        // Debug - write_function_declaration 
        public static partial ResultConstPtrServiceCallbacksFFIError service_callbacks_new();

        // Debug - write_function_overload 
        // Debug - no overload for service_callbacks_new 

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "service_callbacks_callback_simple")]
        // Debug - write_function_declaration 
        public static partial ResultFFIError service_callbacks_callback_simple(IntPtr _context, MyCallback callback);

        // Debug - write_function_overload 
        public static unsafe ResultFFIError service_callbacks_callback_simple(IntPtr _context, MyCallbackDelegate callback)
        {
            var callback_wrapped = new MyCallback(callback);
            try
            {
                return service_callbacks_callback_simple(_context, callback_wrapped);
            }
            finally
            {
                callback_wrapped.Dispose();
            }
        }

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "service_callbacks_callback_ffi_return")]
        // Debug - write_function_declaration 
        public static partial ResultFFIError service_callbacks_callback_ffi_return(IntPtr _context, SumDelegateReturn callback);

        // Debug - write_function_overload 
        public static unsafe ResultFFIError service_callbacks_callback_ffi_return(IntPtr _context, SumDelegateReturnDelegate callback)
        {
            var callback_wrapped = new SumDelegateReturn(callback);
            try
            {
                return service_callbacks_callback_ffi_return(_context, callback_wrapped);
            }
            finally
            {
                callback_wrapped.Dispose();
            }
        }

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "service_callbacks_callback_with_slice")]
        // Debug - write_function_declaration 
        public static partial ResultFFIError service_callbacks_callback_with_slice(IntPtr _context, SumDelegateReturn callback, SliceI32 input);

        // Debug - write_function_overload 
        public static unsafe ResultFFIError service_callbacks_callback_with_slice(IntPtr _context, SumDelegateReturnDelegate callback, ReadOnlySpan<int> input)
        {
            fixed (void* ptr_input = input)
            {
                var input_slice = new SliceI32(new IntPtr(ptr_input), (ulong) input.Length);
                var callback_wrapped = new SumDelegateReturn(callback);
                try
                {
                    return service_callbacks_callback_with_slice(_context, callback_wrapped, input_slice);
                }
                finally
                {
                    callback_wrapped.Dispose();
                }
            }
        }

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "service_callbacks_set_delegate_table")]
        // Debug - write_function_declaration 
        public static partial void service_callbacks_set_delegate_table(IntPtr _context, CallbackTable table);

        // Debug - write_function_overload 
        // Debug - no overload for service_callbacks_set_delegate_table 

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "service_callbacks_invoke_delegates")]
        // Debug - write_function_declaration 
        public static partial ResultFFIError service_callbacks_invoke_delegates(IntPtr _context);

        // Debug - write_function_overload 
        // Debug - no overload for service_callbacks_invoke_delegates 

        // Debug - write_function 
        /// Destroys the given instance.
        ///
        /// # Safety
        ///
        /// The passed parameter MUST have been created with the corresponding init function;
        /// passing any other value results in undefined behavior.
        [LibraryImport(NativeLib, EntryPoint = "service_ignoring_methods_destroy")]
        // Debug - write_function_declaration 
        public static partial ResultConstPtrServiceIgnoringMethodsFFIError service_ignoring_methods_destroy(IntPtr _context);

        // Debug - write_function_overload 
        // Debug - no overload for service_ignoring_methods_destroy 

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "service_ignoring_methods_new")]
        // Debug - write_function_declaration 
        public static partial ResultConstPtrServiceIgnoringMethodsFFIError service_ignoring_methods_new();

        // Debug - write_function_overload 
        // Debug - no overload for service_ignoring_methods_new 

        // Debug - write_function 
        /// Destroys the given instance.
        ///
        /// # Safety
        ///
        /// The passed parameter MUST have been created with the corresponding init function;
        /// passing any other value results in undefined behavior.
        [LibraryImport(NativeLib, EntryPoint = "service_multiple_ctors_destroy")]
        // Debug - write_function_declaration 
        public static partial ResultConstPtrServiceMultipleCtorsFFIError service_multiple_ctors_destroy(IntPtr _context);

        // Debug - write_function_overload 
        // Debug - no overload for service_multiple_ctors_destroy 

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "service_multiple_ctors_new_with")]
        // Debug - write_function_declaration 
        public static partial ResultConstPtrServiceMultipleCtorsFFIError service_multiple_ctors_new_with(uint some_value);

        // Debug - write_function_overload 
        // Debug - no overload for service_multiple_ctors_new_with 

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "service_multiple_ctors_new_without")]
        // Debug - write_function_declaration 
        public static partial ResultConstPtrServiceMultipleCtorsFFIError service_multiple_ctors_new_without();

        // Debug - write_function_overload 
        // Debug - no overload for service_multiple_ctors_new_without 

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "service_multiple_ctors_new_with_string")]
        // Debug - write_function_declaration 
        public static partial ResultConstPtrServiceMultipleCtorsFFIError service_multiple_ctors_new_with_string([MarshalAs(UnmanagedType.LPStr)] string anon0);

        // Debug - write_function_overload 
        // Debug - no overload for service_multiple_ctors_new_with_string 

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "service_multiple_ctors_new_failing")]
        // Debug - write_function_declaration 
        public static partial ResultConstPtrServiceMultipleCtorsFFIError service_multiple_ctors_new_failing(byte some_value);

        // Debug - write_function_overload 
        // Debug - no overload for service_multiple_ctors_new_failing 

        // Debug - write_function 
        /// Destroys the given instance.
        ///
        /// # Safety
        ///
        /// The passed parameter MUST have been created with the corresponding init function;
        /// passing any other value results in undefined behavior.
        [LibraryImport(NativeLib, EntryPoint = "service_various_slices_destroy")]
        // Debug - write_function_declaration 
        public static partial ResultConstPtrServiceVariousSlicesFFIError service_various_slices_destroy(IntPtr _context);

        // Debug - write_function_overload 
        // Debug - no overload for service_various_slices_destroy 

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "service_various_slices_new")]
        // Debug - write_function_declaration 
        public static partial ResultConstPtrServiceVariousSlicesFFIError service_various_slices_new();

        // Debug - write_function_overload 
        // Debug - no overload for service_various_slices_new 

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "service_various_slices_mut_self")]
        // Debug - write_function_declaration 
        public static partial byte service_various_slices_mut_self(IntPtr _context, SliceU8 slice);

        // Debug - write_function_overload 
        public static unsafe byte service_various_slices_mut_self(IntPtr _context, ReadOnlySpan<byte> slice)
        {
            fixed (void* ptr_slice = slice)
            {
                var slice_slice = new SliceU8(new IntPtr(ptr_slice), (ulong) slice.Length);
                try
                {
                    return service_various_slices_mut_self(_context, slice_slice);
                }
                finally
                {
                }
            }
        }

        // Debug - write_function 
        /// Single line.
        [LibraryImport(NativeLib, EntryPoint = "service_various_slices_mut_self_void")]
        // Debug - write_function_declaration 
        public static partial void service_various_slices_mut_self_void(IntPtr _context, SliceBool slice);

        // Debug - write_function_overload 
        /// Single line.
        public static unsafe void service_various_slices_mut_self_void(IntPtr _context, ReadOnlySpan<Bool> slice)
        {
            fixed (void* ptr_slice = slice)
            {
                var slice_slice = new SliceBool(new IntPtr(ptr_slice), (ulong) slice.Length);
                try
                {
                    service_various_slices_mut_self_void(_context, slice_slice);
                }
                finally
                {
                }
            }
        }

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "service_various_slices_mut_self_ref")]
        // Debug - write_function_declaration 
        public static partial byte service_various_slices_mut_self_ref(IntPtr _context, ref byte x, out byte y);

        // Debug - write_function_overload 
        // Debug - no overload for service_various_slices_mut_self_ref 

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "service_various_slices_mut_self_ref_slice")]
        // Debug - write_function_declaration 
        public static partial byte service_various_slices_mut_self_ref_slice(IntPtr _context, ref byte x, out byte y, SliceU8 slice);

        // Debug - write_function_overload 
        public static unsafe byte service_various_slices_mut_self_ref_slice(IntPtr _context, ref byte x, out byte y, ReadOnlySpan<byte> slice)
        {
            fixed (void* ptr_slice = slice)
            {
                var slice_slice = new SliceU8(new IntPtr(ptr_slice), (ulong) slice.Length);
                try
                {
                    return service_various_slices_mut_self_ref_slice(_context, ref x, out y, slice_slice);
                }
                finally
                {
                }
            }
        }

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "service_various_slices_mut_self_ref_slice_limited")]
        // Debug - write_function_declaration 
        public static partial byte service_various_slices_mut_self_ref_slice_limited(IntPtr _context, ref byte x, out byte y, SliceU8 slice, SliceU8 slice2);

        // Debug - write_function_overload 
        public static unsafe byte service_various_slices_mut_self_ref_slice_limited(IntPtr _context, ref byte x, out byte y, ReadOnlySpan<byte> slice, ReadOnlySpan<byte> slice2)
        {
            fixed (void* ptr_slice = slice)
            {
                var slice_slice = new SliceU8(new IntPtr(ptr_slice), (ulong) slice.Length);
                fixed (void* ptr_slice2 = slice2)
                {
                    var slice2_slice = new SliceU8(new IntPtr(ptr_slice2), (ulong) slice2.Length);
                    try
                    {
                        return service_various_slices_mut_self_ref_slice_limited(_context, ref x, out y, slice_slice, slice2_slice);
                    }
                    finally
                    {
                    }
                }
            }
        }

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "service_various_slices_mut_self_ffi_error")]
        // Debug - write_function_declaration 
        public static partial ResultFFIError service_various_slices_mut_self_ffi_error(IntPtr _context, SliceMutU8 slice);

        // Debug - write_function_overload 
        public static unsafe ResultFFIError service_various_slices_mut_self_ffi_error(IntPtr _context, Span<byte> slice)
        {
            fixed (void* ptr_slice = slice)
            {
                var slice_slice = new SliceMutU8(new IntPtr(ptr_slice), (ulong) slice.Length);
                try
                {
                    return service_various_slices_mut_self_ffi_error(_context, slice_slice);
                }
                finally
                {
                }
            }
        }

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "service_various_slices_mut_self_no_error")]
        // Debug - write_function_declaration 
        public static partial ResultFFIError service_various_slices_mut_self_no_error(IntPtr _context, SliceMutU8 slice);

        // Debug - write_function_overload 
        public static unsafe ResultFFIError service_various_slices_mut_self_no_error(IntPtr _context, Span<byte> slice)
        {
            fixed (void* ptr_slice = slice)
            {
                var slice_slice = new SliceMutU8(new IntPtr(ptr_slice), (ulong) slice.Length);
                try
                {
                    return service_various_slices_mut_self_no_error(_context, slice_slice);
                }
                finally
                {
                }
            }
        }

        // Debug - write_function 
        /// Warning, you _must_ discard the returned slice object before calling into this service
        /// again, as otherwise undefined behavior might happen.
        [LibraryImport(NativeLib, EntryPoint = "service_various_slices_return_slice")]
        // Debug - write_function_declaration 
        public static partial SliceU32 service_various_slices_return_slice(IntPtr _context);

        // Debug - write_function_overload 
        // Debug - no overload for service_various_slices_return_slice 

        // Debug - write_function 
        /// Warning, you _must_ discard the returned slice object before calling into this service
        /// again, as otherwise undefined behavior might happen.
        [LibraryImport(NativeLib, EntryPoint = "service_various_slices_return_slice_mut")]
        // Debug - write_function_declaration 
        public static partial SliceMutU32 service_various_slices_return_slice_mut(IntPtr _context);

        // Debug - write_function_overload 
        // Debug - no overload for service_various_slices_return_slice_mut 

        // Debug - write_function 
        /// Destroys the given instance.
        ///
        /// # Safety
        ///
        /// The passed parameter MUST have been created with the corresponding init function;
        /// passing any other value results in undefined behavior.
        [LibraryImport(NativeLib, EntryPoint = "service_strings_destroy")]
        // Debug - write_function_declaration 
        public static partial ResultConstPtrServiceStringsFFIError service_strings_destroy(IntPtr _context);

        // Debug - write_function_overload 
        // Debug - no overload for service_strings_destroy 

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "service_strings_new")]
        // Debug - write_function_declaration 
        public static partial ResultConstPtrServiceStringsFFIError service_strings_new();

        // Debug - write_function_overload 
        // Debug - no overload for service_strings_new 

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "service_strings_pass_string")]
        // Debug - write_function_declaration 
        public static partial void service_strings_pass_string(IntPtr _context, [MarshalAs(UnmanagedType.LPStr)] string anon1);

        // Debug - write_function_overload 
        // Debug - no overload for service_strings_pass_string 

        // Debug - write_function 
        [LibraryImport(NativeLib, EntryPoint = "service_strings_return_string")]
        // Debug - write_function_declaration 
        public static partial IntPtr service_strings_return_string(IntPtr _context);

        // Debug - write_function_overload 
        // Debug - no overload for service_strings_return_string 

    }

    // Debug - write_type_definition_enum 
    /// Documented enum.
    public enum EnumDocumented
    {
        /// Variant A.
        A = 0,
        /// Variant B.
        B = 1,
        /// Variant B.
        C = 2,
    }

    // Debug - write_type_definition_enum 
    public enum EnumRenamed
    {
        X = 0,
    }

    // Debug - write_type_definition_composite 
    public partial struct Array
    {
        public byte[] data;
    }

    // Debug - write_type_definition_composite_marshaller 
    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct Array
    {
        public Array(Array other)
        {
            data = other.data;
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            // Debug - write_type_definition_composite_unmanaged_body_field 
            public fixed byte data[16];
        }

        [CustomMarshaller(typeof(Array), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private Array _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(Array managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(Array managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                // Debug - write_type_definition_composite_marshaller_unmanaged_invoke 
                fixed(byte* _fixed = _unmanaged.data)
                {
                    if (_managed.data == null) { throw new InvalidOperationException("Array 'data' must not be null"); }
                    if (_managed.data.Length != 16) { throw new InvalidOperationException("Array size mismatch for 'data'"); }
                    var src = new ReadOnlySpan<byte>(_managed.data, 0, 16);
                    var dst = new Span<byte>(_fixed, 16);
                    src.CopyTo(dst);
                }

                return _unmanaged;
            }

            public unsafe Array ToManaged()
            {
                _managed = new Array();

                // Debug - write_type_definition_composite_marshaller_field_from_unmanaged 
                fixed(byte* _fixed = _unmanaged.data)
                {
                    _managed.data = new byte[16];
                    var src = new ReadOnlySpan<byte>(_fixed, 16);
                    var dst = new Span<byte>(_managed.data, 0, 16);
                    src.CopyTo(dst);
                }

                return _managed;
            }
            public void Free() { }
        }
    }

    // Debug - write_type_definition_composite 
    public partial struct BoolField
    {
        public bool val;
    }

    // Debug - write_type_definition_composite_marshaller 
    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct BoolField
    {
        public BoolField(BoolField other)
        {
            val = other.val;
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            // Debug - write_type_definition_composite_unmanaged_body_field 
            public sbyte val;
        }

        [CustomMarshaller(typeof(BoolField), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private BoolField _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(BoolField managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(BoolField managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                // Debug - write_type_definition_composite_marshaller_unmanaged_invoke 
                _unmanaged.val = (sbyte) (_managed.val ? 1 : 0);

                return _unmanaged;
            }

            public unsafe BoolField ToManaged()
            {
                _managed = new BoolField();

                // Debug - write_type_definition_composite_marshaller_field_from_unmanaged 
                _managed.val = _unmanaged.val == 1 ? true : false;

                return _managed;
            }
            public void Free() { }
        }
    }

    // Debug - write_type_definition_composite 
    public partial struct CallbackTable
    {
        public MyCallback my_callback;
        public MyCallbackNamespaced my_callback_namespaced;
        public MyCallbackVoid my_callback_void;
        public MyCallbackContextual my_callback_contextual;
        public SumDelegate1 sum_delegate_1;
        public SumDelegate2 sum_delegate_2;
        public SumDelegateReturn sum_delegate_return;
        public SumDelegateReturn2 sum_delegate_return_2;
    }

    // Debug - write_type_definition_composite_marshaller 
    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct CallbackTable
    {
        public CallbackTable(CallbackTable other)
        {
            my_callback = other.my_callback;
            my_callback_namespaced = other.my_callback_namespaced;
            my_callback_void = other.my_callback_void;
            my_callback_contextual = other.my_callback_contextual;
            sum_delegate_1 = other.sum_delegate_1;
            sum_delegate_2 = other.sum_delegate_2;
            sum_delegate_return = other.sum_delegate_return;
            sum_delegate_return_2 = other.sum_delegate_return_2;
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            // Debug - write_type_definition_composite_unmanaged_body_field 
            public MyCallback.Unmanaged my_callback;
            // Debug - write_type_definition_composite_unmanaged_body_field 
            public MyCallbackNamespaced.Unmanaged my_callback_namespaced;
            // Debug - write_type_definition_composite_unmanaged_body_field 
            public MyCallbackVoid.Unmanaged my_callback_void;
            // Debug - write_type_definition_composite_unmanaged_body_field 
            public MyCallbackContextual.Unmanaged my_callback_contextual;
            // Debug - write_type_definition_composite_unmanaged_body_field 
            public SumDelegate1.Unmanaged sum_delegate_1;
            // Debug - write_type_definition_composite_unmanaged_body_field 
            public SumDelegate2.Unmanaged sum_delegate_2;
            // Debug - write_type_definition_composite_unmanaged_body_field 
            public SumDelegateReturn.Unmanaged sum_delegate_return;
            // Debug - write_type_definition_composite_unmanaged_body_field 
            public SumDelegateReturn2.Unmanaged sum_delegate_return_2;
        }

        [CustomMarshaller(typeof(CallbackTable), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private CallbackTable _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(CallbackTable managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(CallbackTable managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                // Debug - write_type_definition_composite_marshaller_unmanaged_invoke 
                var _my_callback = new MyCallback.Marshaller(_managed.my_callback);
                _unmanaged.my_callback = _my_callback.ToUnmanaged();
                // Debug - write_type_definition_composite_marshaller_unmanaged_invoke 
                var _my_callback_namespaced = new MyCallbackNamespaced.Marshaller(_managed.my_callback_namespaced);
                _unmanaged.my_callback_namespaced = _my_callback_namespaced.ToUnmanaged();
                // Debug - write_type_definition_composite_marshaller_unmanaged_invoke 
                var _my_callback_void = new MyCallbackVoid.Marshaller(_managed.my_callback_void);
                _unmanaged.my_callback_void = _my_callback_void.ToUnmanaged();
                // Debug - write_type_definition_composite_marshaller_unmanaged_invoke 
                var _my_callback_contextual = new MyCallbackContextual.Marshaller(_managed.my_callback_contextual);
                _unmanaged.my_callback_contextual = _my_callback_contextual.ToUnmanaged();
                // Debug - write_type_definition_composite_marshaller_unmanaged_invoke 
                var _sum_delegate_1 = new SumDelegate1.Marshaller(_managed.sum_delegate_1);
                _unmanaged.sum_delegate_1 = _sum_delegate_1.ToUnmanaged();
                // Debug - write_type_definition_composite_marshaller_unmanaged_invoke 
                var _sum_delegate_2 = new SumDelegate2.Marshaller(_managed.sum_delegate_2);
                _unmanaged.sum_delegate_2 = _sum_delegate_2.ToUnmanaged();
                // Debug - write_type_definition_composite_marshaller_unmanaged_invoke 
                var _sum_delegate_return = new SumDelegateReturn.Marshaller(_managed.sum_delegate_return);
                _unmanaged.sum_delegate_return = _sum_delegate_return.ToUnmanaged();
                // Debug - write_type_definition_composite_marshaller_unmanaged_invoke 
                var _sum_delegate_return_2 = new SumDelegateReturn2.Marshaller(_managed.sum_delegate_return_2);
                _unmanaged.sum_delegate_return_2 = _sum_delegate_return_2.ToUnmanaged();

                return _unmanaged;
            }

            public unsafe CallbackTable ToManaged()
            {
                _managed = new CallbackTable();

                // Debug - write_type_definition_composite_marshaller_field_from_unmanaged 
                var _my_callback = new MyCallback.Marshaller(_unmanaged.my_callback);
                _managed.my_callback = _my_callback.ToManaged();
                // Debug - write_type_definition_composite_marshaller_field_from_unmanaged 
                var _my_callback_namespaced = new MyCallbackNamespaced.Marshaller(_unmanaged.my_callback_namespaced);
                _managed.my_callback_namespaced = _my_callback_namespaced.ToManaged();
                // Debug - write_type_definition_composite_marshaller_field_from_unmanaged 
                var _my_callback_void = new MyCallbackVoid.Marshaller(_unmanaged.my_callback_void);
                _managed.my_callback_void = _my_callback_void.ToManaged();
                // Debug - write_type_definition_composite_marshaller_field_from_unmanaged 
                var _my_callback_contextual = new MyCallbackContextual.Marshaller(_unmanaged.my_callback_contextual);
                _managed.my_callback_contextual = _my_callback_contextual.ToManaged();
                // Debug - write_type_definition_composite_marshaller_field_from_unmanaged 
                var _sum_delegate_1 = new SumDelegate1.Marshaller(_unmanaged.sum_delegate_1);
                _managed.sum_delegate_1 = _sum_delegate_1.ToManaged();
                // Debug - write_type_definition_composite_marshaller_field_from_unmanaged 
                var _sum_delegate_2 = new SumDelegate2.Marshaller(_unmanaged.sum_delegate_2);
                _managed.sum_delegate_2 = _sum_delegate_2.ToManaged();
                // Debug - write_type_definition_composite_marshaller_field_from_unmanaged 
                var _sum_delegate_return = new SumDelegateReturn.Marshaller(_unmanaged.sum_delegate_return);
                _managed.sum_delegate_return = _sum_delegate_return.ToManaged();
                // Debug - write_type_definition_composite_marshaller_field_from_unmanaged 
                var _sum_delegate_return_2 = new SumDelegateReturn2.Marshaller(_unmanaged.sum_delegate_return_2);
                _managed.sum_delegate_return_2 = _sum_delegate_return_2.ToManaged();

                return _managed;
            }
            public void Free() { }
        }
    }

    // Debug - write_type_definition_composite 
    public partial struct CharArray
    {
        public FixedString str;
        public FixedString str_2;
    }

    // Debug - write_type_definition_composite_marshaller 
    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct CharArray
    {
        public CharArray(CharArray other)
        {
            str = other.str;
            str_2 = other.str_2;
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            // Debug - write_type_definition_composite_unmanaged_body_field 
            public FixedString.Unmanaged str;
            // Debug - write_type_definition_composite_unmanaged_body_field 
            public FixedString.Unmanaged str_2;
        }

        [CustomMarshaller(typeof(CharArray), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private CharArray _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(CharArray managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(CharArray managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                // Debug - write_type_definition_composite_marshaller_unmanaged_invoke 
                var _str = new FixedString.Marshaller(_managed.str);
                _unmanaged.str = _str.ToUnmanaged();
                // Debug - write_type_definition_composite_marshaller_unmanaged_invoke 
                var _str_2 = new FixedString.Marshaller(_managed.str_2);
                _unmanaged.str_2 = _str_2.ToUnmanaged();

                return _unmanaged;
            }

            public unsafe CharArray ToManaged()
            {
                _managed = new CharArray();

                // Debug - write_type_definition_composite_marshaller_field_from_unmanaged 
                var _str = new FixedString.Marshaller(_unmanaged.str);
                _managed.str = _str.ToManaged();
                // Debug - write_type_definition_composite_marshaller_field_from_unmanaged 
                var _str_2 = new FixedString.Marshaller(_unmanaged.str_2);
                _managed.str_2 = _str_2.ToManaged();

                return _managed;
            }
            public void Free() { }
        }
    }

    // Debug - write_type_definition_composite 
    public partial struct Container
    {
        public Local foreign;
    }

    // Debug - write_type_definition_composite_marshaller 
    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct Container
    {
        public Container(Container other)
        {
            foreign = other.foreign;
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            // Debug - write_type_definition_composite_unmanaged_body_field 
            public Local.Unmanaged foreign;
        }

        [CustomMarshaller(typeof(Container), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private Container _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(Container managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(Container managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                // Debug - write_type_definition_composite_marshaller_unmanaged_invoke 
                var _foreign = new Local.Marshaller(_managed.foreign);
                _unmanaged.foreign = _foreign.ToUnmanaged();

                return _unmanaged;
            }

            public unsafe Container ToManaged()
            {
                _managed = new Container();

                // Debug - write_type_definition_composite_marshaller_field_from_unmanaged 
                var _foreign = new Local.Marshaller(_unmanaged.foreign);
                _managed.foreign = _foreign.ToManaged();

                return _managed;
            }
            public void Free() { }
        }
    }

    // Debug - write_type_definition_composite 
    public partial struct ExtraTypef32
    {
        public float x;
    }

    // Debug - write_type_definition_composite_marshaller 
    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct ExtraTypef32
    {
        public ExtraTypef32(ExtraTypef32 other)
        {
            x = other.x;
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            // Debug - write_type_definition_composite_unmanaged_body_field 
            public float x;
        }

        [CustomMarshaller(typeof(ExtraTypef32), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private ExtraTypef32 _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(ExtraTypef32 managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(ExtraTypef32 managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                // Debug - write_type_definition_composite_marshaller_unmanaged_invoke 
                _unmanaged.x = _managed.x;

                return _unmanaged;
            }

            public unsafe ExtraTypef32 ToManaged()
            {
                _managed = new ExtraTypef32();

                // Debug - write_type_definition_composite_marshaller_field_from_unmanaged 
                _managed.x = _unmanaged.x;

                return _managed;
            }
            public void Free() { }
        }
    }

    // Debug - write_type_definition_composite 
    public partial struct FixedString
    {
        public byte[] data;
    }

    // Debug - write_type_definition_composite_marshaller 
    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct FixedString
    {
        public FixedString(FixedString other)
        {
            data = other.data;
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            // Debug - write_type_definition_composite_unmanaged_body_field 
            public fixed byte data[32];
        }

        [CustomMarshaller(typeof(FixedString), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private FixedString _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(FixedString managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(FixedString managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                // Debug - write_type_definition_composite_marshaller_unmanaged_invoke 
                fixed(byte* _fixed = _unmanaged.data)
                {
                    if (_managed.data == null) { throw new InvalidOperationException("Array 'data' must not be null"); }
                    if (_managed.data.Length != 32) { throw new InvalidOperationException("Array size mismatch for 'data'"); }
                    var src = new ReadOnlySpan<byte>(_managed.data, 0, 32);
                    var dst = new Span<byte>(_fixed, 32);
                    src.CopyTo(dst);
                }

                return _unmanaged;
            }

            public unsafe FixedString ToManaged()
            {
                _managed = new FixedString();

                // Debug - write_type_definition_composite_marshaller_field_from_unmanaged 
                fixed(byte* _fixed = _unmanaged.data)
                {
                    _managed.data = new byte[32];
                    var src = new ReadOnlySpan<byte>(_fixed, 32);
                    var dst = new Span<byte>(_managed.data, 0, 32);
                    src.CopyTo(dst);
                }

                return _managed;
            }
            public void Free() { }
        }
    }

    // Debug - write_type_definition_composite 
    public partial struct Genericu32
    {
        public IntPtr x;
    }

    // Debug - write_type_definition_composite_marshaller 
    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct Genericu32
    {
        public Genericu32(Genericu32 other)
        {
            x = other.x;
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            // Debug - write_type_definition_composite_unmanaged_body_field 
            public IntPtr x;
        }

        [CustomMarshaller(typeof(Genericu32), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private Genericu32 _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(Genericu32 managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(Genericu32 managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                // Debug - write_type_definition_composite_marshaller_unmanaged_invoke 
                _unmanaged.x = _managed.x;

                return _unmanaged;
            }

            public unsafe Genericu32 ToManaged()
            {
                _managed = new Genericu32();

                // Debug - write_type_definition_composite_marshaller_field_from_unmanaged 
                _managed.x = _unmanaged.x;

                return _managed;
            }
            public void Free() { }
        }
    }

    // Debug - write_type_definition_composite 
    public partial struct Genericu8
    {
        public IntPtr x;
    }

    // Debug - write_type_definition_composite_marshaller 
    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct Genericu8
    {
        public Genericu8(Genericu8 other)
        {
            x = other.x;
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            // Debug - write_type_definition_composite_unmanaged_body_field 
            public IntPtr x;
        }

        [CustomMarshaller(typeof(Genericu8), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private Genericu8 _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(Genericu8 managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(Genericu8 managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                // Debug - write_type_definition_composite_marshaller_unmanaged_invoke 
                _unmanaged.x = _managed.x;

                return _unmanaged;
            }

            public unsafe Genericu8 ToManaged()
            {
                _managed = new Genericu8();

                // Debug - write_type_definition_composite_marshaller_field_from_unmanaged 
                _managed.x = _unmanaged.x;

                return _managed;
            }
            public void Free() { }
        }
    }

    // Debug - write_type_definition_composite 
    public partial struct Inner
    {
        float x;
    }

    // Debug - write_type_definition_composite_marshaller 
    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct Inner
    {
        public Inner(Inner other)
        {
            x = other.x;
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            // Debug - write_type_definition_composite_unmanaged_body_field 
            public float x;
        }

        [CustomMarshaller(typeof(Inner), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private Inner _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(Inner managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(Inner managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                // Debug - write_type_definition_composite_marshaller_unmanaged_invoke 
                _unmanaged.x = _managed.x;

                return _unmanaged;
            }

            public unsafe Inner ToManaged()
            {
                _managed = new Inner();

                // Debug - write_type_definition_composite_marshaller_field_from_unmanaged 
                _managed.x = _unmanaged.x;

                return _managed;
            }
            public void Free() { }
        }
    }

    // Debug - write_type_definition_composite 
    public partial struct Local
    {
        uint x;
    }

    // Debug - write_type_definition_composite_marshaller 
    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct Local
    {
        public Local(Local other)
        {
            x = other.x;
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            // Debug - write_type_definition_composite_unmanaged_body_field 
            public uint x;
        }

        [CustomMarshaller(typeof(Local), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private Local _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(Local managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(Local managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                // Debug - write_type_definition_composite_marshaller_unmanaged_invoke 
                _unmanaged.x = _managed.x;

                return _unmanaged;
            }

            public unsafe Local ToManaged()
            {
                _managed = new Local();

                // Debug - write_type_definition_composite_marshaller_field_from_unmanaged 
                _managed.x = _unmanaged.x;

                return _managed;
            }
            public void Free() { }
        }
    }

    // Debug - write_type_definition_composite 
    public partial struct NestedArray
    {
        public EnumRenamed field_enum;
        public Vec3f32 field_vec;
        public bool field_bool;
        public int field_int;
        public ushort[] field_array;
        public ushort[] field_array_2;
        public Array field_struct;
    }

    // Debug - write_type_definition_composite_marshaller 
    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct NestedArray
    {
        public NestedArray(NestedArray other)
        {
            field_enum = other.field_enum;
            field_vec = other.field_vec;
            field_bool = other.field_bool;
            field_int = other.field_int;
            field_array = other.field_array;
            field_array_2 = other.field_array_2;
            field_struct = other.field_struct;
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            // Debug - write_type_definition_composite_unmanaged_body_field 
            public EnumRenamed field_enum;
            // Debug - write_type_definition_composite_unmanaged_body_field 
            public Vec3f32.Unmanaged field_vec;
            // Debug - write_type_definition_composite_unmanaged_body_field 
            public sbyte field_bool;
            // Debug - write_type_definition_composite_unmanaged_body_field 
            public int field_int;
            // Debug - write_type_definition_composite_unmanaged_body_field 
            public fixed ushort field_array[5];
            // Debug - write_type_definition_composite_unmanaged_body_field 
            public fixed ushort field_array_2[5];
            // Debug - write_type_definition_composite_unmanaged_body_field 
            public Array.Unmanaged field_struct;
        }

        [CustomMarshaller(typeof(NestedArray), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private NestedArray _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(NestedArray managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(NestedArray managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                // Debug - write_type_definition_composite_marshaller_unmanaged_invoke 
                _unmanaged.field_enum = _managed.field_enum;
                // Debug - write_type_definition_composite_marshaller_unmanaged_invoke 
                var _field_vec = new Vec3f32.Marshaller(_managed.field_vec);
                _unmanaged.field_vec = _field_vec.ToUnmanaged();
                // Debug - write_type_definition_composite_marshaller_unmanaged_invoke 
                _unmanaged.field_bool = (sbyte) (_managed.field_bool ? 1 : 0);
                // Debug - write_type_definition_composite_marshaller_unmanaged_invoke 
                _unmanaged.field_int = _managed.field_int;
                // Debug - write_type_definition_composite_marshaller_unmanaged_invoke 
                fixed(ushort* _fixed = _unmanaged.field_array)
                {
                    if (_managed.field_array == null) { throw new InvalidOperationException("Array 'field_array' must not be null"); }
                    if (_managed.field_array.Length != 5) { throw new InvalidOperationException("Array size mismatch for 'field_array'"); }
                    var src = new ReadOnlySpan<ushort>(_managed.field_array, 0, 5);
                    var dst = new Span<ushort>(_fixed, 5);
                    src.CopyTo(dst);
                }
                // Debug - write_type_definition_composite_marshaller_unmanaged_invoke 
                fixed(ushort* _fixed = _unmanaged.field_array_2)
                {
                    if (_managed.field_array_2 == null) { throw new InvalidOperationException("Array 'field_array_2' must not be null"); }
                    if (_managed.field_array_2.Length != 5) { throw new InvalidOperationException("Array size mismatch for 'field_array_2'"); }
                    var src = new ReadOnlySpan<ushort>(_managed.field_array_2, 0, 5);
                    var dst = new Span<ushort>(_fixed, 5);
                    src.CopyTo(dst);
                }
                // Debug - write_type_definition_composite_marshaller_unmanaged_invoke 
                var _field_struct = new Array.Marshaller(_managed.field_struct);
                _unmanaged.field_struct = _field_struct.ToUnmanaged();

                return _unmanaged;
            }

            public unsafe NestedArray ToManaged()
            {
                _managed = new NestedArray();

                // Debug - write_type_definition_composite_marshaller_field_from_unmanaged 
                _managed.field_enum = _unmanaged.field_enum;
                // Debug - write_type_definition_composite_marshaller_field_from_unmanaged 
                var _field_vec = new Vec3f32.Marshaller(_unmanaged.field_vec);
                _managed.field_vec = _field_vec.ToManaged();
                // Debug - write_type_definition_composite_marshaller_field_from_unmanaged 
                _managed.field_bool = _unmanaged.field_bool == 1 ? true : false;
                // Debug - write_type_definition_composite_marshaller_field_from_unmanaged 
                _managed.field_int = _unmanaged.field_int;
                // Debug - write_type_definition_composite_marshaller_field_from_unmanaged 
                fixed(ushort* _fixed = _unmanaged.field_array)
                {
                    _managed.field_array = new ushort[5];
                    var src = new ReadOnlySpan<ushort>(_fixed, 5);
                    var dst = new Span<ushort>(_managed.field_array, 0, 5);
                    src.CopyTo(dst);
                }
                // Debug - write_type_definition_composite_marshaller_field_from_unmanaged 
                fixed(ushort* _fixed = _unmanaged.field_array_2)
                {
                    _managed.field_array_2 = new ushort[5];
                    var src = new ReadOnlySpan<ushort>(_fixed, 5);
                    var dst = new Span<ushort>(_managed.field_array_2, 0, 5);
                    src.CopyTo(dst);
                }
                // Debug - write_type_definition_composite_marshaller_field_from_unmanaged 
                var _field_struct = new Array.Marshaller(_unmanaged.field_struct);
                _managed.field_struct = _field_struct.ToManaged();

                return _managed;
            }
            public void Free() { }
        }
    }

    // Debug - write_type_definition_composite 
    public partial struct Packed1
    {
        public byte x;
        public ushort y;
    }

    // Debug - write_type_definition_composite_marshaller 
    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct Packed1
    {
        public Packed1(Packed1 other)
        {
            x = other.x;
            y = other.y;
        }

        [StructLayout(LayoutKind.Sequential, Pack = 1)]
        public unsafe struct Unmanaged
        {
            // Debug - write_type_definition_composite_unmanaged_body_field 
            public byte x;
            // Debug - write_type_definition_composite_unmanaged_body_field 
            public ushort y;
        }

        [CustomMarshaller(typeof(Packed1), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private Packed1 _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(Packed1 managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(Packed1 managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                // Debug - write_type_definition_composite_marshaller_unmanaged_invoke 
                _unmanaged.x = _managed.x;
                // Debug - write_type_definition_composite_marshaller_unmanaged_invoke 
                _unmanaged.y = _managed.y;

                return _unmanaged;
            }

            public unsafe Packed1 ToManaged()
            {
                _managed = new Packed1();

                // Debug - write_type_definition_composite_marshaller_field_from_unmanaged 
                _managed.x = _unmanaged.x;
                // Debug - write_type_definition_composite_marshaller_field_from_unmanaged 
                _managed.y = _unmanaged.y;

                return _managed;
            }
            public void Free() { }
        }
    }

    // Debug - write_type_definition_composite 
    public partial struct Packed2
    {
        public ushort y;
        public byte x;
    }

    // Debug - write_type_definition_composite_marshaller 
    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct Packed2
    {
        public Packed2(Packed2 other)
        {
            y = other.y;
            x = other.x;
        }

        [StructLayout(LayoutKind.Sequential, Pack = 1)]
        public unsafe struct Unmanaged
        {
            // Debug - write_type_definition_composite_unmanaged_body_field 
            public ushort y;
            // Debug - write_type_definition_composite_unmanaged_body_field 
            public byte x;
        }

        [CustomMarshaller(typeof(Packed2), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private Packed2 _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(Packed2 managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(Packed2 managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                // Debug - write_type_definition_composite_marshaller_unmanaged_invoke 
                _unmanaged.y = _managed.y;
                // Debug - write_type_definition_composite_marshaller_unmanaged_invoke 
                _unmanaged.x = _managed.x;

                return _unmanaged;
            }

            public unsafe Packed2 ToManaged()
            {
                _managed = new Packed2();

                // Debug - write_type_definition_composite_marshaller_field_from_unmanaged 
                _managed.y = _unmanaged.y;
                // Debug - write_type_definition_composite_marshaller_field_from_unmanaged 
                _managed.x = _unmanaged.x;

                return _managed;
            }
            public void Free() { }
        }
    }

    // Debug - write_type_definition_composite 
    public partial struct Phantomu8
    {
        public uint x;
    }

    // Debug - write_type_definition_composite_marshaller 
    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct Phantomu8
    {
        public Phantomu8(Phantomu8 other)
        {
            x = other.x;
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            // Debug - write_type_definition_composite_unmanaged_body_field 
            public uint x;
        }

        [CustomMarshaller(typeof(Phantomu8), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private Phantomu8 _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(Phantomu8 managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(Phantomu8 managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                // Debug - write_type_definition_composite_marshaller_unmanaged_invoke 
                _unmanaged.x = _managed.x;

                return _unmanaged;
            }

            public unsafe Phantomu8 ToManaged()
            {
                _managed = new Phantomu8();

                // Debug - write_type_definition_composite_marshaller_field_from_unmanaged 
                _managed.x = _unmanaged.x;

                return _managed;
            }
            public void Free() { }
        }
    }

    // Debug - write_type_definition_composite 
    /// Documented struct.
    public partial struct StructDocumented
    {
        /// Documented field.
        public float x;
    }

    // Debug - write_type_definition_composite_marshaller 
    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct StructDocumented
    {
        public StructDocumented(StructDocumented other)
        {
            x = other.x;
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            // Debug - write_type_definition_composite_unmanaged_body_field 
            public float x;
        }

        [CustomMarshaller(typeof(StructDocumented), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private StructDocumented _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(StructDocumented managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(StructDocumented managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                // Debug - write_type_definition_composite_marshaller_unmanaged_invoke 
                _unmanaged.x = _managed.x;

                return _unmanaged;
            }

            public unsafe StructDocumented ToManaged()
            {
                _managed = new StructDocumented();

                // Debug - write_type_definition_composite_marshaller_field_from_unmanaged 
                _managed.x = _unmanaged.x;

                return _managed;
            }
            public void Free() { }
        }
    }

    // Debug - write_type_definition_composite 
    public partial struct StructRenamed
    {
        public EnumRenamed e;
    }

    // Debug - write_type_definition_composite_marshaller 
    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct StructRenamed
    {
        public StructRenamed(StructRenamed other)
        {
            e = other.e;
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            // Debug - write_type_definition_composite_unmanaged_body_field 
            public EnumRenamed e;
        }

        [CustomMarshaller(typeof(StructRenamed), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private StructRenamed _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(StructRenamed managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(StructRenamed managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                // Debug - write_type_definition_composite_marshaller_unmanaged_invoke 
                _unmanaged.e = _managed.e;

                return _unmanaged;
            }

            public unsafe StructRenamed ToManaged()
            {
                _managed = new StructRenamed();

                // Debug - write_type_definition_composite_marshaller_field_from_unmanaged 
                _managed.e = _unmanaged.e;

                return _managed;
            }
            public void Free() { }
        }
    }

    // Debug - write_type_definition_composite 
    public partial struct Tupled
    {
        public byte x0;
    }

    // Debug - write_type_definition_composite_marshaller 
    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct Tupled
    {
        public Tupled(Tupled other)
        {
            x0 = other.x0;
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            // Debug - write_type_definition_composite_unmanaged_body_field 
            public byte x0;
        }

        [CustomMarshaller(typeof(Tupled), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private Tupled _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(Tupled managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(Tupled managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                // Debug - write_type_definition_composite_marshaller_unmanaged_invoke 
                _unmanaged.x0 = _managed.x0;

                return _unmanaged;
            }

            public unsafe Tupled ToManaged()
            {
                _managed = new Tupled();

                // Debug - write_type_definition_composite_marshaller_field_from_unmanaged 
                _managed.x0 = _unmanaged.x0;

                return _managed;
            }
            public void Free() { }
        }
    }

    // Debug - write_type_definition_composite 
    public partial struct UseCStrPtr
    {
        public string ascii_string;
    }

    // Debug - write_type_definition_composite_marshaller 
    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct UseCStrPtr
    {
        public UseCStrPtr(UseCStrPtr other)
        {
            ascii_string = other.ascii_string;
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            // Debug - write_type_definition_composite_unmanaged_body_field 
            public IntPtr ascii_string;
        }

        [CustomMarshaller(typeof(UseCStrPtr), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private UseCStrPtr _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(UseCStrPtr managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(UseCStrPtr managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                // Debug - write_type_definition_composite_marshaller_unmanaged_invoke 
                _unmanaged.ascii_string = Marshal.StringToHGlobalAnsi(_managed.ascii_string);

                return _unmanaged;
            }

            public unsafe UseCStrPtr ToManaged()
            {
                _managed = new UseCStrPtr();

                // Debug - write_type_definition_composite_marshaller_field_from_unmanaged 
                _managed.ascii_string = Marshal.PtrToStringAnsi(_unmanaged.ascii_string);

                return _managed;
            }
            public void Free() { }
        }
    }

    // Debug - write_type_definition_composite 
    public partial struct UseUtf8String
    {
        public string s1;
        public string s2;
    }

    // Debug - write_type_definition_composite_marshaller 
    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct UseUtf8String
    {
        public UseUtf8String(UseUtf8String other)
        {
            s1 = other.s1;
            s2 = other.s2;
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            // Debug - write_type_definition_composite_unmanaged_body_field 
            public Utf8String.Unmanaged s1;
            // Debug - write_type_definition_composite_unmanaged_body_field 
            public Utf8String.Unmanaged s2;
        }

        [CustomMarshaller(typeof(UseUtf8String), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private UseUtf8String _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(UseUtf8String managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(UseUtf8String managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                // Debug - write_type_definition_composite_marshaller_unmanaged_invoke 
                var _s1 = new Utf8String.Marshaller(new Utf8String(_managed.s1));
                _unmanaged.s1 = _s1.ToUnmanaged();
                // Debug - write_type_definition_composite_marshaller_unmanaged_invoke 
                var _s2 = new Utf8String.Marshaller(new Utf8String(_managed.s2));
                _unmanaged.s2 = _s2.ToUnmanaged();

                return _unmanaged;
            }

            public unsafe UseUtf8String ToManaged()
            {
                _managed = new UseUtf8String();

                // Debug - write_type_definition_composite_marshaller_field_from_unmanaged 
                var _s1 = new Utf8String.Marshaller(_unmanaged.s1);
                _managed.s1 = _s1.ToManaged().String;
                // Debug - write_type_definition_composite_marshaller_field_from_unmanaged 
                var _s2 = new Utf8String.Marshaller(_unmanaged.s2);
                _managed.s2 = _s2.ToManaged().String;

                return _managed;
            }
            public void Free() { }
        }
    }

    // Debug - write_type_definition_composite 
    public partial struct Vec1
    {
        public float x;
        public float y;
    }

    // Debug - write_type_definition_composite_marshaller 
    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct Vec1
    {
        public Vec1(Vec1 other)
        {
            x = other.x;
            y = other.y;
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            // Debug - write_type_definition_composite_unmanaged_body_field 
            public float x;
            // Debug - write_type_definition_composite_unmanaged_body_field 
            public float y;
        }

        [CustomMarshaller(typeof(Vec1), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private Vec1 _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(Vec1 managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(Vec1 managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                // Debug - write_type_definition_composite_marshaller_unmanaged_invoke 
                _unmanaged.x = _managed.x;
                // Debug - write_type_definition_composite_marshaller_unmanaged_invoke 
                _unmanaged.y = _managed.y;

                return _unmanaged;
            }

            public unsafe Vec1 ToManaged()
            {
                _managed = new Vec1();

                // Debug - write_type_definition_composite_marshaller_field_from_unmanaged 
                _managed.x = _unmanaged.x;
                // Debug - write_type_definition_composite_marshaller_field_from_unmanaged 
                _managed.y = _unmanaged.y;

                return _managed;
            }
            public void Free() { }
        }
    }

    // Debug - write_type_definition_composite 
    public partial struct Vec2
    {
        public double x;
        public double z;
    }

    // Debug - write_type_definition_composite_marshaller 
    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct Vec2
    {
        public Vec2(Vec2 other)
        {
            x = other.x;
            z = other.z;
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            // Debug - write_type_definition_composite_unmanaged_body_field 
            public double x;
            // Debug - write_type_definition_composite_unmanaged_body_field 
            public double z;
        }

        [CustomMarshaller(typeof(Vec2), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private Vec2 _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(Vec2 managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(Vec2 managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                // Debug - write_type_definition_composite_marshaller_unmanaged_invoke 
                _unmanaged.x = _managed.x;
                // Debug - write_type_definition_composite_marshaller_unmanaged_invoke 
                _unmanaged.z = _managed.z;

                return _unmanaged;
            }

            public unsafe Vec2 ToManaged()
            {
                _managed = new Vec2();

                // Debug - write_type_definition_composite_marshaller_field_from_unmanaged 
                _managed.x = _unmanaged.x;
                // Debug - write_type_definition_composite_marshaller_field_from_unmanaged 
                _managed.z = _unmanaged.z;

                return _managed;
            }
            public void Free() { }
        }
    }

    // Debug - write_type_definition_composite 
    public partial struct Vec3f32
    {
        public float x;
        public float y;
        public float z;
    }

    // Debug - write_type_definition_composite_marshaller 
    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct Vec3f32
    {
        public Vec3f32(Vec3f32 other)
        {
            x = other.x;
            y = other.y;
            z = other.z;
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            // Debug - write_type_definition_composite_unmanaged_body_field 
            public float x;
            // Debug - write_type_definition_composite_unmanaged_body_field 
            public float y;
            // Debug - write_type_definition_composite_unmanaged_body_field 
            public float z;
        }

        [CustomMarshaller(typeof(Vec3f32), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private Vec3f32 _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(Vec3f32 managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(Vec3f32 managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                // Debug - write_type_definition_composite_marshaller_unmanaged_invoke 
                _unmanaged.x = _managed.x;
                // Debug - write_type_definition_composite_marshaller_unmanaged_invoke 
                _unmanaged.y = _managed.y;
                // Debug - write_type_definition_composite_marshaller_unmanaged_invoke 
                _unmanaged.z = _managed.z;

                return _unmanaged;
            }

            public unsafe Vec3f32 ToManaged()
            {
                _managed = new Vec3f32();

                // Debug - write_type_definition_composite_marshaller_field_from_unmanaged 
                _managed.x = _unmanaged.x;
                // Debug - write_type_definition_composite_marshaller_field_from_unmanaged 
                _managed.y = _unmanaged.y;
                // Debug - write_type_definition_composite_marshaller_field_from_unmanaged 
                _managed.z = _unmanaged.z;

                return _managed;
            }
            public void Free() { }
        }
    }

    // Debug - write_type_definition_composite 
    public partial struct Visibility1
    {
        public byte pblc;
        byte prvt;
    }

    // Debug - write_type_definition_composite_marshaller 
    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct Visibility1
    {
        public Visibility1(Visibility1 other)
        {
            pblc = other.pblc;
            prvt = other.prvt;
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            // Debug - write_type_definition_composite_unmanaged_body_field 
            public byte pblc;
            // Debug - write_type_definition_composite_unmanaged_body_field 
            public byte prvt;
        }

        [CustomMarshaller(typeof(Visibility1), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private Visibility1 _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(Visibility1 managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(Visibility1 managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                // Debug - write_type_definition_composite_marshaller_unmanaged_invoke 
                _unmanaged.pblc = _managed.pblc;
                // Debug - write_type_definition_composite_marshaller_unmanaged_invoke 
                _unmanaged.prvt = _managed.prvt;

                return _unmanaged;
            }

            public unsafe Visibility1 ToManaged()
            {
                _managed = new Visibility1();

                // Debug - write_type_definition_composite_marshaller_field_from_unmanaged 
                _managed.pblc = _unmanaged.pblc;
                // Debug - write_type_definition_composite_marshaller_field_from_unmanaged 
                _managed.prvt = _unmanaged.prvt;

                return _managed;
            }
            public void Free() { }
        }
    }

    // Debug - write_type_definition_composite 
    public partial struct Visibility2
    {
        public byte pblc1;
        public byte pblc2;
    }

    // Debug - write_type_definition_composite_marshaller 
    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct Visibility2
    {
        public Visibility2(Visibility2 other)
        {
            pblc1 = other.pblc1;
            pblc2 = other.pblc2;
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            // Debug - write_type_definition_composite_unmanaged_body_field 
            public byte pblc1;
            // Debug - write_type_definition_composite_unmanaged_body_field 
            public byte pblc2;
        }

        [CustomMarshaller(typeof(Visibility2), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private Visibility2 _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(Visibility2 managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(Visibility2 managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                // Debug - write_type_definition_composite_marshaller_unmanaged_invoke 
                _unmanaged.pblc1 = _managed.pblc1;
                // Debug - write_type_definition_composite_marshaller_unmanaged_invoke 
                _unmanaged.pblc2 = _managed.pblc2;

                return _unmanaged;
            }

            public unsafe Visibility2 ToManaged()
            {
                _managed = new Visibility2();

                // Debug - write_type_definition_composite_marshaller_field_from_unmanaged 
                _managed.pblc1 = _unmanaged.pblc1;
                // Debug - write_type_definition_composite_marshaller_field_from_unmanaged 
                _managed.pblc2 = _unmanaged.pblc2;

                return _managed;
            }
            public void Free() { }
        }
    }

    // Debug - write_type_definition_composite 
    public partial struct Weird1u32
    {
        uint x;
    }

    // Debug - write_type_definition_composite_marshaller 
    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct Weird1u32
    {
        public Weird1u32(Weird1u32 other)
        {
            x = other.x;
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            // Debug - write_type_definition_composite_unmanaged_body_field 
            public uint x;
        }

        [CustomMarshaller(typeof(Weird1u32), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private Weird1u32 _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(Weird1u32 managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(Weird1u32 managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                // Debug - write_type_definition_composite_marshaller_unmanaged_invoke 
                _unmanaged.x = _managed.x;

                return _unmanaged;
            }

            public unsafe Weird1u32 ToManaged()
            {
                _managed = new Weird1u32();

                // Debug - write_type_definition_composite_marshaller_field_from_unmanaged 
                _managed.x = _unmanaged.x;

                return _managed;
            }
            public void Free() { }
        }
    }

    // Debug - write_type_definition_composite 
    public partial struct Weird2u8
    {
        byte t;
        byte[] a;
        IntPtr r;
    }

    // Debug - write_type_definition_composite_marshaller 
    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct Weird2u8
    {
        public Weird2u8(Weird2u8 other)
        {
            t = other.t;
            a = other.a;
            r = other.r;
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            // Debug - write_type_definition_composite_unmanaged_body_field 
            public byte t;
            // Debug - write_type_definition_composite_unmanaged_body_field 
            public fixed byte a[5];
            // Debug - write_type_definition_composite_unmanaged_body_field 
            public IntPtr r;
        }

        [CustomMarshaller(typeof(Weird2u8), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private Weird2u8 _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(Weird2u8 managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(Weird2u8 managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                // Debug - write_type_definition_composite_marshaller_unmanaged_invoke 
                _unmanaged.t = _managed.t;
                // Debug - write_type_definition_composite_marshaller_unmanaged_invoke 
                fixed(byte* _fixed = _unmanaged.a)
                {
                    if (_managed.a == null) { throw new InvalidOperationException("Array 'a' must not be null"); }
                    if (_managed.a.Length != 5) { throw new InvalidOperationException("Array size mismatch for 'a'"); }
                    var src = new ReadOnlySpan<byte>(_managed.a, 0, 5);
                    var dst = new Span<byte>(_fixed, 5);
                    src.CopyTo(dst);
                }
                // Debug - write_type_definition_composite_marshaller_unmanaged_invoke 
                _unmanaged.r = _managed.r;

                return _unmanaged;
            }

            public unsafe Weird2u8 ToManaged()
            {
                _managed = new Weird2u8();

                // Debug - write_type_definition_composite_marshaller_field_from_unmanaged 
                _managed.t = _unmanaged.t;
                // Debug - write_type_definition_composite_marshaller_field_from_unmanaged 
                fixed(byte* _fixed = _unmanaged.a)
                {
                    _managed.a = new byte[5];
                    var src = new ReadOnlySpan<byte>(_fixed, 5);
                    var dst = new Span<byte>(_managed.a, 0, 5);
                    src.CopyTo(dst);
                }
                // Debug - write_type_definition_composite_marshaller_field_from_unmanaged 
                _managed.r = _unmanaged.r;

                return _managed;
            }
            public void Free() { }
        }
    }

    // Debug - write_type_definition_fn_pointer 
    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate byte InteropDelegate_fn_u8_rval_u8(byte x0);

    // Debug - write_type_definition_fn_pointer 
    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void InteropDelegate_fn_CharArray(CharArray x0);
    public delegate void InteropDelegate_fn_CharArray_native(CharArray x0);

    // Debug - write_type_definition_enum 
    public enum FFIError
    {
        Ok = 0,
        Null = 100,
        Panic = 200,
        Delegate = 300,
        Fail = 400,
    }

    // Debug - write_pattern_result_void 
    public partial struct ResultFFIError
    {
        internal FFIError _err;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct ResultFFIError
    {
        public ResultFFIError(FFIError e) { _err = e; }

        public static ResultFFIError OK => new ResultFFIError(FFIError.Ok);
        public static ResultFFIError NULL => new ResultFFIError(FFIError.Null);
        public static ResultFFIError PANIC => new ResultFFIError(FFIError.Panic);
        public static ResultFFIError DELEGATE => new ResultFFIError(FFIError.Delegate);
        public static ResultFFIError FAIL => new ResultFFIError(FFIError.Fail);

        public void Ok()
        {
            if (_err == FFIError.Ok)
            {
                return;
            }
            throw new InteropException<FFIError>(_err);
        }

        public bool IsOk() { return _err == FFIError.Ok; }
        public FFIError Err() { return _err; }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public FFIError _err;
        }

        [CustomMarshaller(typeof(ResultFFIError), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }


        public ref struct Marshaller
        {
            private ResultFFIError _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(ResultFFIError managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(ResultFFIError managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {
                _unmanaged = new Unmanaged();
                _unmanaged._err = _managed._err;
                return _unmanaged;
            }

            public unsafe ResultFFIError ToManaged()
            {
                _managed = new ResultFFIError();
                _managed._err = _unmanaged._err;
                return _managed;
            }

            public void Free() { }
        }

    }


    // Debug - write_pattern_fast_slice 
    public partial struct SliceUseCStrPtr
    {
        GCHandle _handle;
        IntPtr _data;
        ulong _len;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct SliceUseCStrPtr : IEnumerable<UseCStrPtr>, IDisposable
    {
        public int Count => (int) _len;

        public unsafe ReadOnlySpan<UseCStrPtr> ReadOnlySpan
        {
            get => new(_data.ToPointer(), (int)_len);
        }

        public unsafe UseCStrPtr this[int i]
        {
            get
            {
                if (i >= Count) throw new IndexOutOfRangeException();
                return Unsafe.Read<UseCStrPtr>((void*)IntPtr.Add(_data, i * Unsafe.SizeOf<UseCStrPtr>()));
            }

        }

        public SliceUseCStrPtr(IntPtr data, ulong len)
        {
            _data = data;
            _len = len;
        }

        public SliceUseCStrPtr(UseCStrPtr[] managed)
        {
            _handle = GCHandle.Alloc(managed, GCHandleType.Pinned);
            _data = _handle.AddrOfPinnedObject();
            _len = (ulong) managed.Length;
        }

        public IEnumerator<UseCStrPtr> GetEnumerator()
        {
            for (var i = 0; i < Count; ++i) { yield return this[i]; }
        }

        IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();

        public void Dispose()
        {
            if (_handle is { IsAllocated: true }) { _handle.Free(); }
        }

        [CustomMarshaller(typeof(SliceUseCStrPtr), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            public IntPtr Data;
            public ulong Len;

            public SliceUseCStrPtr Managed()
            {
                return new SliceUseCStrPtr(Data, Len);
            }
        }

        public ref struct Marshaller
        {
            private SliceUseCStrPtr _managed;
            private Unmanaged _unmanaged;

            public void FromManaged(SliceUseCStrPtr managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public Unmanaged ToUnmanaged()
            {
                _unmanaged = new Unmanaged();
                _unmanaged.Data = _managed._data;
                _unmanaged.Len = _managed._len;
                return _unmanaged;
            }

            public unsafe SliceUseCStrPtr ToManaged()
            {
                _managed = new SliceUseCStrPtr();
                _managed._data = _unmanaged.Data;
                _managed._len = _unmanaged.Len;
                return _managed;
            }

            public void Free() { }
        }
    }

    // Debug - write_pattern_marshalling_slice 
    public partial struct SliceUseUtf8String
    {
        UseUtf8String[] _managed;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct SliceUseUtf8String : IEnumerable<UseUtf8String>, IDisposable
    {
        public int Count => _managed?.Length ?? (int) 0;

        public unsafe UseUtf8String this[int i]
        {
            get
            {
                if (i >= Count) throw new IndexOutOfRangeException();
                if (_managed is not null) { return _managed[i]; }
                return default;
            }
        }

        public SliceUseUtf8String(UseUtf8String[] managed)
        {
            _managed = managed;
        }

        public IEnumerator<UseUtf8String> GetEnumerator()
        {
            for (var i = 0; i < Count; ++i) { yield return this[i]; }
        }

        IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();

        public void Dispose() { }

        [CustomMarshaller(typeof(SliceUseUtf8String), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            public IntPtr Data;
            public ulong Len;
        }

        public ref struct Marshaller
        {
            private SliceUseUtf8String _managed;
            private Unmanaged _unmanaged;

            public void FromManaged(SliceUseUtf8String managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {
                var size = sizeof(UseUtf8String.Unmanaged);
                _unmanaged = new Unmanaged();
                _unmanaged.Data = Marshal.AllocHGlobal(size * _managed.Count);
                _unmanaged.Len = (ulong) _managed.Count;
                for (var i = 0; i < _managed.Count; ++i)
                {
                    var _marshaller = new UseUtf8String.Marshaller();
                    _marshaller.FromManaged(new UseUtf8String(_managed._managed[i]));
                    var unmanaged = _marshaller.ToUnmanaged();
                    var dst = IntPtr.Add(_unmanaged.Data, i * size);
                    Marshal.StructureToPtr(unmanaged, dst, false);
                }
                return _unmanaged;
            }

            public unsafe SliceUseUtf8String ToManaged()
            {
                _managed = new SliceUseUtf8String();
                return _managed;
            }

            public void Free() { Marshal.FreeHGlobal(_unmanaged.Data); }
        }
    }

    // Debug - write_pattern_fast_slice 
    public partial struct SliceVec3f32
    {
        GCHandle _handle;
        IntPtr _data;
        ulong _len;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct SliceVec3f32 : IEnumerable<Vec3f32>, IDisposable
    {
        public int Count => (int) _len;

        public unsafe ReadOnlySpan<Vec3f32> ReadOnlySpan
        {
            get => new(_data.ToPointer(), (int)_len);
        }

        public unsafe Vec3f32 this[int i]
        {
            get
            {
                if (i >= Count) throw new IndexOutOfRangeException();
                return Unsafe.Read<Vec3f32>((void*)IntPtr.Add(_data, i * Unsafe.SizeOf<Vec3f32>()));
            }

        }

        public SliceVec3f32(IntPtr data, ulong len)
        {
            _data = data;
            _len = len;
        }

        public SliceVec3f32(Vec3f32[] managed)
        {
            _handle = GCHandle.Alloc(managed, GCHandleType.Pinned);
            _data = _handle.AddrOfPinnedObject();
            _len = (ulong) managed.Length;
        }

        public IEnumerator<Vec3f32> GetEnumerator()
        {
            for (var i = 0; i < Count; ++i) { yield return this[i]; }
        }

        IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();

        public void Dispose()
        {
            if (_handle is { IsAllocated: true }) { _handle.Free(); }
        }

        [CustomMarshaller(typeof(SliceVec3f32), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            public IntPtr Data;
            public ulong Len;

            public SliceVec3f32 Managed()
            {
                return new SliceVec3f32(Data, Len);
            }
        }

        public ref struct Marshaller
        {
            private SliceVec3f32 _managed;
            private Unmanaged _unmanaged;

            public void FromManaged(SliceVec3f32 managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public Unmanaged ToUnmanaged()
            {
                _unmanaged = new Unmanaged();
                _unmanaged.Data = _managed._data;
                _unmanaged.Len = _managed._len;
                return _unmanaged;
            }

            public unsafe SliceVec3f32 ToManaged()
            {
                _managed = new SliceVec3f32();
                _managed._data = _unmanaged.Data;
                _managed._len = _unmanaged.Len;
                return _managed;
            }

            public void Free() { }
        }
    }

    // Debug - write_pattern_fast_slice 
    public partial struct SliceMutCharArray
    {
        GCHandle _handle;
        IntPtr _data;
        ulong _len;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct SliceMutCharArray : IEnumerable<CharArray>, IDisposable
    {
        public int Count => (int) _len;

        public unsafe ReadOnlySpan<CharArray> ReadOnlySpan
        {
            get => new(_data.ToPointer(), (int)_len);
        }

        public unsafe CharArray this[int i]
        {
            get
            {
                if (i >= Count) throw new IndexOutOfRangeException();
                return Unsafe.Read<CharArray>((void*)IntPtr.Add(_data, i * Unsafe.SizeOf<CharArray>()));
            }

            set
            {
                if (i >= Count) throw new IndexOutOfRangeException();
                Unsafe.Write<CharArray>((void*)IntPtr.Add(_data, i * Unsafe.SizeOf<CharArray>()), value);
            }
        }

        public SliceMutCharArray(IntPtr data, ulong len)
        {
            _data = data;
            _len = len;
        }

        public SliceMutCharArray(CharArray[] managed)
        {
            _handle = GCHandle.Alloc(managed, GCHandleType.Pinned);
            _data = _handle.AddrOfPinnedObject();
            _len = (ulong) managed.Length;
        }

        public IEnumerator<CharArray> GetEnumerator()
        {
            for (var i = 0; i < Count; ++i) { yield return this[i]; }
        }

        IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();

        public void Dispose()
        {
            if (_handle is { IsAllocated: true }) { _handle.Free(); }
        }

        [CustomMarshaller(typeof(SliceMutCharArray), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            public IntPtr Data;
            public ulong Len;

            public SliceMutCharArray Managed()
            {
                return new SliceMutCharArray(Data, Len);
            }
        }

        public ref struct Marshaller
        {
            private SliceMutCharArray _managed;
            private Unmanaged _unmanaged;

            public void FromManaged(SliceMutCharArray managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public Unmanaged ToUnmanaged()
            {
                _unmanaged = new Unmanaged();
                _unmanaged.Data = _managed._data;
                _unmanaged.Len = _managed._len;
                return _unmanaged;
            }

            public unsafe SliceMutCharArray ToManaged()
            {
                _managed = new SliceMutCharArray();
                _managed._data = _unmanaged.Data;
                _managed._len = _unmanaged.Len;
                return _managed;
            }

            public void Free() { }
        }
    }

    // Debug - write_type_definition_composite 
    ///Option type containing boolean flag and maybe valid data.
    public partial struct OptionInner
    {
        ///Element that is maybe valid.
        Inner t;
        ///Byte where `1` means element `t` is valid.
        byte is_some;
    }

    // Debug - write_type_definition_composite_marshaller 
    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct OptionInner
    {
        public OptionInner(OptionInner other)
        {
            t = other.t;
            is_some = other.is_some;
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            // Debug - write_type_definition_composite_unmanaged_body_field 
            public Inner.Unmanaged t;
            // Debug - write_type_definition_composite_unmanaged_body_field 
            public byte is_some;
        }

        [CustomMarshaller(typeof(OptionInner), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private OptionInner _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(OptionInner managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(OptionInner managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                // Debug - write_type_definition_composite_marshaller_unmanaged_invoke 
                var _t = new Inner.Marshaller(_managed.t);
                _unmanaged.t = _t.ToUnmanaged();
                // Debug - write_type_definition_composite_marshaller_unmanaged_invoke 
                _unmanaged.is_some = _managed.is_some;

                return _unmanaged;
            }

            public unsafe OptionInner ToManaged()
            {
                _managed = new OptionInner();

                // Debug - write_type_definition_composite_marshaller_field_from_unmanaged 
                var _t = new Inner.Marshaller(_unmanaged.t);
                _managed.t = _t.ToManaged();
                // Debug - write_type_definition_composite_marshaller_field_from_unmanaged 
                _managed.is_some = _unmanaged.is_some;

                return _managed;
            }
            public void Free() { }
        }
    }

    // Debug - write_pattern_option 
    public partial struct OptionInner
    {
        public static OptionInner FromNullable(Inner? nullable)
        {
            var result = new OptionInner();
            if (nullable.HasValue)
            {
                result.is_some = 1;
                result.t = nullable.Value;
            }

            return result;
        }

        public Inner? ToNullable()
        {
            return this.is_some == 1 ? this.t : (Inner?)null;
        }
    }


    // Debug - write_type_definition_composite 
    ///Result that contains value or an error.
    public partial struct ResultConstPtrServiceAsyncFFIError
    {
        ///Element if err is `Ok`.
        IntPtr t;
        ///Error value.
        FFIError err;
    }

    // Debug - write_type_definition_composite_marshaller 
    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct ResultConstPtrServiceAsyncFFIError
    {
        public ResultConstPtrServiceAsyncFFIError(ResultConstPtrServiceAsyncFFIError other)
        {
            t = other.t;
            err = other.err;
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            // Debug - write_type_definition_composite_unmanaged_body_field 
            public IntPtr t;
            // Debug - write_type_definition_composite_unmanaged_body_field 
            public FFIError err;
        }

        [CustomMarshaller(typeof(ResultConstPtrServiceAsyncFFIError), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private ResultConstPtrServiceAsyncFFIError _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(ResultConstPtrServiceAsyncFFIError managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(ResultConstPtrServiceAsyncFFIError managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                // Debug - write_type_definition_composite_marshaller_unmanaged_invoke 
                _unmanaged.t = _managed.t;
                // Debug - write_type_definition_composite_marshaller_unmanaged_invoke 
                _unmanaged.err = _managed.err;

                return _unmanaged;
            }

            public unsafe ResultConstPtrServiceAsyncFFIError ToManaged()
            {
                _managed = new ResultConstPtrServiceAsyncFFIError();

                // Debug - write_type_definition_composite_marshaller_field_from_unmanaged 
                _managed.t = _unmanaged.t;
                // Debug - write_type_definition_composite_marshaller_field_from_unmanaged 
                _managed.err = _unmanaged.err;

                return _managed;
            }
            public void Free() { }
        }
    }

    // Debug - write_pattern_result 
    public partial struct ResultConstPtrServiceAsyncFFIError
    {
        public IntPtr Ok()
        {
            if (err == FFIError.Ok)
            {
                return t;
            }
            throw new InteropException<FFIError>(err);
        }

        public bool IsOk() { return err == FFIError.Ok; }
        public FFIError Err() { return err; }

    }


    // Debug - write_type_definition_composite 
    ///Result that contains value or an error.
    public partial struct ResultConstPtrServiceBasicFFIError
    {
        ///Element if err is `Ok`.
        IntPtr t;
        ///Error value.
        FFIError err;
    }

    // Debug - write_type_definition_composite_marshaller 
    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct ResultConstPtrServiceBasicFFIError
    {
        public ResultConstPtrServiceBasicFFIError(ResultConstPtrServiceBasicFFIError other)
        {
            t = other.t;
            err = other.err;
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            // Debug - write_type_definition_composite_unmanaged_body_field 
            public IntPtr t;
            // Debug - write_type_definition_composite_unmanaged_body_field 
            public FFIError err;
        }

        [CustomMarshaller(typeof(ResultConstPtrServiceBasicFFIError), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private ResultConstPtrServiceBasicFFIError _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(ResultConstPtrServiceBasicFFIError managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(ResultConstPtrServiceBasicFFIError managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                // Debug - write_type_definition_composite_marshaller_unmanaged_invoke 
                _unmanaged.t = _managed.t;
                // Debug - write_type_definition_composite_marshaller_unmanaged_invoke 
                _unmanaged.err = _managed.err;

                return _unmanaged;
            }

            public unsafe ResultConstPtrServiceBasicFFIError ToManaged()
            {
                _managed = new ResultConstPtrServiceBasicFFIError();

                // Debug - write_type_definition_composite_marshaller_field_from_unmanaged 
                _managed.t = _unmanaged.t;
                // Debug - write_type_definition_composite_marshaller_field_from_unmanaged 
                _managed.err = _unmanaged.err;

                return _managed;
            }
            public void Free() { }
        }
    }

    // Debug - write_pattern_result 
    public partial struct ResultConstPtrServiceBasicFFIError
    {
        public IntPtr Ok()
        {
            if (err == FFIError.Ok)
            {
                return t;
            }
            throw new InteropException<FFIError>(err);
        }

        public bool IsOk() { return err == FFIError.Ok; }
        public FFIError Err() { return err; }

    }


    // Debug - write_type_definition_composite 
    ///Result that contains value or an error.
    public partial struct ResultConstPtrServiceCallbacksFFIError
    {
        ///Element if err is `Ok`.
        IntPtr t;
        ///Error value.
        FFIError err;
    }

    // Debug - write_type_definition_composite_marshaller 
    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct ResultConstPtrServiceCallbacksFFIError
    {
        public ResultConstPtrServiceCallbacksFFIError(ResultConstPtrServiceCallbacksFFIError other)
        {
            t = other.t;
            err = other.err;
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            // Debug - write_type_definition_composite_unmanaged_body_field 
            public IntPtr t;
            // Debug - write_type_definition_composite_unmanaged_body_field 
            public FFIError err;
        }

        [CustomMarshaller(typeof(ResultConstPtrServiceCallbacksFFIError), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private ResultConstPtrServiceCallbacksFFIError _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(ResultConstPtrServiceCallbacksFFIError managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(ResultConstPtrServiceCallbacksFFIError managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                // Debug - write_type_definition_composite_marshaller_unmanaged_invoke 
                _unmanaged.t = _managed.t;
                // Debug - write_type_definition_composite_marshaller_unmanaged_invoke 
                _unmanaged.err = _managed.err;

                return _unmanaged;
            }

            public unsafe ResultConstPtrServiceCallbacksFFIError ToManaged()
            {
                _managed = new ResultConstPtrServiceCallbacksFFIError();

                // Debug - write_type_definition_composite_marshaller_field_from_unmanaged 
                _managed.t = _unmanaged.t;
                // Debug - write_type_definition_composite_marshaller_field_from_unmanaged 
                _managed.err = _unmanaged.err;

                return _managed;
            }
            public void Free() { }
        }
    }

    // Debug - write_pattern_result 
    public partial struct ResultConstPtrServiceCallbacksFFIError
    {
        public IntPtr Ok()
        {
            if (err == FFIError.Ok)
            {
                return t;
            }
            throw new InteropException<FFIError>(err);
        }

        public bool IsOk() { return err == FFIError.Ok; }
        public FFIError Err() { return err; }

    }


    // Debug - write_type_definition_composite 
    ///Result that contains value or an error.
    public partial struct ResultConstPtrServiceIgnoringMethodsFFIError
    {
        ///Element if err is `Ok`.
        IntPtr t;
        ///Error value.
        FFIError err;
    }

    // Debug - write_type_definition_composite_marshaller 
    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct ResultConstPtrServiceIgnoringMethodsFFIError
    {
        public ResultConstPtrServiceIgnoringMethodsFFIError(ResultConstPtrServiceIgnoringMethodsFFIError other)
        {
            t = other.t;
            err = other.err;
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            // Debug - write_type_definition_composite_unmanaged_body_field 
            public IntPtr t;
            // Debug - write_type_definition_composite_unmanaged_body_field 
            public FFIError err;
        }

        [CustomMarshaller(typeof(ResultConstPtrServiceIgnoringMethodsFFIError), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private ResultConstPtrServiceIgnoringMethodsFFIError _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(ResultConstPtrServiceIgnoringMethodsFFIError managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(ResultConstPtrServiceIgnoringMethodsFFIError managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                // Debug - write_type_definition_composite_marshaller_unmanaged_invoke 
                _unmanaged.t = _managed.t;
                // Debug - write_type_definition_composite_marshaller_unmanaged_invoke 
                _unmanaged.err = _managed.err;

                return _unmanaged;
            }

            public unsafe ResultConstPtrServiceIgnoringMethodsFFIError ToManaged()
            {
                _managed = new ResultConstPtrServiceIgnoringMethodsFFIError();

                // Debug - write_type_definition_composite_marshaller_field_from_unmanaged 
                _managed.t = _unmanaged.t;
                // Debug - write_type_definition_composite_marshaller_field_from_unmanaged 
                _managed.err = _unmanaged.err;

                return _managed;
            }
            public void Free() { }
        }
    }

    // Debug - write_pattern_result 
    public partial struct ResultConstPtrServiceIgnoringMethodsFFIError
    {
        public IntPtr Ok()
        {
            if (err == FFIError.Ok)
            {
                return t;
            }
            throw new InteropException<FFIError>(err);
        }

        public bool IsOk() { return err == FFIError.Ok; }
        public FFIError Err() { return err; }

    }


    // Debug - write_type_definition_composite 
    ///Result that contains value or an error.
    public partial struct ResultConstPtrServiceMultipleCtorsFFIError
    {
        ///Element if err is `Ok`.
        IntPtr t;
        ///Error value.
        FFIError err;
    }

    // Debug - write_type_definition_composite_marshaller 
    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct ResultConstPtrServiceMultipleCtorsFFIError
    {
        public ResultConstPtrServiceMultipleCtorsFFIError(ResultConstPtrServiceMultipleCtorsFFIError other)
        {
            t = other.t;
            err = other.err;
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            // Debug - write_type_definition_composite_unmanaged_body_field 
            public IntPtr t;
            // Debug - write_type_definition_composite_unmanaged_body_field 
            public FFIError err;
        }

        [CustomMarshaller(typeof(ResultConstPtrServiceMultipleCtorsFFIError), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private ResultConstPtrServiceMultipleCtorsFFIError _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(ResultConstPtrServiceMultipleCtorsFFIError managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(ResultConstPtrServiceMultipleCtorsFFIError managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                // Debug - write_type_definition_composite_marshaller_unmanaged_invoke 
                _unmanaged.t = _managed.t;
                // Debug - write_type_definition_composite_marshaller_unmanaged_invoke 
                _unmanaged.err = _managed.err;

                return _unmanaged;
            }

            public unsafe ResultConstPtrServiceMultipleCtorsFFIError ToManaged()
            {
                _managed = new ResultConstPtrServiceMultipleCtorsFFIError();

                // Debug - write_type_definition_composite_marshaller_field_from_unmanaged 
                _managed.t = _unmanaged.t;
                // Debug - write_type_definition_composite_marshaller_field_from_unmanaged 
                _managed.err = _unmanaged.err;

                return _managed;
            }
            public void Free() { }
        }
    }

    // Debug - write_pattern_result 
    public partial struct ResultConstPtrServiceMultipleCtorsFFIError
    {
        public IntPtr Ok()
        {
            if (err == FFIError.Ok)
            {
                return t;
            }
            throw new InteropException<FFIError>(err);
        }

        public bool IsOk() { return err == FFIError.Ok; }
        public FFIError Err() { return err; }

    }


    // Debug - write_type_definition_composite 
    ///Result that contains value or an error.
    public partial struct ResultConstPtrServiceOnPanicFFIError
    {
        ///Element if err is `Ok`.
        IntPtr t;
        ///Error value.
        FFIError err;
    }

    // Debug - write_type_definition_composite_marshaller 
    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct ResultConstPtrServiceOnPanicFFIError
    {
        public ResultConstPtrServiceOnPanicFFIError(ResultConstPtrServiceOnPanicFFIError other)
        {
            t = other.t;
            err = other.err;
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            // Debug - write_type_definition_composite_unmanaged_body_field 
            public IntPtr t;
            // Debug - write_type_definition_composite_unmanaged_body_field 
            public FFIError err;
        }

        [CustomMarshaller(typeof(ResultConstPtrServiceOnPanicFFIError), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private ResultConstPtrServiceOnPanicFFIError _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(ResultConstPtrServiceOnPanicFFIError managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(ResultConstPtrServiceOnPanicFFIError managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                // Debug - write_type_definition_composite_marshaller_unmanaged_invoke 
                _unmanaged.t = _managed.t;
                // Debug - write_type_definition_composite_marshaller_unmanaged_invoke 
                _unmanaged.err = _managed.err;

                return _unmanaged;
            }

            public unsafe ResultConstPtrServiceOnPanicFFIError ToManaged()
            {
                _managed = new ResultConstPtrServiceOnPanicFFIError();

                // Debug - write_type_definition_composite_marshaller_field_from_unmanaged 
                _managed.t = _unmanaged.t;
                // Debug - write_type_definition_composite_marshaller_field_from_unmanaged 
                _managed.err = _unmanaged.err;

                return _managed;
            }
            public void Free() { }
        }
    }

    // Debug - write_pattern_result 
    public partial struct ResultConstPtrServiceOnPanicFFIError
    {
        public IntPtr Ok()
        {
            if (err == FFIError.Ok)
            {
                return t;
            }
            throw new InteropException<FFIError>(err);
        }

        public bool IsOk() { return err == FFIError.Ok; }
        public FFIError Err() { return err; }

    }


    // Debug - write_type_definition_composite 
    ///Result that contains value or an error.
    public partial struct ResultConstPtrServiceResultFFIError
    {
        ///Element if err is `Ok`.
        IntPtr t;
        ///Error value.
        FFIError err;
    }

    // Debug - write_type_definition_composite_marshaller 
    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct ResultConstPtrServiceResultFFIError
    {
        public ResultConstPtrServiceResultFFIError(ResultConstPtrServiceResultFFIError other)
        {
            t = other.t;
            err = other.err;
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            // Debug - write_type_definition_composite_unmanaged_body_field 
            public IntPtr t;
            // Debug - write_type_definition_composite_unmanaged_body_field 
            public FFIError err;
        }

        [CustomMarshaller(typeof(ResultConstPtrServiceResultFFIError), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private ResultConstPtrServiceResultFFIError _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(ResultConstPtrServiceResultFFIError managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(ResultConstPtrServiceResultFFIError managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                // Debug - write_type_definition_composite_marshaller_unmanaged_invoke 
                _unmanaged.t = _managed.t;
                // Debug - write_type_definition_composite_marshaller_unmanaged_invoke 
                _unmanaged.err = _managed.err;

                return _unmanaged;
            }

            public unsafe ResultConstPtrServiceResultFFIError ToManaged()
            {
                _managed = new ResultConstPtrServiceResultFFIError();

                // Debug - write_type_definition_composite_marshaller_field_from_unmanaged 
                _managed.t = _unmanaged.t;
                // Debug - write_type_definition_composite_marshaller_field_from_unmanaged 
                _managed.err = _unmanaged.err;

                return _managed;
            }
            public void Free() { }
        }
    }

    // Debug - write_pattern_result 
    public partial struct ResultConstPtrServiceResultFFIError
    {
        public IntPtr Ok()
        {
            if (err == FFIError.Ok)
            {
                return t;
            }
            throw new InteropException<FFIError>(err);
        }

        public bool IsOk() { return err == FFIError.Ok; }
        public FFIError Err() { return err; }

    }


    // Debug - write_type_definition_composite 
    ///Result that contains value or an error.
    public partial struct ResultConstPtrServiceStringsFFIError
    {
        ///Element if err is `Ok`.
        IntPtr t;
        ///Error value.
        FFIError err;
    }

    // Debug - write_type_definition_composite_marshaller 
    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct ResultConstPtrServiceStringsFFIError
    {
        public ResultConstPtrServiceStringsFFIError(ResultConstPtrServiceStringsFFIError other)
        {
            t = other.t;
            err = other.err;
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            // Debug - write_type_definition_composite_unmanaged_body_field 
            public IntPtr t;
            // Debug - write_type_definition_composite_unmanaged_body_field 
            public FFIError err;
        }

        [CustomMarshaller(typeof(ResultConstPtrServiceStringsFFIError), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private ResultConstPtrServiceStringsFFIError _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(ResultConstPtrServiceStringsFFIError managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(ResultConstPtrServiceStringsFFIError managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                // Debug - write_type_definition_composite_marshaller_unmanaged_invoke 
                _unmanaged.t = _managed.t;
                // Debug - write_type_definition_composite_marshaller_unmanaged_invoke 
                _unmanaged.err = _managed.err;

                return _unmanaged;
            }

            public unsafe ResultConstPtrServiceStringsFFIError ToManaged()
            {
                _managed = new ResultConstPtrServiceStringsFFIError();

                // Debug - write_type_definition_composite_marshaller_field_from_unmanaged 
                _managed.t = _unmanaged.t;
                // Debug - write_type_definition_composite_marshaller_field_from_unmanaged 
                _managed.err = _unmanaged.err;

                return _managed;
            }
            public void Free() { }
        }
    }

    // Debug - write_pattern_result 
    public partial struct ResultConstPtrServiceStringsFFIError
    {
        public IntPtr Ok()
        {
            if (err == FFIError.Ok)
            {
                return t;
            }
            throw new InteropException<FFIError>(err);
        }

        public bool IsOk() { return err == FFIError.Ok; }
        public FFIError Err() { return err; }

    }


    // Debug - write_type_definition_composite 
    ///Result that contains value or an error.
    public partial struct ResultConstPtrServiceVariousSlicesFFIError
    {
        ///Element if err is `Ok`.
        IntPtr t;
        ///Error value.
        FFIError err;
    }

    // Debug - write_type_definition_composite_marshaller 
    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct ResultConstPtrServiceVariousSlicesFFIError
    {
        public ResultConstPtrServiceVariousSlicesFFIError(ResultConstPtrServiceVariousSlicesFFIError other)
        {
            t = other.t;
            err = other.err;
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            // Debug - write_type_definition_composite_unmanaged_body_field 
            public IntPtr t;
            // Debug - write_type_definition_composite_unmanaged_body_field 
            public FFIError err;
        }

        [CustomMarshaller(typeof(ResultConstPtrServiceVariousSlicesFFIError), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private ResultConstPtrServiceVariousSlicesFFIError _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(ResultConstPtrServiceVariousSlicesFFIError managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(ResultConstPtrServiceVariousSlicesFFIError managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                // Debug - write_type_definition_composite_marshaller_unmanaged_invoke 
                _unmanaged.t = _managed.t;
                // Debug - write_type_definition_composite_marshaller_unmanaged_invoke 
                _unmanaged.err = _managed.err;

                return _unmanaged;
            }

            public unsafe ResultConstPtrServiceVariousSlicesFFIError ToManaged()
            {
                _managed = new ResultConstPtrServiceVariousSlicesFFIError();

                // Debug - write_type_definition_composite_marshaller_field_from_unmanaged 
                _managed.t = _unmanaged.t;
                // Debug - write_type_definition_composite_marshaller_field_from_unmanaged 
                _managed.err = _unmanaged.err;

                return _managed;
            }
            public void Free() { }
        }
    }

    // Debug - write_pattern_result 
    public partial struct ResultConstPtrServiceVariousSlicesFFIError
    {
        public IntPtr Ok()
        {
            if (err == FFIError.Ok)
            {
                return t;
            }
            throw new InteropException<FFIError>(err);
        }

        public bool IsOk() { return err == FFIError.Ok; }
        public FFIError Err() { return err; }

    }


    // Debug - write_type_definition_composite 
    ///Result that contains value or an error.
    public partial struct ResultNestedArrayFFIError
    {
        ///Element if err is `Ok`.
        NestedArray t;
        ///Error value.
        FFIError err;
    }

    // Debug - write_type_definition_composite_marshaller 
    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct ResultNestedArrayFFIError
    {
        public ResultNestedArrayFFIError(ResultNestedArrayFFIError other)
        {
            t = other.t;
            err = other.err;
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            // Debug - write_type_definition_composite_unmanaged_body_field 
            public NestedArray.Unmanaged t;
            // Debug - write_type_definition_composite_unmanaged_body_field 
            public FFIError err;
        }

        [CustomMarshaller(typeof(ResultNestedArrayFFIError), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private ResultNestedArrayFFIError _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(ResultNestedArrayFFIError managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(ResultNestedArrayFFIError managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                // Debug - write_type_definition_composite_marshaller_unmanaged_invoke 
                var _t = new NestedArray.Marshaller(_managed.t);
                _unmanaged.t = _t.ToUnmanaged();
                // Debug - write_type_definition_composite_marshaller_unmanaged_invoke 
                _unmanaged.err = _managed.err;

                return _unmanaged;
            }

            public unsafe ResultNestedArrayFFIError ToManaged()
            {
                _managed = new ResultNestedArrayFFIError();

                // Debug - write_type_definition_composite_marshaller_field_from_unmanaged 
                var _t = new NestedArray.Marshaller(_unmanaged.t);
                _managed.t = _t.ToManaged();
                // Debug - write_type_definition_composite_marshaller_field_from_unmanaged 
                _managed.err = _unmanaged.err;

                return _managed;
            }
            public void Free() { }
        }
    }

    // Debug - write_pattern_result 
    public partial struct ResultNestedArrayFFIError
    {
        public NestedArray Ok()
        {
            if (err == FFIError.Ok)
            {
                return t;
            }
            throw new InteropException<FFIError>(err);
        }

        public bool IsOk() { return err == FFIError.Ok; }
        public FFIError Err() { return err; }

    }


    // Debug - write_type_definition_composite 
    ///Result that contains value or an error.
    public partial struct ResultU32FFIError
    {
        ///Element if err is `Ok`.
        uint t;
        ///Error value.
        FFIError err;
    }

    // Debug - write_type_definition_composite_marshaller 
    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct ResultU32FFIError
    {
        public ResultU32FFIError(ResultU32FFIError other)
        {
            t = other.t;
            err = other.err;
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            // Debug - write_type_definition_composite_unmanaged_body_field 
            public uint t;
            // Debug - write_type_definition_composite_unmanaged_body_field 
            public FFIError err;
        }

        [CustomMarshaller(typeof(ResultU32FFIError), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private ResultU32FFIError _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(ResultU32FFIError managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(ResultU32FFIError managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                // Debug - write_type_definition_composite_marshaller_unmanaged_invoke 
                _unmanaged.t = _managed.t;
                // Debug - write_type_definition_composite_marshaller_unmanaged_invoke 
                _unmanaged.err = _managed.err;

                return _unmanaged;
            }

            public unsafe ResultU32FFIError ToManaged()
            {
                _managed = new ResultU32FFIError();

                // Debug - write_type_definition_composite_marshaller_field_from_unmanaged 
                _managed.t = _unmanaged.t;
                // Debug - write_type_definition_composite_marshaller_field_from_unmanaged 
                _managed.err = _unmanaged.err;

                return _managed;
            }
            public void Free() { }
        }
    }

    // Debug - write_pattern_result 
    public partial struct ResultU32FFIError
    {
        public uint Ok()
        {
            if (err == FFIError.Ok)
            {
                return t;
            }
            throw new InteropException<FFIError>(err);
        }

        public bool IsOk() { return err == FFIError.Ok; }
        public FFIError Err() { return err; }

    }


    // Debug - write_type_definition_composite 
    ///Result that contains value or an error.
    public partial struct ResultU64FFIError
    {
        ///Element if err is `Ok`.
        ulong t;
        ///Error value.
        FFIError err;
    }

    // Debug - write_type_definition_composite_marshaller 
    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct ResultU64FFIError
    {
        public ResultU64FFIError(ResultU64FFIError other)
        {
            t = other.t;
            err = other.err;
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            // Debug - write_type_definition_composite_unmanaged_body_field 
            public ulong t;
            // Debug - write_type_definition_composite_unmanaged_body_field 
            public FFIError err;
        }

        [CustomMarshaller(typeof(ResultU64FFIError), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private ResultU64FFIError _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(ResultU64FFIError managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(ResultU64FFIError managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                // Debug - write_type_definition_composite_marshaller_unmanaged_invoke 
                _unmanaged.t = _managed.t;
                // Debug - write_type_definition_composite_marshaller_unmanaged_invoke 
                _unmanaged.err = _managed.err;

                return _unmanaged;
            }

            public unsafe ResultU64FFIError ToManaged()
            {
                _managed = new ResultU64FFIError();

                // Debug - write_type_definition_composite_marshaller_field_from_unmanaged 
                _managed.t = _unmanaged.t;
                // Debug - write_type_definition_composite_marshaller_field_from_unmanaged 
                _managed.err = _unmanaged.err;

                return _managed;
            }
            public void Free() { }
        }
    }

    // Debug - write_pattern_result 
    public partial struct ResultU64FFIError
    {
        public ulong Ok()
        {
            if (err == FFIError.Ok)
            {
                return t;
            }
            throw new InteropException<FFIError>(err);
        }

        public bool IsOk() { return err == FFIError.Ok; }
        public FFIError Err() { return err; }

    }


    // Debug - write_type_definition_composite 
    ///Result that contains value or an error.
    public partial struct ResultUseUtf8StringFFIError
    {
        ///Element if err is `Ok`.
        UseUtf8String t;
        ///Error value.
        FFIError err;
    }

    // Debug - write_type_definition_composite_marshaller 
    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct ResultUseUtf8StringFFIError
    {
        public ResultUseUtf8StringFFIError(ResultUseUtf8StringFFIError other)
        {
            t = other.t;
            err = other.err;
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            // Debug - write_type_definition_composite_unmanaged_body_field 
            public UseUtf8String.Unmanaged t;
            // Debug - write_type_definition_composite_unmanaged_body_field 
            public FFIError err;
        }

        [CustomMarshaller(typeof(ResultUseUtf8StringFFIError), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private ResultUseUtf8StringFFIError _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(ResultUseUtf8StringFFIError managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(ResultUseUtf8StringFFIError managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                // Debug - write_type_definition_composite_marshaller_unmanaged_invoke 
                var _t = new UseUtf8String.Marshaller(_managed.t);
                _unmanaged.t = _t.ToUnmanaged();
                // Debug - write_type_definition_composite_marshaller_unmanaged_invoke 
                _unmanaged.err = _managed.err;

                return _unmanaged;
            }

            public unsafe ResultUseUtf8StringFFIError ToManaged()
            {
                _managed = new ResultUseUtf8StringFFIError();

                // Debug - write_type_definition_composite_marshaller_field_from_unmanaged 
                var _t = new UseUtf8String.Marshaller(_unmanaged.t);
                _managed.t = _t.ToManaged();
                // Debug - write_type_definition_composite_marshaller_field_from_unmanaged 
                _managed.err = _unmanaged.err;

                return _managed;
            }
            public void Free() { }
        }
    }

    // Debug - write_pattern_result 
    public partial struct ResultUseUtf8StringFFIError
    {
        public UseUtf8String Ok()
        {
            if (err == FFIError.Ok)
            {
                return t;
            }
            throw new InteropException<FFIError>(err);
        }

        public bool IsOk() { return err == FFIError.Ok; }
        public FFIError Err() { return err; }

    }


    // Debug - write_type_definition_composite 
    ///Result that contains value or an error.
    public partial struct ResultUtf8StringFFIError
    {
        ///Element if err is `Ok`.
        string t;
        ///Error value.
        FFIError err;
    }

    // Debug - write_type_definition_composite_marshaller 
    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct ResultUtf8StringFFIError
    {
        public ResultUtf8StringFFIError(ResultUtf8StringFFIError other)
        {
            t = other.t;
            err = other.err;
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            // Debug - write_type_definition_composite_unmanaged_body_field 
            public Utf8String.Unmanaged t;
            // Debug - write_type_definition_composite_unmanaged_body_field 
            public FFIError err;
        }

        [CustomMarshaller(typeof(ResultUtf8StringFFIError), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private ResultUtf8StringFFIError _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(ResultUtf8StringFFIError managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(ResultUtf8StringFFIError managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                // Debug - write_type_definition_composite_marshaller_unmanaged_invoke 
                var _t = new Utf8String.Marshaller(new Utf8String(_managed.t));
                _unmanaged.t = _t.ToUnmanaged();
                // Debug - write_type_definition_composite_marshaller_unmanaged_invoke 
                _unmanaged.err = _managed.err;

                return _unmanaged;
            }

            public unsafe ResultUtf8StringFFIError ToManaged()
            {
                _managed = new ResultUtf8StringFFIError();

                // Debug - write_type_definition_composite_marshaller_field_from_unmanaged 
                var _t = new Utf8String.Marshaller(_unmanaged.t);
                _managed.t = _t.ToManaged().String;
                // Debug - write_type_definition_composite_marshaller_field_from_unmanaged 
                _managed.err = _unmanaged.err;

                return _managed;
            }
            public void Free() { }
        }
    }

    // Debug - write_pattern_result 
    public partial struct ResultUtf8StringFFIError
    {
        public string Ok()
        {
            if (err == FFIError.Ok)
            {
                return t;
            }
            throw new InteropException<FFIError>(err);
        }

        public bool IsOk() { return err == FFIError.Ok; }
        public FFIError Err() { return err; }

    }


    // Debug - write_type_definition_named_callback 
    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void CallbackCharArray2Native(CharArray value, IntPtr callback_data); // 'True' native callback signature
    public delegate void CallbackCharArray2Delegate(CharArray value); // Our C# signature

    public partial class CallbackCharArray2
    {
        private CallbackCharArray2Delegate _managed; // C# callback
        private CallbackCharArray2Native _native; // Native callback 
        private IntPtr _ptr; // Raw function pointer of native callback
        private Exception _exception; // Set if the callback encountered an Exception
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class CallbackCharArray2 : IDisposable
    {

        public CallbackCharArray2() { }

        public CallbackCharArray2(CallbackCharArray2Delegate managed)
        {
            _managed = managed;
            _native = CallTrampoline;
            _ptr = Marshal.GetFunctionPointerForDelegate(_native);
        }

        // Helper to invoke managed code from the native invocation.
        private void CallTrampoline(CharArray value, IntPtr callback_data)
        {
            // We ignore the last parameter, a generic callback pointer, as it's not needed in C#.
            try
            {
                _managed(value);
            }
            catch (Exception e)
            {
                _exception = e;
                return;
            }
        }

        // Invokes the callback.
        public void Call(CharArray value)
        {
            var __target = Marshal.GetDelegateForFunctionPointer<CallbackCharArray2Native>(_ptr);
            // TODO
            // __target(value);
            return;
        }

        public void Dispose()
        {
            // This means when the callback was invoked from Rust C# had an exception which
            // we caught (otherwise C# might not re-enter Rust, and we leak memory). Now is
            // the time to rethrow it.
            if (_exception != null) throw _exception;
        }

        [CustomMarshaller(typeof(CallbackCharArray2), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta {  }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            internal IntPtr Callback;
            internal IntPtr Data;
        }

        public ref struct Marshaller
        {
            private CallbackCharArray2 _managed;
            private Unmanaged _unmanaged;

            public Marshaller(CallbackCharArray2 managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(CallbackCharArray2 managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public Unmanaged ToUnmanaged()
            {
                _unmanaged = new Unmanaged();
                _unmanaged.Callback = _managed?._ptr ?? IntPtr.Zero;
                _unmanaged.Data = IntPtr.Zero;
                return _unmanaged;
            }

            public CallbackCharArray2 ToManaged()
            {
                _managed = new CallbackCharArray2();
                _managed._ptr = _unmanaged.Callback;
                return _managed;
            }

            public void Free() { }
        }
    }


    // Debug - write_type_definition_named_callback 
    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate byte CallbackFFISliceNative(SliceU8.Unmanaged slice, IntPtr callback_data); // 'True' native callback signature
    public delegate byte CallbackFFISliceDelegate(SliceU8 slice); // Our C# signature

    public partial class CallbackFFISlice
    {
        private CallbackFFISliceDelegate _managed; // C# callback
        private CallbackFFISliceNative _native; // Native callback 
        private IntPtr _ptr; // Raw function pointer of native callback
        private Exception _exception; // Set if the callback encountered an Exception
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class CallbackFFISlice : IDisposable
    {

        public CallbackFFISlice() { }

        public CallbackFFISlice(CallbackFFISliceDelegate managed)
        {
            _managed = managed;
            _native = CallTrampoline;
            _ptr = Marshal.GetFunctionPointerForDelegate(_native);
        }

        // Helper to invoke managed code from the native invocation.
        private byte CallTrampoline(SliceU8.Unmanaged slice, IntPtr callback_data)
        {
            // We ignore the last parameter, a generic callback pointer, as it's not needed in C#.
            try
            {
                return _managed(slice.Managed());
            }
            catch (Exception e)
            {
                _exception = e;
                return default;
            }
        }

        // Invokes the callback.
        public byte Call(SliceU8 slice)
        {
            var __target = Marshal.GetDelegateForFunctionPointer<CallbackFFISliceNative>(_ptr);
            // TODO
            // return __target(slice.Managed());
            return default;
        }

        public void Dispose()
        {
            // This means when the callback was invoked from Rust C# had an exception which
            // we caught (otherwise C# might not re-enter Rust, and we leak memory). Now is
            // the time to rethrow it.
            if (_exception != null) throw _exception;
        }

        [CustomMarshaller(typeof(CallbackFFISlice), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta {  }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            internal IntPtr Callback;
            internal IntPtr Data;
        }

        public ref struct Marshaller
        {
            private CallbackFFISlice _managed;
            private Unmanaged _unmanaged;

            public Marshaller(CallbackFFISlice managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(CallbackFFISlice managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public Unmanaged ToUnmanaged()
            {
                _unmanaged = new Unmanaged();
                _unmanaged.Callback = _managed?._ptr ?? IntPtr.Zero;
                _unmanaged.Data = IntPtr.Zero;
                return _unmanaged;
            }

            public CallbackFFISlice ToManaged()
            {
                _managed = new CallbackFFISlice();
                _managed._ptr = _unmanaged.Callback;
                return _managed;
            }

            public void Free() { }
        }
    }


    // Debug - write_type_definition_named_callback 
    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate Vec3f32 CallbackHugeVecSliceNative(SliceVec3f32.Unmanaged slice, IntPtr callback_data); // 'True' native callback signature
    public delegate Vec3f32 CallbackHugeVecSliceDelegate(SliceVec3f32 slice); // Our C# signature

    public partial class CallbackHugeVecSlice
    {
        private CallbackHugeVecSliceDelegate _managed; // C# callback
        private CallbackHugeVecSliceNative _native; // Native callback 
        private IntPtr _ptr; // Raw function pointer of native callback
        private Exception _exception; // Set if the callback encountered an Exception
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class CallbackHugeVecSlice : IDisposable
    {

        public CallbackHugeVecSlice() { }

        public CallbackHugeVecSlice(CallbackHugeVecSliceDelegate managed)
        {
            _managed = managed;
            _native = CallTrampoline;
            _ptr = Marshal.GetFunctionPointerForDelegate(_native);
        }

        // Helper to invoke managed code from the native invocation.
        private Vec3f32 CallTrampoline(SliceVec3f32.Unmanaged slice, IntPtr callback_data)
        {
            // We ignore the last parameter, a generic callback pointer, as it's not needed in C#.
            try
            {
                return _managed(slice.Managed());
            }
            catch (Exception e)
            {
                _exception = e;
                return default;
            }
        }

        // Invokes the callback.
        public Vec3f32 Call(SliceVec3f32 slice)
        {
            var __target = Marshal.GetDelegateForFunctionPointer<CallbackHugeVecSliceNative>(_ptr);
            // TODO
            // return __target(slice.Managed());
            return default;
        }

        public void Dispose()
        {
            // This means when the callback was invoked from Rust C# had an exception which
            // we caught (otherwise C# might not re-enter Rust, and we leak memory). Now is
            // the time to rethrow it.
            if (_exception != null) throw _exception;
        }

        [CustomMarshaller(typeof(CallbackHugeVecSlice), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta {  }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            internal IntPtr Callback;
            internal IntPtr Data;
        }

        public ref struct Marshaller
        {
            private CallbackHugeVecSlice _managed;
            private Unmanaged _unmanaged;

            public Marshaller(CallbackHugeVecSlice managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(CallbackHugeVecSlice managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public Unmanaged ToUnmanaged()
            {
                _unmanaged = new Unmanaged();
                _unmanaged.Callback = _managed?._ptr ?? IntPtr.Zero;
                _unmanaged.Data = IntPtr.Zero;
                return _unmanaged;
            }

            public CallbackHugeVecSlice ToManaged()
            {
                _managed = new CallbackHugeVecSlice();
                _managed._ptr = _unmanaged.Callback;
                return _managed;
            }

            public void Free() { }
        }
    }


    // Debug - write_type_definition_named_callback 
    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void CallbackSliceMutNative(SliceMutU8.Unmanaged slice, IntPtr callback_data); // 'True' native callback signature
    public delegate void CallbackSliceMutDelegate(SliceMutU8 slice); // Our C# signature

    public partial class CallbackSliceMut
    {
        private CallbackSliceMutDelegate _managed; // C# callback
        private CallbackSliceMutNative _native; // Native callback 
        private IntPtr _ptr; // Raw function pointer of native callback
        private Exception _exception; // Set if the callback encountered an Exception
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class CallbackSliceMut : IDisposable
    {

        public CallbackSliceMut() { }

        public CallbackSliceMut(CallbackSliceMutDelegate managed)
        {
            _managed = managed;
            _native = CallTrampoline;
            _ptr = Marshal.GetFunctionPointerForDelegate(_native);
        }

        // Helper to invoke managed code from the native invocation.
        private void CallTrampoline(SliceMutU8.Unmanaged slice, IntPtr callback_data)
        {
            // We ignore the last parameter, a generic callback pointer, as it's not needed in C#.
            try
            {
                _managed(slice.Managed());
            }
            catch (Exception e)
            {
                _exception = e;
                return;
            }
        }

        // Invokes the callback.
        public void Call(SliceMutU8 slice)
        {
            var __target = Marshal.GetDelegateForFunctionPointer<CallbackSliceMutNative>(_ptr);
            // TODO
            // __target(slice.Managed());
            return;
        }

        public void Dispose()
        {
            // This means when the callback was invoked from Rust C# had an exception which
            // we caught (otherwise C# might not re-enter Rust, and we leak memory). Now is
            // the time to rethrow it.
            if (_exception != null) throw _exception;
        }

        [CustomMarshaller(typeof(CallbackSliceMut), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta {  }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            internal IntPtr Callback;
            internal IntPtr Data;
        }

        public ref struct Marshaller
        {
            private CallbackSliceMut _managed;
            private Unmanaged _unmanaged;

            public Marshaller(CallbackSliceMut managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(CallbackSliceMut managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public Unmanaged ToUnmanaged()
            {
                _unmanaged = new Unmanaged();
                _unmanaged.Callback = _managed?._ptr ?? IntPtr.Zero;
                _unmanaged.Data = IntPtr.Zero;
                return _unmanaged;
            }

            public CallbackSliceMut ToManaged()
            {
                _managed = new CallbackSliceMut();
                _managed._ptr = _unmanaged.Callback;
                return _managed;
            }

            public void Free() { }
        }
    }


    // Debug - write_type_definition_named_callback 
    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate byte CallbackU8Native(byte value, IntPtr callback_data); // 'True' native callback signature
    public delegate byte CallbackU8Delegate(byte value); // Our C# signature

    public partial class CallbackU8
    {
        private CallbackU8Delegate _managed; // C# callback
        private CallbackU8Native _native; // Native callback 
        private IntPtr _ptr; // Raw function pointer of native callback
        private Exception _exception; // Set if the callback encountered an Exception
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class CallbackU8 : IDisposable
    {

        public CallbackU8() { }

        public CallbackU8(CallbackU8Delegate managed)
        {
            _managed = managed;
            _native = CallTrampoline;
            _ptr = Marshal.GetFunctionPointerForDelegate(_native);
        }

        // Helper to invoke managed code from the native invocation.
        private byte CallTrampoline(byte value, IntPtr callback_data)
        {
            // We ignore the last parameter, a generic callback pointer, as it's not needed in C#.
            try
            {
                return _managed(value);
            }
            catch (Exception e)
            {
                _exception = e;
                return default;
            }
        }

        // Invokes the callback.
        public byte Call(byte value)
        {
            var __target = Marshal.GetDelegateForFunctionPointer<CallbackU8Native>(_ptr);
            // TODO
            // return __target(value);
            return default;
        }

        public void Dispose()
        {
            // This means when the callback was invoked from Rust C# had an exception which
            // we caught (otherwise C# might not re-enter Rust, and we leak memory). Now is
            // the time to rethrow it.
            if (_exception != null) throw _exception;
        }

        [CustomMarshaller(typeof(CallbackU8), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta {  }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            internal IntPtr Callback;
            internal IntPtr Data;
        }

        public ref struct Marshaller
        {
            private CallbackU8 _managed;
            private Unmanaged _unmanaged;

            public Marshaller(CallbackU8 managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(CallbackU8 managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public Unmanaged ToUnmanaged()
            {
                _unmanaged = new Unmanaged();
                _unmanaged.Callback = _managed?._ptr ?? IntPtr.Zero;
                _unmanaged.Data = IntPtr.Zero;
                return _unmanaged;
            }

            public CallbackU8 ToManaged()
            {
                _managed = new CallbackU8();
                _managed._ptr = _unmanaged.Callback;
                return _managed;
            }

            public void Free() { }
        }
    }


    // Debug - write_type_definition_named_callback 
    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate uint MyCallbackNative(uint value, IntPtr callback_data); // 'True' native callback signature
    public delegate uint MyCallbackDelegate(uint value); // Our C# signature

    public partial class MyCallback
    {
        private MyCallbackDelegate _managed; // C# callback
        private MyCallbackNative _native; // Native callback 
        private IntPtr _ptr; // Raw function pointer of native callback
        private Exception _exception; // Set if the callback encountered an Exception
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class MyCallback : IDisposable
    {

        public MyCallback() { }

        public MyCallback(MyCallbackDelegate managed)
        {
            _managed = managed;
            _native = CallTrampoline;
            _ptr = Marshal.GetFunctionPointerForDelegate(_native);
        }

        // Helper to invoke managed code from the native invocation.
        private uint CallTrampoline(uint value, IntPtr callback_data)
        {
            // We ignore the last parameter, a generic callback pointer, as it's not needed in C#.
            try
            {
                return _managed(value);
            }
            catch (Exception e)
            {
                _exception = e;
                return default;
            }
        }

        // Invokes the callback.
        public uint Call(uint value)
        {
            var __target = Marshal.GetDelegateForFunctionPointer<MyCallbackNative>(_ptr);
            // TODO
            // return __target(value);
            return default;
        }

        public void Dispose()
        {
            // This means when the callback was invoked from Rust C# had an exception which
            // we caught (otherwise C# might not re-enter Rust, and we leak memory). Now is
            // the time to rethrow it.
            if (_exception != null) throw _exception;
        }

        [CustomMarshaller(typeof(MyCallback), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta {  }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            internal IntPtr Callback;
            internal IntPtr Data;
        }

        public ref struct Marshaller
        {
            private MyCallback _managed;
            private Unmanaged _unmanaged;

            public Marshaller(MyCallback managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(MyCallback managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public Unmanaged ToUnmanaged()
            {
                _unmanaged = new Unmanaged();
                _unmanaged.Callback = _managed?._ptr ?? IntPtr.Zero;
                _unmanaged.Data = IntPtr.Zero;
                return _unmanaged;
            }

            public MyCallback ToManaged()
            {
                _managed = new MyCallback();
                _managed._ptr = _unmanaged.Callback;
                return _managed;
            }

            public void Free() { }
        }
    }


    // Debug - write_type_definition_named_callback 
    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void MyCallbackContextualNative(IntPtr context, uint value, IntPtr callback_data); // 'True' native callback signature
    public delegate void MyCallbackContextualDelegate(IntPtr context, uint value); // Our C# signature

    public partial class MyCallbackContextual
    {
        private MyCallbackContextualDelegate _managed; // C# callback
        private MyCallbackContextualNative _native; // Native callback 
        private IntPtr _ptr; // Raw function pointer of native callback
        private Exception _exception; // Set if the callback encountered an Exception
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class MyCallbackContextual : IDisposable
    {

        public MyCallbackContextual() { }

        public MyCallbackContextual(MyCallbackContextualDelegate managed)
        {
            _managed = managed;
            _native = CallTrampoline;
            _ptr = Marshal.GetFunctionPointerForDelegate(_native);
        }

        // Helper to invoke managed code from the native invocation.
        private void CallTrampoline(IntPtr context, uint value, IntPtr callback_data)
        {
            // We ignore the last parameter, a generic callback pointer, as it's not needed in C#.
            try
            {
                _managed(context, value);
            }
            catch (Exception e)
            {
                _exception = e;
                return;
            }
        }

        // Invokes the callback.
        public void Call(IntPtr context, uint value)
        {
            var __target = Marshal.GetDelegateForFunctionPointer<MyCallbackContextualNative>(_ptr);
            // TODO
            // __target(context, value);
            return;
        }

        public void Dispose()
        {
            // This means when the callback was invoked from Rust C# had an exception which
            // we caught (otherwise C# might not re-enter Rust, and we leak memory). Now is
            // the time to rethrow it.
            if (_exception != null) throw _exception;
        }

        [CustomMarshaller(typeof(MyCallbackContextual), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta {  }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            internal IntPtr Callback;
            internal IntPtr Data;
        }

        public ref struct Marshaller
        {
            private MyCallbackContextual _managed;
            private Unmanaged _unmanaged;

            public Marshaller(MyCallbackContextual managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(MyCallbackContextual managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public Unmanaged ToUnmanaged()
            {
                _unmanaged = new Unmanaged();
                _unmanaged.Callback = _managed?._ptr ?? IntPtr.Zero;
                _unmanaged.Data = IntPtr.Zero;
                return _unmanaged;
            }

            public MyCallbackContextual ToManaged()
            {
                _managed = new MyCallbackContextual();
                _managed._ptr = _unmanaged.Callback;
                return _managed;
            }

            public void Free() { }
        }
    }


    // Debug - write_type_definition_named_callback 
    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void MyCallbackVoidNative(IntPtr ptr, IntPtr callback_data); // 'True' native callback signature
    public delegate void MyCallbackVoidDelegate(IntPtr ptr); // Our C# signature

    public partial class MyCallbackVoid
    {
        private MyCallbackVoidDelegate _managed; // C# callback
        private MyCallbackVoidNative _native; // Native callback 
        private IntPtr _ptr; // Raw function pointer of native callback
        private Exception _exception; // Set if the callback encountered an Exception
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class MyCallbackVoid : IDisposable
    {

        public MyCallbackVoid() { }

        public MyCallbackVoid(MyCallbackVoidDelegate managed)
        {
            _managed = managed;
            _native = CallTrampoline;
            _ptr = Marshal.GetFunctionPointerForDelegate(_native);
        }

        // Helper to invoke managed code from the native invocation.
        private void CallTrampoline(IntPtr ptr, IntPtr callback_data)
        {
            // We ignore the last parameter, a generic callback pointer, as it's not needed in C#.
            try
            {
                _managed(ptr);
            }
            catch (Exception e)
            {
                _exception = e;
                return;
            }
        }

        // Invokes the callback.
        public void Call(IntPtr ptr)
        {
            var __target = Marshal.GetDelegateForFunctionPointer<MyCallbackVoidNative>(_ptr);
            // TODO
            // __target(ptr);
            return;
        }

        public void Dispose()
        {
            // This means when the callback was invoked from Rust C# had an exception which
            // we caught (otherwise C# might not re-enter Rust, and we leak memory). Now is
            // the time to rethrow it.
            if (_exception != null) throw _exception;
        }

        [CustomMarshaller(typeof(MyCallbackVoid), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta {  }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            internal IntPtr Callback;
            internal IntPtr Data;
        }

        public ref struct Marshaller
        {
            private MyCallbackVoid _managed;
            private Unmanaged _unmanaged;

            public Marshaller(MyCallbackVoid managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(MyCallbackVoid managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public Unmanaged ToUnmanaged()
            {
                _unmanaged = new Unmanaged();
                _unmanaged.Callback = _managed?._ptr ?? IntPtr.Zero;
                _unmanaged.Data = IntPtr.Zero;
                return _unmanaged;
            }

            public MyCallbackVoid ToManaged()
            {
                _managed = new MyCallbackVoid();
                _managed._ptr = _unmanaged.Callback;
                return _managed;
            }

            public void Free() { }
        }
    }


    // Debug - write_type_definition_named_callback 
    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void SumDelegate1Native(IntPtr callback_data); // 'True' native callback signature
    public delegate void SumDelegate1Delegate(); // Our C# signature

    public partial class SumDelegate1
    {
        private SumDelegate1Delegate _managed; // C# callback
        private SumDelegate1Native _native; // Native callback 
        private IntPtr _ptr; // Raw function pointer of native callback
        private Exception _exception; // Set if the callback encountered an Exception
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class SumDelegate1 : IDisposable
    {

        public SumDelegate1() { }

        public SumDelegate1(SumDelegate1Delegate managed)
        {
            _managed = managed;
            _native = CallTrampoline;
            _ptr = Marshal.GetFunctionPointerForDelegate(_native);
        }

        // Helper to invoke managed code from the native invocation.
        private void CallTrampoline(IntPtr callback_data)
        {
            // We ignore the last parameter, a generic callback pointer, as it's not needed in C#.
            try
            {
                _managed();
            }
            catch (Exception e)
            {
                _exception = e;
                return;
            }
        }

        // Invokes the callback.
        public void Call()
        {
            var __target = Marshal.GetDelegateForFunctionPointer<SumDelegate1Native>(_ptr);
            // TODO
            // __target();
            return;
        }

        public void Dispose()
        {
            // This means when the callback was invoked from Rust C# had an exception which
            // we caught (otherwise C# might not re-enter Rust, and we leak memory). Now is
            // the time to rethrow it.
            if (_exception != null) throw _exception;
        }

        [CustomMarshaller(typeof(SumDelegate1), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta {  }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            internal IntPtr Callback;
            internal IntPtr Data;
        }

        public ref struct Marshaller
        {
            private SumDelegate1 _managed;
            private Unmanaged _unmanaged;

            public Marshaller(SumDelegate1 managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(SumDelegate1 managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public Unmanaged ToUnmanaged()
            {
                _unmanaged = new Unmanaged();
                _unmanaged.Callback = _managed?._ptr ?? IntPtr.Zero;
                _unmanaged.Data = IntPtr.Zero;
                return _unmanaged;
            }

            public SumDelegate1 ToManaged()
            {
                _managed = new SumDelegate1();
                _managed._ptr = _unmanaged.Callback;
                return _managed;
            }

            public void Free() { }
        }
    }


    // Debug - write_type_definition_named_callback 
    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate int SumDelegate2Native(int x, int y, IntPtr callback_data); // 'True' native callback signature
    public delegate int SumDelegate2Delegate(int x, int y); // Our C# signature

    public partial class SumDelegate2
    {
        private SumDelegate2Delegate _managed; // C# callback
        private SumDelegate2Native _native; // Native callback 
        private IntPtr _ptr; // Raw function pointer of native callback
        private Exception _exception; // Set if the callback encountered an Exception
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class SumDelegate2 : IDisposable
    {

        public SumDelegate2() { }

        public SumDelegate2(SumDelegate2Delegate managed)
        {
            _managed = managed;
            _native = CallTrampoline;
            _ptr = Marshal.GetFunctionPointerForDelegate(_native);
        }

        // Helper to invoke managed code from the native invocation.
        private int CallTrampoline(int x, int y, IntPtr callback_data)
        {
            // We ignore the last parameter, a generic callback pointer, as it's not needed in C#.
            try
            {
                return _managed(x, y);
            }
            catch (Exception e)
            {
                _exception = e;
                return default;
            }
        }

        // Invokes the callback.
        public int Call(int x, int y)
        {
            var __target = Marshal.GetDelegateForFunctionPointer<SumDelegate2Native>(_ptr);
            // TODO
            // return __target(x, y);
            return default;
        }

        public void Dispose()
        {
            // This means when the callback was invoked from Rust C# had an exception which
            // we caught (otherwise C# might not re-enter Rust, and we leak memory). Now is
            // the time to rethrow it.
            if (_exception != null) throw _exception;
        }

        [CustomMarshaller(typeof(SumDelegate2), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta {  }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            internal IntPtr Callback;
            internal IntPtr Data;
        }

        public ref struct Marshaller
        {
            private SumDelegate2 _managed;
            private Unmanaged _unmanaged;

            public Marshaller(SumDelegate2 managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(SumDelegate2 managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public Unmanaged ToUnmanaged()
            {
                _unmanaged = new Unmanaged();
                _unmanaged.Callback = _managed?._ptr ?? IntPtr.Zero;
                _unmanaged.Data = IntPtr.Zero;
                return _unmanaged;
            }

            public SumDelegate2 ToManaged()
            {
                _managed = new SumDelegate2();
                _managed._ptr = _unmanaged.Callback;
                return _managed;
            }

            public void Free() { }
        }
    }


    // Debug - write_type_definition_named_callback 
    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate ResultFFIError SumDelegateReturnNative(int x, int y, IntPtr callback_data); // 'True' native callback signature
    public delegate ResultFFIError SumDelegateReturnDelegate(int x, int y); // Our C# signature

    public partial class SumDelegateReturn
    {
        private SumDelegateReturnDelegate _managed; // C# callback
        private SumDelegateReturnNative _native; // Native callback 
        private IntPtr _ptr; // Raw function pointer of native callback
        private Exception _exception; // Set if the callback encountered an Exception
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class SumDelegateReturn : IDisposable
    {

        public SumDelegateReturn() { }

        public SumDelegateReturn(SumDelegateReturnDelegate managed)
        {
            _managed = managed;
            _native = CallTrampoline;
            _ptr = Marshal.GetFunctionPointerForDelegate(_native);
        }

        // Helper to invoke managed code from the native invocation.
        private ResultFFIError CallTrampoline(int x, int y, IntPtr callback_data)
        {
            // We ignore the last parameter, a generic callback pointer, as it's not needed in C#.
            try
            {
                return _managed(x, y);
            }
            catch (Exception e)
            {
                _exception = e;
                return new ResultFFIError(FFIError.Panic);
            }
        }

        // Invokes the callback.
        public ResultFFIError Call(int x, int y)
        {
            var __target = Marshal.GetDelegateForFunctionPointer<SumDelegateReturnNative>(_ptr);
            // TODO
            // return __target(x, y);
            return new ResultFFIError(FFIError.Panic);
        }

        public void Dispose()
        {
            // This means when the callback was invoked from Rust C# had an exception which
            // we caught (otherwise C# might not re-enter Rust, and we leak memory). Now is
            // the time to rethrow it.
            if (_exception != null) throw _exception;
        }

        [CustomMarshaller(typeof(SumDelegateReturn), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta {  }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            internal IntPtr Callback;
            internal IntPtr Data;
        }

        public ref struct Marshaller
        {
            private SumDelegateReturn _managed;
            private Unmanaged _unmanaged;

            public Marshaller(SumDelegateReturn managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(SumDelegateReturn managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public Unmanaged ToUnmanaged()
            {
                _unmanaged = new Unmanaged();
                _unmanaged.Callback = _managed?._ptr ?? IntPtr.Zero;
                _unmanaged.Data = IntPtr.Zero;
                return _unmanaged;
            }

            public SumDelegateReturn ToManaged()
            {
                _managed = new SumDelegateReturn();
                _managed._ptr = _unmanaged.Callback;
                return _managed;
            }

            public void Free() { }
        }
    }


    // Debug - write_type_definition_named_callback 
    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void SumDelegateReturn2Native(int x, int y, IntPtr callback_data); // 'True' native callback signature
    public delegate void SumDelegateReturn2Delegate(int x, int y); // Our C# signature

    public partial class SumDelegateReturn2
    {
        private SumDelegateReturn2Delegate _managed; // C# callback
        private SumDelegateReturn2Native _native; // Native callback 
        private IntPtr _ptr; // Raw function pointer of native callback
        private Exception _exception; // Set if the callback encountered an Exception
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class SumDelegateReturn2 : IDisposable
    {

        public SumDelegateReturn2() { }

        public SumDelegateReturn2(SumDelegateReturn2Delegate managed)
        {
            _managed = managed;
            _native = CallTrampoline;
            _ptr = Marshal.GetFunctionPointerForDelegate(_native);
        }

        // Helper to invoke managed code from the native invocation.
        private void CallTrampoline(int x, int y, IntPtr callback_data)
        {
            // We ignore the last parameter, a generic callback pointer, as it's not needed in C#.
            try
            {
                _managed(x, y);
            }
            catch (Exception e)
            {
                _exception = e;
                return;
            }
        }

        // Invokes the callback.
        public void Call(int x, int y)
        {
            var __target = Marshal.GetDelegateForFunctionPointer<SumDelegateReturn2Native>(_ptr);
            // TODO
            // __target(x, y);
            return;
        }

        public void Dispose()
        {
            // This means when the callback was invoked from Rust C# had an exception which
            // we caught (otherwise C# might not re-enter Rust, and we leak memory). Now is
            // the time to rethrow it.
            if (_exception != null) throw _exception;
        }

        [CustomMarshaller(typeof(SumDelegateReturn2), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta {  }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            internal IntPtr Callback;
            internal IntPtr Data;
        }

        public ref struct Marshaller
        {
            private SumDelegateReturn2 _managed;
            private Unmanaged _unmanaged;

            public Marshaller(SumDelegateReturn2 managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(SumDelegateReturn2 managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public Unmanaged ToUnmanaged()
            {
                _unmanaged = new Unmanaged();
                _unmanaged.Callback = _managed?._ptr ?? IntPtr.Zero;
                _unmanaged.Data = IntPtr.Zero;
                return _unmanaged;
            }

            public SumDelegateReturn2 ToManaged()
            {
                _managed = new SumDelegateReturn2();
                _managed._ptr = _unmanaged.Callback;
                return _managed;
            }

            public void Free() { }
        }
    }



    // Debug - write_pattern_service 
    public partial class ServiceAsync : IDisposable
    {
        private IntPtr _context;

        private ServiceAsync() {}

        // Debug - write_pattern_service_method 
        public static ServiceAsync New()
        {
            var self = new ServiceAsync();
            self._context = Interop.service_async_new().Ok();
            return self;
        }

        // Debug - write_pattern_service_method 
        public void Dispose()
        {
            Interop.service_async_destroy(_context).Ok();
        }

        // Debug - write_pattern_service_method 
        public Task<ulong> ReturnAfterMs(ulong x, ulong ms)
        {
            return Interop.service_async_return_after_ms(_context, x, ms);
        }
        // Debug - write_service_method_overload 

        // Debug - write_pattern_service_method 
        public Task<NestedArray> ProcessStruct(NestedArray x)
        {
            return Interop.service_async_process_struct(_context, x);
        }
        // Debug - write_service_method_overload 

        // Debug - write_pattern_service_method 
        public Task<string> HandleString(string s)
        {
            return Interop.service_async_handle_string(_context, s);
        }
        // Debug - write_service_method_overload 

        // Debug - write_pattern_service_method 
        public Task<UseUtf8String> HandleNestedString(string s)
        {
            return Interop.service_async_handle_nested_string(_context, s);
        }
        // Debug - write_service_method_overload 

        // Debug - write_pattern_service_method 
        public Task Fail()
        {
            return Interop.service_async_fail(_context);
        }
        // Debug - write_service_method_overload 

        // Debug - write_pattern_service_method 
        public void Bad()
        {
            Interop.service_async_bad(_context);
        }
        // Debug - write_service_method_overload 

        public IntPtr Context => _context;
    }


    // Debug - write_pattern_service 
    public partial class ServiceBasic : IDisposable
    {
        private IntPtr _context;

        private ServiceBasic() {}

        // Debug - write_pattern_service_method 
        public static ServiceBasic New()
        {
            var self = new ServiceBasic();
            self._context = Interop.service_basic_new().Ok();
            return self;
        }

        // Debug - write_pattern_service_method 
        public void Dispose()
        {
            Interop.service_basic_destroy(_context).Ok();
        }

        public IntPtr Context => _context;
    }


    // Debug - write_pattern_service 
    public partial class ServiceResult : IDisposable
    {
        private IntPtr _context;

        private ServiceResult() {}

        // Debug - write_pattern_service_method 
        public static ServiceResult New()
        {
            var self = new ServiceResult();
            self._context = Interop.service_result_new().Ok();
            return self;
        }

        // Debug - write_pattern_service_method 
        public void Dispose()
        {
            Interop.service_result_destroy(_context).Ok();
        }

        // Debug - write_pattern_service_method 
        public void Test()
        {
            Interop.service_result_test(_context).Ok();
        }
        // Debug - write_service_method_overload 

        public IntPtr Context => _context;
    }


    // Debug - write_pattern_service 
    /// Some struct we want to expose as a class.
    public partial class ServiceOnPanic : IDisposable
    {
        private IntPtr _context;

        private ServiceOnPanic() {}

        // Debug - write_pattern_service_method 
        public static ServiceOnPanic New()
        {
            var self = new ServiceOnPanic();
            self._context = Interop.service_on_panic_new().Ok();
            return self;
        }

        // Debug - write_pattern_service_method 
        public void Dispose()
        {
            Interop.service_on_panic_destroy(_context).Ok();
        }

        /// Methods returning a Result<(), _> are the default and do not
        /// need annotations.
        // Debug - write_pattern_service_method 
        public void ReturnResult(uint anon1)
        {
            Interop.service_on_panic_return_result(_context, anon1).Ok();
        }
        // Debug - write_service_method_overload 

        /// Methods returning a value need an `on_panic` annotation.
        // Debug - write_pattern_service_method 
        public uint ReturnDefaultValue(uint x)
        {
            return Interop.service_on_panic_return_default_value(_context, x);
        }
        // Debug - write_service_method_overload 

        /// This function has no panic safeguards. It will be a bit faster to
        /// call, but if it panics your host app will abort.
        // Debug - write_pattern_service_method 
        public string ReturnUbOnPanic()
        {
            var s = Interop.service_on_panic_return_ub_on_panic(_context);
            return Marshal.PtrToStringAnsi(s);
        }
        // Debug - write_service_method_overload 

        public IntPtr Context => _context;
    }


    // Debug - write_pattern_service 
    /// Some struct we want to expose as a class.
    public partial class ServiceCallbacks : IDisposable
    {
        private IntPtr _context;

        private ServiceCallbacks() {}

        // Debug - write_pattern_service_method 
        public static ServiceCallbacks New()
        {
            var self = new ServiceCallbacks();
            self._context = Interop.service_callbacks_new().Ok();
            return self;
        }

        // Debug - write_pattern_service_method 
        public void Dispose()
        {
            Interop.service_callbacks_destroy(_context).Ok();
        }

        // Debug - write_pattern_service_method 
        public void CallbackSimple(MyCallback callback)
        {
            Interop.service_callbacks_callback_simple(_context, callback).Ok();
        }
        // Debug - write_service_method_overload 

        // Debug - write_common_service_method_overload 
        public ResultFFIError CallbackSimple(MyCallbackDelegate callback)
        {
            return Interop.service_callbacks_callback_simple(_context, callback);
        }

        // Debug - write_pattern_service_method 
        public void CallbackFfiReturn(SumDelegateReturn callback)
        {
            Interop.service_callbacks_callback_ffi_return(_context, callback).Ok();
        }
        // Debug - write_service_method_overload 

        // Debug - write_common_service_method_overload 
        public ResultFFIError CallbackFfiReturn(SumDelegateReturnDelegate callback)
        {
            return Interop.service_callbacks_callback_ffi_return(_context, callback);
        }

        // Debug - write_pattern_service_method 
        public void CallbackWithSlice(SumDelegateReturn callback, SliceI32 input)
        {
            Interop.service_callbacks_callback_with_slice(_context, callback, input).Ok();
        }
        // Debug - write_service_method_overload 

        // Debug - write_common_service_method_overload 
        public ResultFFIError CallbackWithSlice(SumDelegateReturnDelegate callback, ReadOnlySpan<int> input)
        {
            return Interop.service_callbacks_callback_with_slice(_context, callback, input);
        }

        // Debug - write_pattern_service_method 
        public void SetDelegateTable(CallbackTable table)
        {
            Interop.service_callbacks_set_delegate_table(_context, table);
        }
        // Debug - write_service_method_overload 

        // Debug - write_pattern_service_method 
        public void InvokeDelegates()
        {
            Interop.service_callbacks_invoke_delegates(_context).Ok();
        }
        // Debug - write_service_method_overload 

        public IntPtr Context => _context;
    }


    // Debug - write_pattern_service 
    public partial class ServiceIgnoringMethods : IDisposable
    {
        private IntPtr _context;

        private ServiceIgnoringMethods() {}

        // Debug - write_pattern_service_method 
        public static ServiceIgnoringMethods New()
        {
            var self = new ServiceIgnoringMethods();
            self._context = Interop.service_ignoring_methods_new().Ok();
            return self;
        }

        // Debug - write_pattern_service_method 
        public void Dispose()
        {
            Interop.service_ignoring_methods_destroy(_context).Ok();
        }

        public IntPtr Context => _context;
    }


    // Debug - write_pattern_service 
    /// Some struct we want to expose as a class.
    public partial class ServiceMultipleCtors : IDisposable
    {
        private IntPtr _context;

        private ServiceMultipleCtors() {}

        // Debug - write_pattern_service_method 
        public static ServiceMultipleCtors NewWith(uint some_value)
        {
            var self = new ServiceMultipleCtors();
            self._context = Interop.service_multiple_ctors_new_with(some_value).Ok();
            return self;
        }

        // Debug - write_pattern_service_method 
        public static ServiceMultipleCtors NewWithout()
        {
            var self = new ServiceMultipleCtors();
            self._context = Interop.service_multiple_ctors_new_without().Ok();
            return self;
        }

        // Debug - write_pattern_service_method 
        public static ServiceMultipleCtors NewWithString([MarshalAs(UnmanagedType.LPStr)] string anon0)
        {
            var self = new ServiceMultipleCtors();
            self._context = Interop.service_multiple_ctors_new_with_string(anon0).Ok();
            return self;
        }

        // Debug - write_pattern_service_method 
        public static ServiceMultipleCtors NewFailing(byte some_value)
        {
            var self = new ServiceMultipleCtors();
            self._context = Interop.service_multiple_ctors_new_failing(some_value).Ok();
            return self;
        }

        // Debug - write_pattern_service_method 
        public void Dispose()
        {
            Interop.service_multiple_ctors_destroy(_context).Ok();
        }

        public IntPtr Context => _context;
    }


    // Debug - write_pattern_service 
    /// Some struct we want to expose as a class.
    public partial class ServiceVariousSlices : IDisposable
    {
        private IntPtr _context;

        private ServiceVariousSlices() {}

        // Debug - write_pattern_service_method 
        public static ServiceVariousSlices New()
        {
            var self = new ServiceVariousSlices();
            self._context = Interop.service_various_slices_new().Ok();
            return self;
        }

        // Debug - write_pattern_service_method 
        public void Dispose()
        {
            Interop.service_various_slices_destroy(_context).Ok();
        }

        // Debug - write_pattern_service_method 
        public byte MutSelf(SliceU8 slice)
        {
            return Interop.service_various_slices_mut_self(_context, slice);
        }
        // Debug - write_service_method_overload 

        // Debug - write_common_service_method_overload 
        public byte MutSelf(ReadOnlySpan<byte> slice)
        {
            return Interop.service_various_slices_mut_self(_context, slice);
        }

        /// Single line.
        // Debug - write_pattern_service_method 
        public void MutSelfVoid(SliceBool slice)
        {
            Interop.service_various_slices_mut_self_void(_context, slice);
        }
        // Debug - write_service_method_overload 

        /// Single line.
        // Debug - write_common_service_method_overload 
        public void MutSelfVoid(ReadOnlySpan<Bool> slice)
        {
            Interop.service_various_slices_mut_self_void(_context, slice);
        }

        // Debug - write_pattern_service_method 
        public byte MutSelfRef(ref byte x, out byte y)
        {
            return Interop.service_various_slices_mut_self_ref(_context, ref x, out y);
        }
        // Debug - write_service_method_overload 

        // Debug - write_pattern_service_method 
        public byte MutSelfRefSlice(ref byte x, out byte y, SliceU8 slice)
        {
            return Interop.service_various_slices_mut_self_ref_slice(_context, ref x, out y, slice);
        }
        // Debug - write_service_method_overload 

        // Debug - write_common_service_method_overload 
        public byte MutSelfRefSlice(ref byte x, out byte y, ReadOnlySpan<byte> slice)
        {
            return Interop.service_various_slices_mut_self_ref_slice(_context, ref x, out y, slice);
        }

        // Debug - write_pattern_service_method 
        public byte MutSelfRefSliceLimited(ref byte x, out byte y, SliceU8 slice, SliceU8 slice2)
        {
            return Interop.service_various_slices_mut_self_ref_slice_limited(_context, ref x, out y, slice, slice2);
        }
        // Debug - write_service_method_overload 

        // Debug - write_common_service_method_overload 
        public byte MutSelfRefSliceLimited(ref byte x, out byte y, ReadOnlySpan<byte> slice, ReadOnlySpan<byte> slice2)
        {
            return Interop.service_various_slices_mut_self_ref_slice_limited(_context, ref x, out y, slice, slice2);
        }

        // Debug - write_pattern_service_method 
        public void MutSelfFfiError(SliceMutU8 slice)
        {
            Interop.service_various_slices_mut_self_ffi_error(_context, slice).Ok();
        }
        // Debug - write_service_method_overload 

        // Debug - write_common_service_method_overload 
        public ResultFFIError MutSelfFfiError(Span<byte> slice)
        {
            return Interop.service_various_slices_mut_self_ffi_error(_context, slice);
        }

        // Debug - write_pattern_service_method 
        public void MutSelfNoError(SliceMutU8 slice)
        {
            Interop.service_various_slices_mut_self_no_error(_context, slice).Ok();
        }
        // Debug - write_service_method_overload 

        // Debug - write_common_service_method_overload 
        public ResultFFIError MutSelfNoError(Span<byte> slice)
        {
            return Interop.service_various_slices_mut_self_no_error(_context, slice);
        }

        /// Warning, you _must_ discard the returned slice object before calling into this service
        /// again, as otherwise undefined behavior might happen.
        // Debug - write_pattern_service_method 
        public SliceU32 ReturnSlice()
        {
            return Interop.service_various_slices_return_slice(_context);
        }
        // Debug - write_service_method_overload 

        /// Warning, you _must_ discard the returned slice object before calling into this service
        /// again, as otherwise undefined behavior might happen.
        // Debug - write_pattern_service_method 
        public SliceMutU32 ReturnSliceMut()
        {
            return Interop.service_various_slices_return_slice_mut(_context);
        }
        // Debug - write_service_method_overload 

        public IntPtr Context => _context;
    }


    // Debug - write_pattern_service 
    /// Some struct we want to expose as a class.
    public partial class ServiceStrings : IDisposable
    {
        private IntPtr _context;

        private ServiceStrings() {}

        // Debug - write_pattern_service_method 
        public static ServiceStrings New()
        {
            var self = new ServiceStrings();
            self._context = Interop.service_strings_new().Ok();
            return self;
        }

        // Debug - write_pattern_service_method 
        public void Dispose()
        {
            Interop.service_strings_destroy(_context).Ok();
        }

        // Debug - write_pattern_service_method 
        public void PassString([MarshalAs(UnmanagedType.LPStr)] string anon1)
        {
            Interop.service_strings_pass_string(_context, anon1);
        }
        // Debug - write_service_method_overload 

        // Debug - write_pattern_service_method 
        public string ReturnString()
        {
            var s = Interop.service_strings_return_string(_context);
            return Marshal.PtrToStringAnsi(s);
        }
        // Debug - write_service_method_overload 

        public IntPtr Context => _context;
    }



}
