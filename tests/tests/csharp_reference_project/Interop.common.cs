// Automatically generated by Interoptopus.

// Debug - write_imports 
#pragma warning disable 0105
using System;
using System.Text;
using System.Threading.Tasks;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Runtime.InteropServices.Marshalling;
using System.Runtime.CompilerServices;
using My.Company;
using My.Company.Common;
#pragma warning restore 0105

// Debug - write_namespace_context 
namespace My.Company.Common
{

    // Debug - write_type_definition_enum 
    /// Documented enum.
    // Debug - write_type_definition_enum_marshaller 
    public partial struct EnumDocumented
    {
    // Debug - write_type_definition_enum_variant_fields_managed 
        uint _variant;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct EnumDocumented
    {
    // Debug - write_type_definition_enum_variant_unmanaged_types 



        [StructLayout(LayoutKind.Explicit)]
        public unsafe struct Unmanaged
        {
    // Debug - write_type_definition_enum_variant_fields_unmanaged 
            [FieldOffset(0)]
            internal uint _variant;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public EnumDocumented ToManaged()
            {
                var _managed = new EnumDocumented();
                _managed._variant = _variant;
    // Debug - write_type_definition_enum_variant_fields_to_managed 
                return _managed;
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public Unmanaged ToUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged._variant = _variant;
    // Debug - write_type_definition_enum_variant_fields_to_unmanaged 
            return _unmanaged;
        }

        [CustomMarshaller(typeof(EnumDocumented), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

    // Debug - write_type_definition_enum_variant_utils 
        public static EnumDocumented A => new() { _variant = 0 };
        public static EnumDocumented B => new() { _variant = 1 };
        public static EnumDocumented C => new() { _variant = 2 };

        public bool IsA => _variant == 0;
        public bool IsB => _variant == 1;
        public bool IsC => _variant == 2;

        public void AsA() { if (_variant != 0) throw new InteropException(); }
        public void AsB() { if (_variant != 1) throw new InteropException(); }
        public void AsC() { if (_variant != 2) throw new InteropException(); }

        public ref struct Marshaller
        {
            private EnumDocumented _managed;
            private Unmanaged _unmanaged;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(EnumDocumented managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromManaged(EnumDocumented managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Unmanaged ToUnmanaged() { return _managed.ToUnmanaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public EnumDocumented ToManaged() { return _unmanaged.ToManaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void Free() { }
        }

    }

    // Debug - write_type_definition_enum 
    // Debug - write_type_definition_enum_marshaller 
    public partial struct EnumRenamed
    {
    // Debug - write_type_definition_enum_variant_fields_managed 
        uint _variant;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct EnumRenamed
    {
    // Debug - write_type_definition_enum_variant_unmanaged_types 

        [StructLayout(LayoutKind.Explicit)]
        public unsafe struct Unmanaged
        {
    // Debug - write_type_definition_enum_variant_fields_unmanaged 
            [FieldOffset(0)]
            internal uint _variant;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public EnumRenamed ToManaged()
            {
                var _managed = new EnumRenamed();
                _managed._variant = _variant;
    // Debug - write_type_definition_enum_variant_fields_to_managed 
                return _managed;
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public Unmanaged ToUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged._variant = _variant;
    // Debug - write_type_definition_enum_variant_fields_to_unmanaged 
            return _unmanaged;
        }

        [CustomMarshaller(typeof(EnumRenamed), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

    // Debug - write_type_definition_enum_variant_utils 
        public static EnumRenamed X => new() { _variant = 0 };

        public bool IsX => _variant == 0;

        public void AsX() { if (_variant != 0) throw new InteropException(); }

        public ref struct Marshaller
        {
            private EnumRenamed _managed;
            private Unmanaged _unmanaged;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(EnumRenamed managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromManaged(EnumRenamed managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Unmanaged ToUnmanaged() { return _managed.ToUnmanaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public EnumRenamed ToManaged() { return _unmanaged.ToManaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void Free() { }
        }

    }

    // Debug - write_type_definition_enum 
    // Debug - write_type_definition_enum_marshaller 
    public partial struct Error
    {
    // Debug - write_type_definition_enum_variant_fields_managed 
        uint _variant;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct Error
    {
    // Debug - write_type_definition_enum_variant_unmanaged_types 

        [StructLayout(LayoutKind.Explicit)]
        public unsafe struct Unmanaged
        {
    // Debug - write_type_definition_enum_variant_fields_unmanaged 
            [FieldOffset(0)]
            internal uint _variant;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Error ToManaged()
            {
                var _managed = new Error();
                _managed._variant = _variant;
    // Debug - write_type_definition_enum_variant_fields_to_managed 
                return _managed;
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public Unmanaged ToUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged._variant = _variant;
    // Debug - write_type_definition_enum_variant_fields_to_unmanaged 
            return _unmanaged;
        }

        [CustomMarshaller(typeof(Error), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

    // Debug - write_type_definition_enum_variant_utils 
        public static Error Fail => new() { _variant = 0 };

        public bool IsFail => _variant == 0;

        public void AsFail() { if (_variant != 0) throw new InteropException(); }

        public ref struct Marshaller
        {
            private Error _managed;
            private Unmanaged _unmanaged;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Error managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromManaged(Error managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Unmanaged ToUnmanaged() { return _managed.ToUnmanaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Error ToManaged() { return _unmanaged.ToManaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void Free() { }
        }

    }

    // Debug - write_type_definition_composite 
    public partial struct Vec
    {
        public double x;
        public double z;
    }

    // Debug - write_type_definition_composite_marshaller 
    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct Vec
    {
        public Vec() { }

        public unsafe Unmanaged ToUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged.x = x;
            _unmanaged.z = z;
            return _unmanaged;
        }

        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public double x;
            public double z;

            public unsafe Vec ToManaged()
            {
                var _managed = new Vec();
                _managed.x = x;
                _managed.z = z;
                return _managed;
            }
        }

        [CustomMarshaller(typeof(Vec), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }
        public ref struct Marshaller
        {
            private Vec _managed;
            private Unmanaged _unmanaged;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Vec managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromManaged(Vec managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Unmanaged ToUnmanaged() { return _managed.ToUnmanaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Vec ToManaged() { return _unmanaged.ToManaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void Free() { }
        }

    }

    // Debug - write_type_definition_fn_pointer 
    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate byte InteropDelegate_fn_u8_rval_u8(byte x0);

    // Debug - write_type_definition_fn_pointer 
    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void InteropDelegate_fn_CharArray(CharArray x0);
    public delegate void InteropDelegate_fn_CharArray_native(CharArray.Unmanaged x0);

    // Debug - write_pattern_fast_slice 
    public partial class SliceBool
    {
        GCHandle _handle;
        IntPtr _data;
        ulong _len;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class SliceBool : IEnumerable<Bool>, IDisposable
    {
        public int Count => (int) _len;

        public unsafe ReadOnlySpan<Bool> ReadOnlySpan
        {
            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            get => new(_data.ToPointer(), (int)_len);
        }

        public unsafe Bool this[int i]
        {
            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            get
            {
                if (i >= Count) throw new IndexOutOfRangeException();
                return Unsafe.Read<Bool>((void*)IntPtr.Add(_data, i * Unsafe.SizeOf<Bool>()));
            }

        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        SliceBool() { }

        public static SliceBool From(IntPtr data, ulong len)
        {
            var rval = new SliceBool();
            rval._data = data;
            rval._len = len;
            return rval;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static SliceBool From(Bool[] managed)
        {
            var rval = new SliceBool();
            rval._handle = GCHandle.Alloc(managed, GCHandleType.Pinned);
            rval._data = rval._handle.AddrOfPinnedObject();
            rval._len = (ulong) managed.Length;
            return rval;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public IEnumerator<Bool> GetEnumerator()
        {
            for (var i = 0; i < Count; ++i) { yield return this[i]; }
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public void Dispose()
        {
            if (_handle is { IsAllocated: true }) { _handle.Free(); }
        }

        internal Unmanaged ToUnmanaged()
        {
            var unmanaged = new Unmanaged();
            unmanaged._data = _data;
            unmanaged._len = _len; 
            return unmanaged;
        }


        [CustomMarshaller(typeof(SliceBool), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            public IntPtr _data;
            public ulong _len;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            internal SliceBool ToManaged()
            {
                return SliceBool.From(_data, _len);
            }
        }

        public ref struct Marshaller
        {
            private SliceBool _managed;
            private Unmanaged _unmanaged;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(SliceBool managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromManaged(SliceBool managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Unmanaged ToUnmanaged() { return _managed.ToUnmanaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public SliceBool ToManaged() { return _unmanaged.ToManaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void Free() { }
        }

    }

    // Debug - write_pattern_fast_slice 
    public partial class SliceI32
    {
        GCHandle _handle;
        IntPtr _data;
        ulong _len;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class SliceI32 : IEnumerable<int>, IDisposable
    {
        public int Count => (int) _len;

        public unsafe ReadOnlySpan<int> ReadOnlySpan
        {
            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            get => new(_data.ToPointer(), (int)_len);
        }

        public unsafe int this[int i]
        {
            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            get
            {
                if (i >= Count) throw new IndexOutOfRangeException();
                return Unsafe.Read<int>((void*)IntPtr.Add(_data, i * Unsafe.SizeOf<int>()));
            }

        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        SliceI32() { }

        public static SliceI32 From(IntPtr data, ulong len)
        {
            var rval = new SliceI32();
            rval._data = data;
            rval._len = len;
            return rval;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static SliceI32 From(int[] managed)
        {
            var rval = new SliceI32();
            rval._handle = GCHandle.Alloc(managed, GCHandleType.Pinned);
            rval._data = rval._handle.AddrOfPinnedObject();
            rval._len = (ulong) managed.Length;
            return rval;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public IEnumerator<int> GetEnumerator()
        {
            for (var i = 0; i < Count; ++i) { yield return this[i]; }
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public void Dispose()
        {
            if (_handle is { IsAllocated: true }) { _handle.Free(); }
        }

        internal Unmanaged ToUnmanaged()
        {
            var unmanaged = new Unmanaged();
            unmanaged._data = _data;
            unmanaged._len = _len; 
            return unmanaged;
        }


        [CustomMarshaller(typeof(SliceI32), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            public IntPtr _data;
            public ulong _len;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            internal SliceI32 ToManaged()
            {
                return SliceI32.From(_data, _len);
            }
        }

        public ref struct Marshaller
        {
            private SliceI32 _managed;
            private Unmanaged _unmanaged;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(SliceI32 managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromManaged(SliceI32 managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Unmanaged ToUnmanaged() { return _managed.ToUnmanaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public SliceI32 ToManaged() { return _unmanaged.ToManaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void Free() { }
        }

    }

    // Debug - write_pattern_fast_slice 
    public partial class SliceU32
    {
        GCHandle _handle;
        IntPtr _data;
        ulong _len;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class SliceU32 : IEnumerable<uint>, IDisposable
    {
        public int Count => (int) _len;

        public unsafe ReadOnlySpan<uint> ReadOnlySpan
        {
            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            get => new(_data.ToPointer(), (int)_len);
        }

        public unsafe uint this[int i]
        {
            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            get
            {
                if (i >= Count) throw new IndexOutOfRangeException();
                return Unsafe.Read<uint>((void*)IntPtr.Add(_data, i * Unsafe.SizeOf<uint>()));
            }

        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        SliceU32() { }

        public static SliceU32 From(IntPtr data, ulong len)
        {
            var rval = new SliceU32();
            rval._data = data;
            rval._len = len;
            return rval;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static SliceU32 From(uint[] managed)
        {
            var rval = new SliceU32();
            rval._handle = GCHandle.Alloc(managed, GCHandleType.Pinned);
            rval._data = rval._handle.AddrOfPinnedObject();
            rval._len = (ulong) managed.Length;
            return rval;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public IEnumerator<uint> GetEnumerator()
        {
            for (var i = 0; i < Count; ++i) { yield return this[i]; }
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public void Dispose()
        {
            if (_handle is { IsAllocated: true }) { _handle.Free(); }
        }

        internal Unmanaged ToUnmanaged()
        {
            var unmanaged = new Unmanaged();
            unmanaged._data = _data;
            unmanaged._len = _len; 
            return unmanaged;
        }


        [CustomMarshaller(typeof(SliceU32), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            public IntPtr _data;
            public ulong _len;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            internal SliceU32 ToManaged()
            {
                return SliceU32.From(_data, _len);
            }
        }

        public ref struct Marshaller
        {
            private SliceU32 _managed;
            private Unmanaged _unmanaged;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(SliceU32 managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromManaged(SliceU32 managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Unmanaged ToUnmanaged() { return _managed.ToUnmanaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public SliceU32 ToManaged() { return _unmanaged.ToManaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void Free() { }
        }

    }

    // Debug - write_pattern_fast_slice 
    public partial class SliceU8
    {
        GCHandle _handle;
        IntPtr _data;
        ulong _len;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class SliceU8 : IEnumerable<byte>, IDisposable
    {
        public int Count => (int) _len;

        public unsafe ReadOnlySpan<byte> ReadOnlySpan
        {
            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            get => new(_data.ToPointer(), (int)_len);
        }

        public unsafe byte this[int i]
        {
            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            get
            {
                if (i >= Count) throw new IndexOutOfRangeException();
                return Unsafe.Read<byte>((void*)IntPtr.Add(_data, i * Unsafe.SizeOf<byte>()));
            }

        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        SliceU8() { }

        public static SliceU8 From(IntPtr data, ulong len)
        {
            var rval = new SliceU8();
            rval._data = data;
            rval._len = len;
            return rval;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static SliceU8 From(byte[] managed)
        {
            var rval = new SliceU8();
            rval._handle = GCHandle.Alloc(managed, GCHandleType.Pinned);
            rval._data = rval._handle.AddrOfPinnedObject();
            rval._len = (ulong) managed.Length;
            return rval;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public IEnumerator<byte> GetEnumerator()
        {
            for (var i = 0; i < Count; ++i) { yield return this[i]; }
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public void Dispose()
        {
            if (_handle is { IsAllocated: true }) { _handle.Free(); }
        }

        internal Unmanaged ToUnmanaged()
        {
            var unmanaged = new Unmanaged();
            unmanaged._data = _data;
            unmanaged._len = _len; 
            return unmanaged;
        }


        [CustomMarshaller(typeof(SliceU8), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            public IntPtr _data;
            public ulong _len;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            internal SliceU8 ToManaged()
            {
                return SliceU8.From(_data, _len);
            }
        }

        public ref struct Marshaller
        {
            private SliceU8 _managed;
            private Unmanaged _unmanaged;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(SliceU8 managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromManaged(SliceU8 managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Unmanaged ToUnmanaged() { return _managed.ToUnmanaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public SliceU8 ToManaged() { return _unmanaged.ToManaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void Free() { }
        }

    }

    // Debug - write_pattern_marshalling_slice 
    public partial class SliceUtf8String
    {
        IntPtr _data;
        ulong _len;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class SliceUtf8String : IDisposable
    {
        public int Count => (int) _len;

        public unsafe Utf8String this[int i]
        {
            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            get
            {
                if (i >= (int) _len) throw new IndexOutOfRangeException();
                if (_data == IntPtr.Zero) { throw new Exception(); }
                // TODO
                throw new Exception();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        SliceUtf8String() { }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static unsafe SliceUtf8String From(Utf8String[] managed)
        {
            var rval = new SliceUtf8String();
            var size = sizeof(Utf8String.Unmanaged);
            rval._data  = Marshal.AllocHGlobal(size * managed.Length);
            rval._len = (ulong) managed.Length;
            for (var i = 0; i < managed.Length; ++i)
            {
                var unmanaged = managed[i].IntoUnmanaged();
                var dst = IntPtr.Add(rval._data, i * size);
                Marshal.StructureToPtr(unmanaged, dst, false);
            }
            return rval;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public void Dispose()
        {
            if (_data == IntPtr.Zero) return;
            Marshal.FreeHGlobal(_data);
            _data = IntPtr.Zero;
        }

        internal Unmanaged ToUnmanaged()
        {
            var unmanaged = new Unmanaged();
            unmanaged._data = _data;
            unmanaged._len = _len; 
            return unmanaged;
        }


        [CustomMarshaller(typeof(SliceUtf8String), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            public IntPtr _data;
            public ulong _len;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            internal unsafe SliceUtf8String ToManaged()
            {
                var _managed = new SliceUtf8String();
                _managed._data = _data;
                _managed._len = _len;
                return _managed;
            }

        }

        public ref struct Marshaller
        {
            private SliceUtf8String _managed;
            private Unmanaged _unmanaged;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(SliceUtf8String managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromManaged(SliceUtf8String managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Unmanaged ToUnmanaged() { return _managed.ToUnmanaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public SliceUtf8String ToManaged() { return _unmanaged.ToManaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void Free() { }
        }

    }

    // Debug - write_pattern_fast_slice 
    public partial class SliceVec
    {
        GCHandle _handle;
        IntPtr _data;
        ulong _len;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class SliceVec : IEnumerable<Vec>, IDisposable
    {
        public int Count => (int) _len;

        public unsafe ReadOnlySpan<Vec> ReadOnlySpan
        {
            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            get => new(_data.ToPointer(), (int)_len);
        }

        public unsafe Vec this[int i]
        {
            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            get
            {
                if (i >= Count) throw new IndexOutOfRangeException();
                return Unsafe.Read<Vec>((void*)IntPtr.Add(_data, i * Unsafe.SizeOf<Vec>()));
            }

        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        SliceVec() { }

        public static SliceVec From(IntPtr data, ulong len)
        {
            var rval = new SliceVec();
            rval._data = data;
            rval._len = len;
            return rval;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static SliceVec From(Vec[] managed)
        {
            var rval = new SliceVec();
            rval._handle = GCHandle.Alloc(managed, GCHandleType.Pinned);
            rval._data = rval._handle.AddrOfPinnedObject();
            rval._len = (ulong) managed.Length;
            return rval;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public IEnumerator<Vec> GetEnumerator()
        {
            for (var i = 0; i < Count; ++i) { yield return this[i]; }
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public void Dispose()
        {
            if (_handle is { IsAllocated: true }) { _handle.Free(); }
        }

        internal Unmanaged ToUnmanaged()
        {
            var unmanaged = new Unmanaged();
            unmanaged._data = _data;
            unmanaged._len = _len; 
            return unmanaged;
        }


        [CustomMarshaller(typeof(SliceVec), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            public IntPtr _data;
            public ulong _len;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            internal SliceVec ToManaged()
            {
                return SliceVec.From(_data, _len);
            }
        }

        public ref struct Marshaller
        {
            private SliceVec _managed;
            private Unmanaged _unmanaged;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(SliceVec managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromManaged(SliceVec managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Unmanaged ToUnmanaged() { return _managed.ToUnmanaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public SliceVec ToManaged() { return _unmanaged.ToManaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void Free() { }
        }

    }

    // Debug - write_pattern_fast_slice 
    public partial class SliceMutU32
    {
        GCHandle _handle;
        IntPtr _data;
        ulong _len;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class SliceMutU32 : IEnumerable<uint>, IDisposable
    {
        public int Count => (int) _len;

        public unsafe ReadOnlySpan<uint> ReadOnlySpan
        {
            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            get => new(_data.ToPointer(), (int)_len);
        }

        public unsafe uint this[int i]
        {
            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            get
            {
                if (i >= Count) throw new IndexOutOfRangeException();
                return Unsafe.Read<uint>((void*)IntPtr.Add(_data, i * Unsafe.SizeOf<uint>()));
            }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            set
            {
                if (i >= Count) throw new IndexOutOfRangeException();
                Unsafe.Write<uint>((void*)IntPtr.Add(_data, i * Unsafe.SizeOf<uint>()), value);
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        SliceMutU32() { }

        public static SliceMutU32 From(IntPtr data, ulong len)
        {
            var rval = new SliceMutU32();
            rval._data = data;
            rval._len = len;
            return rval;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static SliceMutU32 From(uint[] managed)
        {
            var rval = new SliceMutU32();
            rval._handle = GCHandle.Alloc(managed, GCHandleType.Pinned);
            rval._data = rval._handle.AddrOfPinnedObject();
            rval._len = (ulong) managed.Length;
            return rval;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public IEnumerator<uint> GetEnumerator()
        {
            for (var i = 0; i < Count; ++i) { yield return this[i]; }
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public void Dispose()
        {
            if (_handle is { IsAllocated: true }) { _handle.Free(); }
        }

        internal Unmanaged ToUnmanaged()
        {
            var unmanaged = new Unmanaged();
            unmanaged._data = _data;
            unmanaged._len = _len; 
            return unmanaged;
        }


        [CustomMarshaller(typeof(SliceMutU32), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            public IntPtr _data;
            public ulong _len;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            internal SliceMutU32 ToManaged()
            {
                return SliceMutU32.From(_data, _len);
            }
        }

        public ref struct Marshaller
        {
            private SliceMutU32 _managed;
            private Unmanaged _unmanaged;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(SliceMutU32 managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromManaged(SliceMutU32 managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Unmanaged ToUnmanaged() { return _managed.ToUnmanaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public SliceMutU32 ToManaged() { return _unmanaged.ToManaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void Free() { }
        }

    }

    // Debug - write_pattern_fast_slice 
    public partial class SliceMutU8
    {
        GCHandle _handle;
        IntPtr _data;
        ulong _len;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class SliceMutU8 : IEnumerable<byte>, IDisposable
    {
        public int Count => (int) _len;

        public unsafe ReadOnlySpan<byte> ReadOnlySpan
        {
            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            get => new(_data.ToPointer(), (int)_len);
        }

        public unsafe byte this[int i]
        {
            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            get
            {
                if (i >= Count) throw new IndexOutOfRangeException();
                return Unsafe.Read<byte>((void*)IntPtr.Add(_data, i * Unsafe.SizeOf<byte>()));
            }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            set
            {
                if (i >= Count) throw new IndexOutOfRangeException();
                Unsafe.Write<byte>((void*)IntPtr.Add(_data, i * Unsafe.SizeOf<byte>()), value);
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        SliceMutU8() { }

        public static SliceMutU8 From(IntPtr data, ulong len)
        {
            var rval = new SliceMutU8();
            rval._data = data;
            rval._len = len;
            return rval;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static SliceMutU8 From(byte[] managed)
        {
            var rval = new SliceMutU8();
            rval._handle = GCHandle.Alloc(managed, GCHandleType.Pinned);
            rval._data = rval._handle.AddrOfPinnedObject();
            rval._len = (ulong) managed.Length;
            return rval;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public IEnumerator<byte> GetEnumerator()
        {
            for (var i = 0; i < Count; ++i) { yield return this[i]; }
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public void Dispose()
        {
            if (_handle is { IsAllocated: true }) { _handle.Free(); }
        }

        internal Unmanaged ToUnmanaged()
        {
            var unmanaged = new Unmanaged();
            unmanaged._data = _data;
            unmanaged._len = _len; 
            return unmanaged;
        }


        [CustomMarshaller(typeof(SliceMutU8), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            public IntPtr _data;
            public ulong _len;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            internal SliceMutU8 ToManaged()
            {
                return SliceMutU8.From(_data, _len);
            }
        }

        public ref struct Marshaller
        {
            private SliceMutU8 _managed;
            private Unmanaged _unmanaged;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(SliceMutU8 managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromManaged(SliceMutU8 managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Unmanaged ToUnmanaged() { return _managed.ToUnmanaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public SliceMutU8 ToManaged() { return _unmanaged.ToManaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void Free() { }
        }

    }

    // Debug - write_pattern_fast_slice 
    public partial class SliceMutVec
    {
        GCHandle _handle;
        IntPtr _data;
        ulong _len;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class SliceMutVec : IEnumerable<Vec>, IDisposable
    {
        public int Count => (int) _len;

        public unsafe ReadOnlySpan<Vec> ReadOnlySpan
        {
            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            get => new(_data.ToPointer(), (int)_len);
        }

        public unsafe Vec this[int i]
        {
            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            get
            {
                if (i >= Count) throw new IndexOutOfRangeException();
                return Unsafe.Read<Vec>((void*)IntPtr.Add(_data, i * Unsafe.SizeOf<Vec>()));
            }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            set
            {
                if (i >= Count) throw new IndexOutOfRangeException();
                Unsafe.Write<Vec>((void*)IntPtr.Add(_data, i * Unsafe.SizeOf<Vec>()), value);
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        SliceMutVec() { }

        public static SliceMutVec From(IntPtr data, ulong len)
        {
            var rval = new SliceMutVec();
            rval._data = data;
            rval._len = len;
            return rval;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static SliceMutVec From(Vec[] managed)
        {
            var rval = new SliceMutVec();
            rval._handle = GCHandle.Alloc(managed, GCHandleType.Pinned);
            rval._data = rval._handle.AddrOfPinnedObject();
            rval._len = (ulong) managed.Length;
            return rval;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public IEnumerator<Vec> GetEnumerator()
        {
            for (var i = 0; i < Count; ++i) { yield return this[i]; }
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public void Dispose()
        {
            if (_handle is { IsAllocated: true }) { _handle.Free(); }
        }

        internal Unmanaged ToUnmanaged()
        {
            var unmanaged = new Unmanaged();
            unmanaged._data = _data;
            unmanaged._len = _len; 
            return unmanaged;
        }


        [CustomMarshaller(typeof(SliceMutVec), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            public IntPtr _data;
            public ulong _len;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            internal SliceMutVec ToManaged()
            {
                return SliceMutVec.From(_data, _len);
            }
        }

        public ref struct Marshaller
        {
            private SliceMutVec _managed;
            private Unmanaged _unmanaged;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(SliceMutVec managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromManaged(SliceMutVec managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Unmanaged ToUnmanaged() { return _managed.ToUnmanaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public SliceMutVec ToManaged() { return _unmanaged.ToManaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void Free() { }
        }

    }

    // Debug - write_type_definition_enum 
    ///Option that contains Some(value) or None.
    // Debug - write_type_definition_enum_marshaller 
    public partial class OptionOptionResultOptionUtf8StringError
    {
    // Debug - write_type_definition_enum_variant_fields_managed 
        uint _variant;
        OptionResultOptionUtf8StringError _Some;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class OptionOptionResultOptionUtf8StringError
    {
    // Debug - write_type_definition_enum_variant_unmanaged_types 
        [StructLayout(LayoutKind.Sequential)]
        internal unsafe struct UnmanagedSome
        {
            internal uint _variant;
            internal OptionResultOptionUtf8StringError.Unmanaged _Some;
        }


        [StructLayout(LayoutKind.Explicit)]
        public unsafe struct Unmanaged
        {
    // Debug - write_type_definition_enum_variant_fields_unmanaged 
            [FieldOffset(0)]
            internal uint _variant;

            [FieldOffset(0)]
            internal UnmanagedSome _Some;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public OptionOptionResultOptionUtf8StringError IntoManaged()
            {
                var _managed = new OptionOptionResultOptionUtf8StringError();
                _managed._variant = _variant;
    // Debug - write_type_definition_enum_variant_fields_to_managed 
                if (_variant == 0) _managed._Some = _Some._Some.IntoManaged();
                return _managed;
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public Unmanaged IntoUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged._variant = _variant;
    // Debug - write_type_definition_enum_variant_fields_to_unmanaged 
            if (_variant == 0) _unmanaged._Some._Some = _Some.IntoUnmanaged();
            return _unmanaged;
        }

        [CustomMarshaller(typeof(OptionOptionResultOptionUtf8StringError), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

    // Debug - write_type_definition_enum_variant_utils 
        public static OptionOptionResultOptionUtf8StringError Some(OptionResultOptionUtf8StringError value) => new() { _variant = 0, _Some = value };
        public static OptionOptionResultOptionUtf8StringError None => new() { _variant = 1 };

        public bool IsSome => _variant == 0;
        public bool IsNone => _variant == 1;

        public OptionResultOptionUtf8StringError AsSome() { if (_variant != 0) { throw new InteropException(); } else { return _Some; } }
        public void AsNone() { if (_variant != 1) throw new InteropException(); }

        public ref struct Marshaller
        {
            private OptionOptionResultOptionUtf8StringError _managed;
            private Unmanaged _unmanaged;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(OptionOptionResultOptionUtf8StringError managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromManaged(OptionOptionResultOptionUtf8StringError managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Unmanaged ToUnmanaged() { return _managed.IntoUnmanaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public OptionOptionResultOptionUtf8StringError ToManaged() { return _unmanaged.IntoManaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void Free() { }
        }

    }

    // Debug - write_type_definition_enum 
    ///Option that contains Some(value) or None.
    // Debug - write_type_definition_enum_marshaller 
    public partial class OptionResultOptionUtf8StringError
    {
    // Debug - write_type_definition_enum_variant_fields_managed 
        uint _variant;
        ResultOptionUtf8StringError _Some;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class OptionResultOptionUtf8StringError
    {
    // Debug - write_type_definition_enum_variant_unmanaged_types 
        [StructLayout(LayoutKind.Sequential)]
        internal unsafe struct UnmanagedSome
        {
            internal uint _variant;
            internal ResultOptionUtf8StringError.Unmanaged _Some;
        }


        [StructLayout(LayoutKind.Explicit)]
        public unsafe struct Unmanaged
        {
    // Debug - write_type_definition_enum_variant_fields_unmanaged 
            [FieldOffset(0)]
            internal uint _variant;

            [FieldOffset(0)]
            internal UnmanagedSome _Some;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public OptionResultOptionUtf8StringError IntoManaged()
            {
                var _managed = new OptionResultOptionUtf8StringError();
                _managed._variant = _variant;
    // Debug - write_type_definition_enum_variant_fields_to_managed 
                if (_variant == 0) _managed._Some = _Some._Some.IntoManaged();
                return _managed;
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public Unmanaged IntoUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged._variant = _variant;
    // Debug - write_type_definition_enum_variant_fields_to_unmanaged 
            if (_variant == 0) _unmanaged._Some._Some = _Some.IntoUnmanaged();
            return _unmanaged;
        }

        [CustomMarshaller(typeof(OptionResultOptionUtf8StringError), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

    // Debug - write_type_definition_enum_variant_utils 
        public static OptionResultOptionUtf8StringError Some(ResultOptionUtf8StringError value) => new() { _variant = 0, _Some = value };
        public static OptionResultOptionUtf8StringError None => new() { _variant = 1 };

        public bool IsSome => _variant == 0;
        public bool IsNone => _variant == 1;

        public ResultOptionUtf8StringError AsSome() { if (_variant != 0) { throw new InteropException(); } else { return _Some; } }
        public void AsNone() { if (_variant != 1) throw new InteropException(); }

        public ref struct Marshaller
        {
            private OptionResultOptionUtf8StringError _managed;
            private Unmanaged _unmanaged;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(OptionResultOptionUtf8StringError managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromManaged(OptionResultOptionUtf8StringError managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Unmanaged ToUnmanaged() { return _managed.IntoUnmanaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public OptionResultOptionUtf8StringError ToManaged() { return _unmanaged.IntoManaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void Free() { }
        }

    }

    // Debug - write_type_definition_enum 
    ///Option that contains Some(value) or None.
    // Debug - write_type_definition_enum_marshaller 
    public partial class OptionUtf8String
    {
    // Debug - write_type_definition_enum_variant_fields_managed 
        uint _variant;
        Utf8String _Some;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class OptionUtf8String
    {
    // Debug - write_type_definition_enum_variant_unmanaged_types 
        [StructLayout(LayoutKind.Sequential)]
        internal unsafe struct UnmanagedSome
        {
            internal uint _variant;
            internal Utf8String.Unmanaged _Some;
        }


        [StructLayout(LayoutKind.Explicit)]
        public unsafe struct Unmanaged
        {
    // Debug - write_type_definition_enum_variant_fields_unmanaged 
            [FieldOffset(0)]
            internal uint _variant;

            [FieldOffset(0)]
            internal UnmanagedSome _Some;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public OptionUtf8String IntoManaged()
            {
                var _managed = new OptionUtf8String();
                _managed._variant = _variant;
    // Debug - write_type_definition_enum_variant_fields_to_managed 
                if (_variant == 0) _managed._Some = _Some._Some.IntoManaged();
                return _managed;
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public Unmanaged IntoUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged._variant = _variant;
    // Debug - write_type_definition_enum_variant_fields_to_unmanaged 
            if (_variant == 0) _unmanaged._Some._Some = _Some.IntoUnmanaged();
            return _unmanaged;
        }

        [CustomMarshaller(typeof(OptionUtf8String), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

    // Debug - write_type_definition_enum_variant_utils 
        public static OptionUtf8String Some(Utf8String value) => new() { _variant = 0, _Some = value };
        public static OptionUtf8String None => new() { _variant = 1 };

        public bool IsSome => _variant == 0;
        public bool IsNone => _variant == 1;

        public Utf8String AsSome() { if (_variant != 0) { throw new InteropException(); } else { return _Some; } }
        public void AsNone() { if (_variant != 1) throw new InteropException(); }

        public ref struct Marshaller
        {
            private OptionUtf8String _managed;
            private Unmanaged _unmanaged;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(OptionUtf8String managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromManaged(OptionUtf8String managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Unmanaged ToUnmanaged() { return _managed.IntoUnmanaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public OptionUtf8String ToManaged() { return _unmanaged.IntoManaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void Free() { }
        }

    }

    // Debug - write_type_definition_enum 
    ///Option that contains Some(value) or None.
    // Debug - write_type_definition_enum_marshaller 
    public partial struct OptionVec
    {
    // Debug - write_type_definition_enum_variant_fields_managed 
        uint _variant;
        Vec _Some;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct OptionVec
    {
    // Debug - write_type_definition_enum_variant_unmanaged_types 
        [StructLayout(LayoutKind.Sequential)]
        internal unsafe struct UnmanagedSome
        {
            internal uint _variant;
            internal Vec.Unmanaged _Some;
        }


        [StructLayout(LayoutKind.Explicit)]
        public unsafe struct Unmanaged
        {
    // Debug - write_type_definition_enum_variant_fields_unmanaged 
            [FieldOffset(0)]
            internal uint _variant;

            [FieldOffset(0)]
            internal UnmanagedSome _Some;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public OptionVec ToManaged()
            {
                var _managed = new OptionVec();
                _managed._variant = _variant;
    // Debug - write_type_definition_enum_variant_fields_to_managed 
                if (_variant == 0) _managed._Some = _Some._Some.ToManaged();
                return _managed;
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public Unmanaged ToUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged._variant = _variant;
    // Debug - write_type_definition_enum_variant_fields_to_unmanaged 
            if (_variant == 0) _unmanaged._Some._Some = _Some.ToUnmanaged();
            return _unmanaged;
        }

        [CustomMarshaller(typeof(OptionVec), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

    // Debug - write_type_definition_enum_variant_utils 
        public static OptionVec Some(Vec value) => new() { _variant = 0, _Some = value };
        public static OptionVec None => new() { _variant = 1 };

        public bool IsSome => _variant == 0;
        public bool IsNone => _variant == 1;

        public Vec AsSome() { if (_variant != 0) { throw new InteropException(); } else { return _Some; } }
        public void AsNone() { if (_variant != 1) throw new InteropException(); }

        public ref struct Marshaller
        {
            private OptionVec _managed;
            private Unmanaged _unmanaged;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(OptionVec managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromManaged(OptionVec managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Unmanaged ToUnmanaged() { return _managed.ToUnmanaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public OptionVec ToManaged() { return _unmanaged.ToManaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void Free() { }
        }

    }

    // Debug - write_type_definition_enum 
    ///Result that contains value or an error.
    // Debug - write_type_definition_enum_marshaller 
    public partial struct ResultError
    {
    // Debug - write_type_definition_enum_variant_fields_managed 
        uint _variant;
        Error _Err;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct ResultError
    {
    // Debug - write_type_definition_enum_variant_unmanaged_types 

        [StructLayout(LayoutKind.Sequential)]
        internal unsafe struct UnmanagedErr
        {
            internal uint _variant;
            internal Error.Unmanaged _Err;
        }



        [StructLayout(LayoutKind.Explicit)]
        public unsafe struct Unmanaged
        {
    // Debug - write_type_definition_enum_variant_fields_unmanaged 
            [FieldOffset(0)]
            internal uint _variant;

            [FieldOffset(0)]
            internal UnmanagedErr _Err;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public ResultError ToManaged()
            {
                var _managed = new ResultError();
                _managed._variant = _variant;
    // Debug - write_type_definition_enum_variant_fields_to_managed 
                if (_variant == 1) _managed._Err = _Err._Err.ToManaged();
                return _managed;
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public Unmanaged ToUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged._variant = _variant;
    // Debug - write_type_definition_enum_variant_fields_to_unmanaged 
            if (_variant == 1) _unmanaged._Err._Err = _Err.ToUnmanaged();
            return _unmanaged;
        }

        [CustomMarshaller(typeof(ResultError), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

    // Debug - write_type_definition_enum_variant_utils 
        public static ResultError Ok => new() { _variant = 0 };
        public static ResultError Err(Error value) => new() { _variant = 1, _Err = value };
        public static ResultError Panic => new() { _variant = 2 };
        public static ResultError Null => new() { _variant = 3 };

        public bool IsOk => _variant == 0;
        public bool IsErr => _variant == 1;
        public bool IsPanic => _variant == 2;
        public bool IsNull => _variant == 3;

        public void AsOk() { if (_variant != 0) throw new InteropException(); }
        public Error AsErr() { if (_variant != 1) { throw new InteropException(); } else { return _Err; } }
        public void AsPanic() { if (_variant != 2) throw new InteropException(); }
        public void AsNull() { if (_variant != 3) throw new InteropException(); }

        public ref struct Marshaller
        {
            private ResultError _managed;
            private Unmanaged _unmanaged;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(ResultError managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromManaged(ResultError managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Unmanaged ToUnmanaged() { return _managed.ToUnmanaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public ResultError ToManaged() { return _unmanaged.ToManaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void Free() { }
        }

    }

    // Debug - write_type_definition_enum 
    ///Result that contains value or an error.
    // Debug - write_type_definition_enum_marshaller 
    public partial class ResultOptionUtf8StringError
    {
    // Debug - write_type_definition_enum_variant_fields_managed 
        uint _variant;
        OptionUtf8String _Ok;
        Error _Err;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class ResultOptionUtf8StringError
    {
    // Debug - write_type_definition_enum_variant_unmanaged_types 
        [StructLayout(LayoutKind.Sequential)]
        internal unsafe struct UnmanagedOk
        {
            internal uint _variant;
            internal OptionUtf8String.Unmanaged _Ok;
        }

        [StructLayout(LayoutKind.Sequential)]
        internal unsafe struct UnmanagedErr
        {
            internal uint _variant;
            internal Error.Unmanaged _Err;
        }



        [StructLayout(LayoutKind.Explicit)]
        public unsafe struct Unmanaged
        {
    // Debug - write_type_definition_enum_variant_fields_unmanaged 
            [FieldOffset(0)]
            internal uint _variant;

            [FieldOffset(0)]
            internal UnmanagedOk _Ok;

            [FieldOffset(0)]
            internal UnmanagedErr _Err;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public ResultOptionUtf8StringError IntoManaged()
            {
                var _managed = new ResultOptionUtf8StringError();
                _managed._variant = _variant;
    // Debug - write_type_definition_enum_variant_fields_to_managed 
                if (_variant == 0) _managed._Ok = _Ok._Ok.IntoManaged();
                if (_variant == 1) _managed._Err = _Err._Err.ToManaged();
                return _managed;
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public Unmanaged IntoUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged._variant = _variant;
    // Debug - write_type_definition_enum_variant_fields_to_unmanaged 
            if (_variant == 0) _unmanaged._Ok._Ok = _Ok.IntoUnmanaged();
            if (_variant == 1) _unmanaged._Err._Err = _Err.ToUnmanaged();
            return _unmanaged;
        }

        [CustomMarshaller(typeof(ResultOptionUtf8StringError), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

    // Debug - write_type_definition_enum_variant_utils 
        public static ResultOptionUtf8StringError Ok(OptionUtf8String value) => new() { _variant = 0, _Ok = value };
        public static ResultOptionUtf8StringError Err(Error value) => new() { _variant = 1, _Err = value };
        public static ResultOptionUtf8StringError Panic => new() { _variant = 2 };
        public static ResultOptionUtf8StringError Null => new() { _variant = 3 };

        public bool IsOk => _variant == 0;
        public bool IsErr => _variant == 1;
        public bool IsPanic => _variant == 2;
        public bool IsNull => _variant == 3;

        public OptionUtf8String AsOk() { if (_variant != 0) { throw new InteropException(); } else { return _Ok; } }
        public Error AsErr() { if (_variant != 1) { throw new InteropException(); } else { return _Err; } }
        public void AsPanic() { if (_variant != 2) throw new InteropException(); }
        public void AsNull() { if (_variant != 3) throw new InteropException(); }

        public ref struct Marshaller
        {
            private ResultOptionUtf8StringError _managed;
            private Unmanaged _unmanaged;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(ResultOptionUtf8StringError managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromManaged(ResultOptionUtf8StringError managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Unmanaged ToUnmanaged() { return _managed.IntoUnmanaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public ResultOptionUtf8StringError ToManaged() { return _unmanaged.IntoManaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void Free() { }
        }

    }

    // Debug - write_type_definition_enum 
    ///Result that contains value or an error.
    // Debug - write_type_definition_enum_marshaller 
    public partial struct ResultU32Error
    {
    // Debug - write_type_definition_enum_variant_fields_managed 
        uint _variant;
        uint _Ok;
        Error _Err;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct ResultU32Error
    {
    // Debug - write_type_definition_enum_variant_unmanaged_types 
        [StructLayout(LayoutKind.Sequential)]
        internal unsafe struct UnmanagedOk
        {
            internal uint _variant;
            internal uint _Ok;
        }

        [StructLayout(LayoutKind.Sequential)]
        internal unsafe struct UnmanagedErr
        {
            internal uint _variant;
            internal Error.Unmanaged _Err;
        }



        [StructLayout(LayoutKind.Explicit)]
        public unsafe struct Unmanaged
        {
    // Debug - write_type_definition_enum_variant_fields_unmanaged 
            [FieldOffset(0)]
            internal uint _variant;

            [FieldOffset(0)]
            internal UnmanagedOk _Ok;

            [FieldOffset(0)]
            internal UnmanagedErr _Err;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public ResultU32Error ToManaged()
            {
                var _managed = new ResultU32Error();
                _managed._variant = _variant;
    // Debug - write_type_definition_enum_variant_fields_to_managed 
                if (_variant == 0) _managed._Ok = _Ok._Ok;
                if (_variant == 1) _managed._Err = _Err._Err.ToManaged();
                return _managed;
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public Unmanaged ToUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged._variant = _variant;
    // Debug - write_type_definition_enum_variant_fields_to_unmanaged 
            if (_variant == 0) _unmanaged._Ok._Ok = _Ok;
            if (_variant == 1) _unmanaged._Err._Err = _Err.ToUnmanaged();
            return _unmanaged;
        }

        [CustomMarshaller(typeof(ResultU32Error), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

    // Debug - write_type_definition_enum_variant_utils 
        public static ResultU32Error Ok(uint value) => new() { _variant = 0, _Ok = value };
        public static ResultU32Error Err(Error value) => new() { _variant = 1, _Err = value };
        public static ResultU32Error Panic => new() { _variant = 2 };
        public static ResultU32Error Null => new() { _variant = 3 };

        public bool IsOk => _variant == 0;
        public bool IsErr => _variant == 1;
        public bool IsPanic => _variant == 2;
        public bool IsNull => _variant == 3;

        public uint AsOk() { if (_variant != 0) { throw new InteropException(); } else { return _Ok; } }
        public Error AsErr() { if (_variant != 1) { throw new InteropException(); } else { return _Err; } }
        public void AsPanic() { if (_variant != 2) throw new InteropException(); }
        public void AsNull() { if (_variant != 3) throw new InteropException(); }

        public ref struct Marshaller
        {
            private ResultU32Error _managed;
            private Unmanaged _unmanaged;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(ResultU32Error managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromManaged(ResultU32Error managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Unmanaged ToUnmanaged() { return _managed.ToUnmanaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public ResultU32Error ToManaged() { return _unmanaged.ToManaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void Free() { }
        }

    }

    // Debug - write_type_definition_enum 
    ///Result that contains value or an error.
    // Debug - write_type_definition_enum_marshaller 
    public partial struct ResultU64Error
    {
    // Debug - write_type_definition_enum_variant_fields_managed 
        uint _variant;
        ulong _Ok;
        Error _Err;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct ResultU64Error
    {
    // Debug - write_type_definition_enum_variant_unmanaged_types 
        [StructLayout(LayoutKind.Sequential)]
        internal unsafe struct UnmanagedOk
        {
            internal uint _variant;
            internal ulong _Ok;
        }

        [StructLayout(LayoutKind.Sequential)]
        internal unsafe struct UnmanagedErr
        {
            internal uint _variant;
            internal Error.Unmanaged _Err;
        }



        [StructLayout(LayoutKind.Explicit)]
        public unsafe struct Unmanaged
        {
    // Debug - write_type_definition_enum_variant_fields_unmanaged 
            [FieldOffset(0)]
            internal uint _variant;

            [FieldOffset(0)]
            internal UnmanagedOk _Ok;

            [FieldOffset(0)]
            internal UnmanagedErr _Err;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public ResultU64Error ToManaged()
            {
                var _managed = new ResultU64Error();
                _managed._variant = _variant;
    // Debug - write_type_definition_enum_variant_fields_to_managed 
                if (_variant == 0) _managed._Ok = _Ok._Ok;
                if (_variant == 1) _managed._Err = _Err._Err.ToManaged();
                return _managed;
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public Unmanaged ToUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged._variant = _variant;
    // Debug - write_type_definition_enum_variant_fields_to_unmanaged 
            if (_variant == 0) _unmanaged._Ok._Ok = _Ok;
            if (_variant == 1) _unmanaged._Err._Err = _Err.ToUnmanaged();
            return _unmanaged;
        }

        [CustomMarshaller(typeof(ResultU64Error), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

    // Debug - write_type_definition_enum_variant_utils 
        public static ResultU64Error Ok(ulong value) => new() { _variant = 0, _Ok = value };
        public static ResultU64Error Err(Error value) => new() { _variant = 1, _Err = value };
        public static ResultU64Error Panic => new() { _variant = 2 };
        public static ResultU64Error Null => new() { _variant = 3 };

        public bool IsOk => _variant == 0;
        public bool IsErr => _variant == 1;
        public bool IsPanic => _variant == 2;
        public bool IsNull => _variant == 3;

        public ulong AsOk() { if (_variant != 0) { throw new InteropException(); } else { return _Ok; } }
        public Error AsErr() { if (_variant != 1) { throw new InteropException(); } else { return _Err; } }
        public void AsPanic() { if (_variant != 2) throw new InteropException(); }
        public void AsNull() { if (_variant != 3) throw new InteropException(); }

        public ref struct Marshaller
        {
            private ResultU64Error _managed;
            private Unmanaged _unmanaged;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(ResultU64Error managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromManaged(ResultU64Error managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Unmanaged ToUnmanaged() { return _managed.ToUnmanaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public ResultU64Error ToManaged() { return _unmanaged.ToManaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void Free() { }
        }

    }

    // Debug - write_type_definition_enum 
    ///Result that contains value or an error.
    // Debug - write_type_definition_enum_marshaller 
    public partial class ResultUtf8StringError
    {
    // Debug - write_type_definition_enum_variant_fields_managed 
        uint _variant;
        Utf8String _Ok;
        Error _Err;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class ResultUtf8StringError
    {
    // Debug - write_type_definition_enum_variant_unmanaged_types 
        [StructLayout(LayoutKind.Sequential)]
        internal unsafe struct UnmanagedOk
        {
            internal uint _variant;
            internal Utf8String.Unmanaged _Ok;
        }

        [StructLayout(LayoutKind.Sequential)]
        internal unsafe struct UnmanagedErr
        {
            internal uint _variant;
            internal Error.Unmanaged _Err;
        }



        [StructLayout(LayoutKind.Explicit)]
        public unsafe struct Unmanaged
        {
    // Debug - write_type_definition_enum_variant_fields_unmanaged 
            [FieldOffset(0)]
            internal uint _variant;

            [FieldOffset(0)]
            internal UnmanagedOk _Ok;

            [FieldOffset(0)]
            internal UnmanagedErr _Err;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public ResultUtf8StringError IntoManaged()
            {
                var _managed = new ResultUtf8StringError();
                _managed._variant = _variant;
    // Debug - write_type_definition_enum_variant_fields_to_managed 
                if (_variant == 0) _managed._Ok = _Ok._Ok.IntoManaged();
                if (_variant == 1) _managed._Err = _Err._Err.ToManaged();
                return _managed;
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public Unmanaged IntoUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged._variant = _variant;
    // Debug - write_type_definition_enum_variant_fields_to_unmanaged 
            if (_variant == 0) _unmanaged._Ok._Ok = _Ok.IntoUnmanaged();
            if (_variant == 1) _unmanaged._Err._Err = _Err.ToUnmanaged();
            return _unmanaged;
        }

        [CustomMarshaller(typeof(ResultUtf8StringError), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

    // Debug - write_type_definition_enum_variant_utils 
        public static ResultUtf8StringError Ok(Utf8String value) => new() { _variant = 0, _Ok = value };
        public static ResultUtf8StringError Err(Error value) => new() { _variant = 1, _Err = value };
        public static ResultUtf8StringError Panic => new() { _variant = 2 };
        public static ResultUtf8StringError Null => new() { _variant = 3 };

        public bool IsOk => _variant == 0;
        public bool IsErr => _variant == 1;
        public bool IsPanic => _variant == 2;
        public bool IsNull => _variant == 3;

        public Utf8String AsOk() { if (_variant != 0) { throw new InteropException(); } else { return _Ok; } }
        public Error AsErr() { if (_variant != 1) { throw new InteropException(); } else { return _Err; } }
        public void AsPanic() { if (_variant != 2) throw new InteropException(); }
        public void AsNull() { if (_variant != 3) throw new InteropException(); }

        public ref struct Marshaller
        {
            private ResultUtf8StringError _managed;
            private Unmanaged _unmanaged;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(ResultUtf8StringError managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromManaged(ResultUtf8StringError managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Unmanaged ToUnmanaged() { return _managed.IntoUnmanaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public ResultUtf8StringError ToManaged() { return _unmanaged.IntoManaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void Free() { }
        }

    }

    // Debug - write_type_definition_ffibool 
    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct Bool
    {
        byte value;
    }

    public partial struct Bool
    {
        public static readonly Bool True = new Bool { value =  1 };
        public static readonly Bool False = new Bool { value =  0 };
        public Bool(bool b)
        {
            value = (byte) (b ? 1 : 0);
        }
        public bool Is => value == 1;
    }


    // Debug - write_type_definition_named_callback 
    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate uint MyCallbackNamespacedNative(uint value, IntPtr callback_data); // 'True' native callback signature
    public delegate uint MyCallbackNamespacedDelegate(uint value); // Our C# signature

    public partial class MyCallbackNamespaced
    {
        private MyCallbackNamespacedDelegate _managed; // C# callback
        private MyCallbackNamespacedNative _native; // Native callback 
        private IntPtr _ptr; // Raw function pointer of native callback
        private Exception _exception; // Set if the callback encountered an Exception
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class MyCallbackNamespaced : IDisposable
    {

        internal MyCallbackNamespaced() { }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public MyCallbackNamespaced(MyCallbackNamespacedDelegate managed)
        {
            _managed = managed;
            _native = CallTrampoline;
            _ptr = Marshal.GetFunctionPointerForDelegate(_native);
        }

        // Helper to invoke managed code from the native invocation.
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        private uint CallTrampoline(uint value, IntPtr callback_data)
        {
            // We ignore the last parameter, a generic callback pointer, as it's not needed in C#.
            try
            {
                return _managed(value);
            }
            catch (Exception e)
            {
                _exception = e;
                return default;
            }
        }

        // Invokes the callback.
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal uint Call(uint value)
        {
            var __target = Marshal.GetDelegateForFunctionPointer<MyCallbackNamespacedNative>(_ptr);
            // TODO
            // return __target(value);
            return default;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public void Dispose()
        {
            // This means when the callback was invoked from Rust C# had an exception which
            // we caught (otherwise C# might not re-enter Rust, and we leak memory). Now is
            // the time to rethrow it.
            if (_exception != null) throw _exception;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        internal Unmanaged ToUnmanaged()
        {
            var rval = new Unmanaged();
            rval._callback = _ptr;
            rval._data = IntPtr.Zero;
            return rval;
        }

        [CustomMarshaller(typeof(MyCallbackNamespaced), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta {  }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            internal IntPtr _callback;
            internal IntPtr _data;

            public MyCallbackNamespaced ToManaged()
            {
                var rval = new MyCallbackNamespaced();
                rval._ptr = _callback;
                return rval;
            }

        }

        public ref struct Marshaller
        {
            private MyCallbackNamespaced _managed;
            private Unmanaged _unmanaged;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(MyCallbackNamespaced managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromManaged(MyCallbackNamespaced managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Unmanaged ToUnmanaged() { return _managed.ToUnmanaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public MyCallbackNamespaced ToManaged() { return _unmanaged.ToManaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void Free() { }
        }

    }

    // Debug - write_pattern_vec 
    // Debug - write_pattern_fast_vec 
    // This must be a class because we only ever want to hold on to the
    // same instance, as we overwrite fields when this is sent over the FFI
    // boundary
    public partial class VecU8
    {
        internal IntPtr _ptr;
        internal ulong _len;
        internal ulong _capacity;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class VecU8 : IDisposable
    {
        // An internal helper to create an empty object.
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        private VecU8() { }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static unsafe VecU8 From(Span<byte> _data)
        {
            var rval = new VecU8();
            fixed (void* _data_ptr = _data)
            {
                InteropHelper.interoptopus_vec_create((IntPtr) _data_ptr, (ulong)_data.Length, out var _out);
                rval._len = _out._len;
                rval._capacity = _out._capacity;
                rval._ptr = _out._ptr;
            }
            return rval;
        }

        public int Count
        {
            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            get { if (_ptr == IntPtr.Zero) { throw new InteropException(); } else { return (int) _len; } }
        }

        public unsafe byte this[int i]
        {
            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            get
            {
                if (i >= Count) throw new IndexOutOfRangeException();
                if (_ptr == IntPtr.Zero) throw new InteropException();
                return Marshal.PtrToStructure<byte>(new IntPtr(_ptr.ToInt64() + i * sizeof(byte)));
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public Unmanaged IntoUnmanaged()
        {
            if (_ptr == IntPtr.Zero) throw new InteropException(); // Don't use for serialization if moved already.
            var rval = new Unmanaged();
            rval._len = _len;
            rval._capacity = _capacity;
            rval._ptr = _ptr;
            _ptr = IntPtr.Zero; // Mark this instance as moved.
            return rval;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public void Dispose()
        {
            if (_ptr == IntPtr.Zero) return;
            var _unmanaged = new Unmanaged();
            _unmanaged._ptr = _unmanaged._ptr;
            _unmanaged._len = _unmanaged._len;
            _unmanaged._capacity = _unmanaged._capacity;
            InteropHelper.interoptopus_vec_destroy(_unmanaged);
            _ptr = IntPtr.Zero;
            _len = 0;
            _capacity = 0;
        }

        public partial class InteropHelper
        {
            [LibraryImport(Interop.NativeLib, EntryPoint = "interoptopus_vec_create_18289942533122229086")]
            internal static partial long interoptopus_vec_create(IntPtr vec, ulong len, out Unmanaged rval);
            [LibraryImport(Interop.NativeLib, EntryPoint = "interoptopus_vec_destroy_17895994407320212994")]
            internal static partial long interoptopus_vec_destroy(Unmanaged vec);
        }

        [CustomMarshaller(typeof(VecU8), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            internal IntPtr _ptr;
            internal ulong _len;
            internal ulong _capacity;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public VecU8 IntoManaged()
            {
                var rval = new VecU8();
                rval._len = _len;
                rval._capacity = _capacity;
                rval._ptr = _ptr;
                return rval;
            }


        }

        public ref struct Marshaller
        {
            private VecU8 _managed;
            private Unmanaged _unmanaged;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(VecU8 managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromManaged(VecU8 managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Unmanaged ToUnmanaged() { return _managed.IntoUnmanaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public VecU8 ToManaged() { return _unmanaged.IntoManaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void Free() { }
        }

    }

    // Debug - write_pattern_vec 
    // Debug - write_pattern_fast_vec 
    // This must be a class because we only ever want to hold on to the
    // same instance, as we overwrite fields when this is sent over the FFI
    // boundary
    public partial class VecUtf8String
    {
        internal IntPtr _ptr;
        internal ulong _len;
        internal ulong _capacity;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class VecUtf8String : IDisposable
    {
        // An internal helper to create an empty object.
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        private VecUtf8String() { }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static unsafe VecUtf8String From(Span<Utf8String> _data)
        {
            var rval = new VecUtf8String();
            var _temp = new Utf8String.Unmanaged[_data.Length];
            for (var i = 0; i < _data.Length; ++i)
            {
                _temp[i] = _data[i].IntoUnmanaged();
            }
            fixed (void* _data_ptr = _temp)
            {
                InteropHelper.interoptopus_vec_create((IntPtr) _data_ptr, (ulong)_data.Length, out var _out);
                rval._len = _out._len;
                rval._capacity = _out._capacity;
                rval._ptr = _out._ptr;
            }
            return rval;
        }

        public int Count
        {
            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            get { if (_ptr == IntPtr.Zero) { throw new InteropException(); } else { return (int) _len; } }
        }

        public unsafe Utf8String this[int i]
        {
            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            get
            {
                if (i >= Count) throw new IndexOutOfRangeException();
                if (_ptr == IntPtr.Zero) throw new InteropException();
                var _element = Marshal.PtrToStructure<Utf8String.Unmanaged>(new IntPtr(_ptr.ToInt64() + i * sizeof(Utf8String.Unmanaged)));
                return _element.IntoManaged();
            }
        }
        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public Unmanaged IntoUnmanaged()
        {
            if (_ptr == IntPtr.Zero) throw new InteropException(); // Don't use for serialization if moved already.
            var rval = new Unmanaged();
            rval._len = _len;
            rval._capacity = _capacity;
            rval._ptr = _ptr;
            _ptr = IntPtr.Zero; // Mark this instance as moved.
            return rval;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public void Dispose()
        {
            if (_ptr == IntPtr.Zero) return;
            var _unmanaged = new Unmanaged();
            _unmanaged._ptr = _unmanaged._ptr;
            _unmanaged._len = _unmanaged._len;
            _unmanaged._capacity = _unmanaged._capacity;
            InteropHelper.interoptopus_vec_destroy(_unmanaged);
            _ptr = IntPtr.Zero;
            _len = 0;
            _capacity = 0;
        }

        public partial class InteropHelper
        {
            [LibraryImport(Interop.NativeLib, EntryPoint = "interoptopus_vec_create_1491625606766217421")]
            internal static partial long interoptopus_vec_create(IntPtr vec, ulong len, out Unmanaged rval);
            [LibraryImport(Interop.NativeLib, EntryPoint = "interoptopus_vec_destroy_2831836161306219799")]
            internal static partial long interoptopus_vec_destroy(Unmanaged vec);
        }

        [CustomMarshaller(typeof(VecUtf8String), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            internal IntPtr _ptr;
            internal ulong _len;
            internal ulong _capacity;
            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public VecUtf8String IntoManaged()
            {
                var rval = new VecUtf8String();
                rval._len = _len;
                rval._capacity = _capacity;
                rval._ptr = _ptr;
                return rval;
            }


        }

        public ref struct Marshaller
        {
            private VecUtf8String _managed;
            private Unmanaged _unmanaged;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(VecUtf8String managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromManaged(VecUtf8String managed) { _managed = managed; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Unmanaged ToUnmanaged() { return _managed.IntoUnmanaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public VecUtf8String ToManaged() { return _unmanaged.IntoManaged(); }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void Free() { }
        }


    }



    public class InteropException: Exception
    {

        public InteropException(): base()
        {
        }
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void AsyncHelperNative(IntPtr data, IntPtr callback_data);
    public delegate void AsyncHelperDelegate(IntPtr data);

    public partial struct AsyncHelper
    {
        private AsyncHelperDelegate _managed;
        private AsyncHelperNative _native;
        private IntPtr _ptr;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct AsyncHelper : IDisposable
    {
        public AsyncHelper() { }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public AsyncHelper(AsyncHelperDelegate managed)
        {
            _managed = managed;
            _native = Call;
            _ptr = Marshal.GetFunctionPointerForDelegate(_native);
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        void Call(IntPtr data, IntPtr _)
        {
            _managed(data);
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public void Dispose()
        {
            if (_ptr == IntPtr.Zero) return;
            Marshal.FreeHGlobal(_ptr);
            _ptr = IntPtr.Zero;
        }

        [CustomMarshaller(typeof(AsyncHelper), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            internal IntPtr Callback;
            internal IntPtr Data;
        }

        public ref struct Marshaller
        {
            private AsyncHelper _managed;
            private Unmanaged _unmanaged;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromManaged(AsyncHelper managed) { _managed = managed; }
            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Unmanaged ToUnmanaged()
            {
                _unmanaged = new Unmanaged();
                _unmanaged.Callback = _managed._ptr;
                _unmanaged.Data = IntPtr.Zero;
                return _unmanaged;
            }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public AsyncHelper ToManaged()
            {
                _managed = new AsyncHelper();
                _managed._ptr = _unmanaged.Callback;
                return _managed;
            }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void Free() { }
        }
    }
    public partial class Utf8String
    {
        IntPtr _ptr;
        ulong _len;
        ulong _capacity;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class Utf8String: IDisposable
    {
        private Utf8String() { }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public static unsafe Utf8String From(string s)
        {
            var rval = new Utf8String();
            var source = s.AsSpan();
            Span<byte> utf8Bytes = stackalloc byte[Encoding.UTF8.GetByteCount(source)];
            var len = Encoding.UTF8.GetBytes(source, utf8Bytes);

            fixed (byte* p = utf8Bytes)
            {
                InteropHelper.interoptopus_string_create((IntPtr) p, (ulong)len, out var native);
                rval._ptr = native._ptr;
                rval._len = native._len;
                rval._capacity = native._capacity;
            }

            return rval;
        }

        public unsafe string String
        {
            get
            {
                var span = new ReadOnlySpan<byte>((byte*) _ptr, (int)_len);
                var s = Encoding.UTF8.GetString(span);
                return s;
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public void Dispose()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged._ptr = _ptr;
            _unmanaged._len = _len;
            _unmanaged._capacity = _capacity;
            InteropHelper.interoptopus_string_destroy(_unmanaged);
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public Unmanaged IntoUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged._ptr = _ptr;
            _unmanaged._len = _len;
            _unmanaged._capacity = _capacity;
            _ptr = IntPtr.Zero;
            return _unmanaged;
        }

        [MethodImpl(MethodImplOptions.AggressiveOptimization)]
        public Unmanaged AsUnmanaged()
        {
            var _unmanaged = new Unmanaged();
            _unmanaged._ptr = _ptr;
            _unmanaged._len = _len;
            _unmanaged._capacity = _capacity;
            return _unmanaged;
        }

        /// A highly dangerous 'use once type' that has ownership semantics!
        /// Once passed over an FFI boundary 'the other side' is meant to own
        /// (and free) it. Rust handles that fine, but if in C# you put this
        /// in a struct and then call Rust multiple times with that struct
        /// you'll free the same pointer multiple times, and get UB!
        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public IntPtr _ptr;
            public ulong _len;
            public ulong _capacity;

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Utf8String IntoManaged()
            {
            var _managed = new Utf8String();
            _managed._ptr = _ptr;
            _managed._len = _len;
            _managed._capacity = _capacity;
            return _managed;
            }

        }

        public partial class InteropHelper
        {
            [LibraryImport(Interop.NativeLib, EntryPoint = "interoptopus_string_create")]
            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public static partial long interoptopus_string_create(IntPtr utf8, ulong len, out Unmanaged rval);

            [LibraryImport(Interop.NativeLib, EntryPoint = "interoptopus_string_destroy")]
            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public static partial long interoptopus_string_destroy(Unmanaged utf8);
        }

        [CustomMarshaller(typeof(Utf8String), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private Utf8String _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Utf8String managed) { _managed = managed; }
            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromManaged(Utf8String managed) { _managed = managed; }
            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public unsafe Unmanaged ToUnmanaged()
            {
                return _managed.IntoUnmanaged();
            }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public unsafe Utf8String ToManaged()
            {
                return _unmanaged.IntoManaged();
            }

            [MethodImpl(MethodImplOptions.AggressiveOptimization)]
            public void Free() { }
        }
    }

        public static class StringExtensions
        {
            public static Utf8String Utf8(this string s) { return Utf8String.From(s); }
        }

        public delegate void AsyncCallbackCommon(IntPtr data, IntPtr callback_data);

        [StructLayout(LayoutKind.Sequential)]
        public partial struct AsyncCallbackCommonNative
        {
            internal IntPtr _ptr;
            internal IntPtr _ts;
        }
}
