// Automatically generated by Interoptopus.

#pragma warning disable 0105
using System;
using System.Text;
using System.Threading.Tasks;
using System.Reflection;
using System.Linq.Expressions;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Runtime.InteropServices.Marshalling;
using System.Runtime.CompilerServices;
using My.Company;
using My.Company.Common;
#pragma warning restore 0105

namespace My.Company
{
    public static partial class Interop
    {
        public const string NativeLib = "interoptopus_reference_project";

        static Interop()
        {
            var api_version = Interop.pattern_api_guard();
            if (api_version != 7627744572083768741ul)
            {
                throw new TypeLoadException($"API reports hash {api_version} which differs from hash in bindings (7627744572083768741). You probably forgot to update / copy either the bindings or the library.");
            }
        }

        public const byte U8 = (byte) 255;

        public const float F32_MIN_POSITIVE = (float) 0.000000000000000000000000000000000000011754944;

        public const int COMPUTED_I32 = (int) -2147483647;


        [LibraryImport(NativeLib, EntryPoint = "interoptopus_string_create")]
        public static partial long interoptopus_string_create(IntPtr utf8, ulong len, out Utf8String rval);


        [LibraryImport(NativeLib, EntryPoint = "interoptopus_string_destroy")]
        public static partial long interoptopus_string_destroy(Utf8String utf8);

        public static unsafe long interoptopus_string_destroy(string utf8)
        {
            var utf8_wrapped = new Utf8String(utf8);
            try
            {
                return interoptopus_string_destroy(utf8_wrapped);
            }
            finally
            {
                utf8_wrapped.Dispose();
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "primitive_void")]
        public static partial void primitive_void();


        [LibraryImport(NativeLib, EntryPoint = "primitive_void2")]
        public static partial void primitive_void2();


        [LibraryImport(NativeLib, EntryPoint = "primitive_bool")]
        [return: MarshalAs(UnmanagedType.U1)]
        public static partial bool primitive_bool([MarshalAs(UnmanagedType.U1)] bool x);


        [LibraryImport(NativeLib, EntryPoint = "primitive_u8")]
        public static partial byte primitive_u8(byte x);


        [LibraryImport(NativeLib, EntryPoint = "primitive_u16")]
        public static partial ushort primitive_u16(ushort x);


        [LibraryImport(NativeLib, EntryPoint = "primitive_u32")]
        public static partial uint primitive_u32(uint x);


        [LibraryImport(NativeLib, EntryPoint = "primitive_u64")]
        public static partial ulong primitive_u64(ulong x);


        [LibraryImport(NativeLib, EntryPoint = "primitive_i8")]
        public static partial sbyte primitive_i8(sbyte x);


        [LibraryImport(NativeLib, EntryPoint = "primitive_i16")]
        public static partial short primitive_i16(short x);


        [LibraryImport(NativeLib, EntryPoint = "primitive_i32")]
        public static partial int primitive_i32(int x);


        [LibraryImport(NativeLib, EntryPoint = "primitive_i64")]
        public static partial long primitive_i64(long x);


        [LibraryImport(NativeLib, EntryPoint = "packed_to_packed1")]
        public static partial Packed2 packed_to_packed1(Packed1 a);


        [LibraryImport(NativeLib, EntryPoint = "many_args_5")]
        public static partial long many_args_5(long x0, long x1, long x2, long x3, long x4);


        [LibraryImport(NativeLib, EntryPoint = "many_args_10")]
        public static partial long many_args_10(long x0, long x1, long x2, long x3, long x4, long x5, long x6, long x7, long x8, long x9);


        [LibraryImport(NativeLib, EntryPoint = "ptr")]
        public static partial IntPtr ptr(ref long x);


        /// # Safety
        ///
        /// Parameter x must point to valid data.
        [LibraryImport(NativeLib, EntryPoint = "ptr_mut")]
        public static partial IntPtr ptr_mut(out long x);


        [LibraryImport(NativeLib, EntryPoint = "ptr_ptr")]
        public static partial IntPtr ptr_ptr(ref IntPtr x);


        [LibraryImport(NativeLib, EntryPoint = "ref_simple")]
        public static partial IntPtr ref_simple(ref long x);


        [LibraryImport(NativeLib, EntryPoint = "ref_mut_simple")]
        public static partial IntPtr ref_mut_simple(out long x);


        [LibraryImport(NativeLib, EntryPoint = "ref_option")]
        [return: MarshalAs(UnmanagedType.U1)]
        public static partial bool ref_option(ref long x);


        [LibraryImport(NativeLib, EntryPoint = "ref_mut_option")]
        [return: MarshalAs(UnmanagedType.U1)]
        public static partial bool ref_mut_option(out long x);


        [LibraryImport(NativeLib, EntryPoint = "call_tupled")]
        public static partial Tupled call_tupled(Tupled x);


        [LibraryImport(NativeLib, EntryPoint = "complex_args_1")]
        public static partial FFIError complex_args_1(Vec3f32 a, ref Tupled b);


        [LibraryImport(NativeLib, EntryPoint = "callback")]
        public static partial byte callback(InteropDelegate_fn_u8_rval_u8 callback, byte value);


        [LibraryImport(NativeLib, EntryPoint = "callback_marshalled")]
        public static partial void callback_marshalled(InteropDelegate_fn_CharArray_native callback, CharArray value);


        [LibraryImport(NativeLib, EntryPoint = "generic_1a")]
        public static partial uint generic_1a(Genericu32 x, Phantomu8 y);


        [LibraryImport(NativeLib, EntryPoint = "generic_1b")]
        public static partial byte generic_1b(Genericu8 x, Phantomu8 y);


        [LibraryImport(NativeLib, EntryPoint = "generic_1c")]
        public static partial byte generic_1c(ref Genericu8 x, ref Genericu8 y);


        [LibraryImport(NativeLib, EntryPoint = "generic_2")]
        public static partial byte generic_2(IntPtr x);


        [LibraryImport(NativeLib, EntryPoint = "generic_3")]
        public static partial byte generic_3(IntPtr x);


        [LibraryImport(NativeLib, EntryPoint = "generic_4")]
        public static partial byte generic_4(IntPtr x);


        [LibraryImport(NativeLib, EntryPoint = "array_1")]
        public static partial byte array_1(Array x);


        [LibraryImport(NativeLib, EntryPoint = "array_2")]
        public static partial Array array_2();


        [LibraryImport(NativeLib, EntryPoint = "array_3")]
        public static partial void array_3(out Array arr);


        [LibraryImport(NativeLib, EntryPoint = "nested_array_1")]
        public static partial NestedArray nested_array_1();


        [LibraryImport(NativeLib, EntryPoint = "nested_array_2")]
        public static partial void nested_array_2(out NestedArray result);


        [LibraryImport(NativeLib, EntryPoint = "nested_array_3")]
        public static partial byte nested_array_3(NestedArray input);


        [LibraryImport(NativeLib, EntryPoint = "char_array_1")]
        public static partial CharArray char_array_1();


        [LibraryImport(NativeLib, EntryPoint = "char_array_2")]
        public static partial CharArray char_array_2(CharArray arr);


        [LibraryImport(NativeLib, EntryPoint = "char_array_3")]
        public static partial byte char_array_3(ref CharArray arr);


        [LibraryImport(NativeLib, EntryPoint = "bool_field")]
        [return: MarshalAs(UnmanagedType.U1)]
        public static partial bool bool_field(BoolField x);


        /// This function has documentation.
        [LibraryImport(NativeLib, EntryPoint = "documented")]
        public static partial EnumDocumented documented(StructDocumented x);


        [LibraryImport(NativeLib, EntryPoint = "ambiguous_1")]
        public static partial Vec1 ambiguous_1(Vec1 x);


        [LibraryImport(NativeLib, EntryPoint = "ambiguous_2")]
        public static partial Vec2 ambiguous_2(Vec2 x);


        [LibraryImport(NativeLib, EntryPoint = "ambiguous_3")]
        [return: MarshalAs(UnmanagedType.U1)]
        public static partial bool ambiguous_3(Vec1 x, Vec2 y);


        [LibraryImport(NativeLib, EntryPoint = "namespaced_type")]
        public static partial Vec namespaced_type(Vec x);


        [LibraryImport(NativeLib, EntryPoint = "namespaced_inner_option")]
        public static partial OptionVec namespaced_inner_option(OptionVec x);


        [LibraryImport(NativeLib, EntryPoint = "namespaced_inner_slice")]
        public static partial SliceVec namespaced_inner_slice(SliceVec x);

        public static unsafe SliceVec namespaced_inner_slice(ReadOnlySpan<Vec> x)
        {
            fixed (void* ptr_x = x)
            {
                var x_slice = new SliceVec(new IntPtr(ptr_x), (ulong) x.Length);
                try
                {
                    return namespaced_inner_slice(x_slice);
                }
                finally
                {
                }
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "namespaced_inner_slice_mut")]
        public static partial SliceMutVec namespaced_inner_slice_mut(SliceMutVec x);

        public static unsafe SliceMutVec namespaced_inner_slice_mut(Span<Vec> x)
        {
            fixed (void* ptr_x = x)
            {
                var x_slice = new SliceMutVec(new IntPtr(ptr_x), (ulong) x.Length);
                try
                {
                    return namespaced_inner_slice_mut(x_slice);
                }
                finally
                {
                }
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "panics")]
        public static partial FFIError panics();


        [LibraryImport(NativeLib, EntryPoint = "renamed")]
        public static partial EnumRenamed renamed(StructRenamed x);


        [LibraryImport(NativeLib, EntryPoint = "sleep")]
        public static partial void sleep(ulong millis);


        [LibraryImport(NativeLib, EntryPoint = "weird_1")]
        [return: MarshalAs(UnmanagedType.U1)]
        public static partial bool weird_1(Weird1u32 x, Weird2u8 y);


        [LibraryImport(NativeLib, EntryPoint = "visibility")]
        public static partial void visibility(Visibility1 x, Visibility2 y);


        [LibraryImport(NativeLib, EntryPoint = "repr_transparent")]
        public static partial Tupled repr_transparent(Tupled x, ref Tupled r);


        [LibraryImport(NativeLib, EntryPoint = "pattern_ascii_pointer_1")]
        public static partial uint pattern_ascii_pointer_1([MarshalAs(UnmanagedType.LPStr)] string x);


        [LibraryImport(NativeLib, EntryPoint = "pattern_ascii_pointer_2")]
        public static partial IntPtr pattern_ascii_pointer_2();


        [LibraryImport(NativeLib, EntryPoint = "pattern_ascii_pointer_3")]
        public static partial IntPtr pattern_ascii_pointer_3([MarshalAs(UnmanagedType.LPStr)] string x);


        [LibraryImport(NativeLib, EntryPoint = "pattern_ascii_pointer_4")]
        public static partial IntPtr pattern_ascii_pointer_4([MarshalAs(UnmanagedType.LPStr)] string x, uint l);


        [LibraryImport(NativeLib, EntryPoint = "pattern_ascii_pointer_5")]
        public static partial byte pattern_ascii_pointer_5([MarshalAs(UnmanagedType.LPStr)] string x, uint i);


        [LibraryImport(NativeLib, EntryPoint = "pattern_ascii_pointer_return_slice")]
        public static partial SliceUseCStrPtr pattern_ascii_pointer_return_slice();


        [LibraryImport(NativeLib, EntryPoint = "pattern_string_1")]
        public static partial Utf8String pattern_string_1(Utf8String x);

        public static unsafe Utf8String pattern_string_1(string x)
        {
            var x_wrapped = new Utf8String(x);
            try
            {
                return pattern_string_1(x_wrapped);
            }
            finally
            {
                x_wrapped.Dispose();
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "pattern_string_2")]
        public static partial uint pattern_string_2(Utf8String x);

        public static unsafe uint pattern_string_2(string x)
        {
            var x_wrapped = new Utf8String(x);
            try
            {
                return pattern_string_2(x_wrapped);
            }
            finally
            {
                x_wrapped.Dispose();
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "pattern_string_3")]
        public static partial Utf8String pattern_string_3();


        [LibraryImport(NativeLib, EntryPoint = "pattern_string_4")]
        public static partial UseUtf8String pattern_string_4(UseUtf8String x);


        [LibraryImport(NativeLib, EntryPoint = "pattern_ffi_slice_1")]
        public static partial uint pattern_ffi_slice_1(SliceU32 ffi_slice);

        public static unsafe uint pattern_ffi_slice_1(ReadOnlySpan<uint> ffi_slice)
        {
            fixed (void* ptr_ffi_slice = ffi_slice)
            {
                var ffi_slice_slice = new SliceU32(new IntPtr(ptr_ffi_slice), (ulong) ffi_slice.Length);
                try
                {
                    return pattern_ffi_slice_1(ffi_slice_slice);
                }
                finally
                {
                }
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "pattern_ffi_slice_1b")]
        public static partial uint pattern_ffi_slice_1b(SliceMutU32 ffi_slice);

        public static unsafe uint pattern_ffi_slice_1b(Span<uint> ffi_slice)
        {
            fixed (void* ptr_ffi_slice = ffi_slice)
            {
                var ffi_slice_slice = new SliceMutU32(new IntPtr(ptr_ffi_slice), (ulong) ffi_slice.Length);
                try
                {
                    return pattern_ffi_slice_1b(ffi_slice_slice);
                }
                finally
                {
                }
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "pattern_ffi_slice_2")]
        public static partial Vec3f32 pattern_ffi_slice_2(SliceVec3f32 ffi_slice, int i);

        public static unsafe Vec3f32 pattern_ffi_slice_2(ReadOnlySpan<Vec3f32> ffi_slice, int i)
        {
            fixed (void* ptr_ffi_slice = ffi_slice)
            {
                var ffi_slice_slice = new SliceVec3f32(new IntPtr(ptr_ffi_slice), (ulong) ffi_slice.Length);
                try
                {
                    return pattern_ffi_slice_2(ffi_slice_slice, i);
                }
                finally
                {
                }
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "pattern_ffi_slice_3b")]
        public static partial void pattern_ffi_slice_3b(SliceMutU8 slice, CallbackSliceMut callback);

        public static unsafe void pattern_ffi_slice_3b(Span<byte> slice, CallbackSliceMutDelegate callback)
        {
            fixed (void* ptr_slice = slice)
            {
                var slice_slice = new SliceMutU8(new IntPtr(ptr_slice), (ulong) slice.Length);
                var callback_wrapped = new CallbackSliceMut(callback);
                try
                {
                    pattern_ffi_slice_3b(slice_slice, callback_wrapped);
                }
                finally
                {
                    callback_wrapped.Dispose();
                }
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "pattern_ffi_slice_4")]
        public static partial void pattern_ffi_slice_4(SliceU8 slice, SliceMutU8 slice2);

        public static unsafe void pattern_ffi_slice_4(ReadOnlySpan<byte> slice, Span<byte> slice2)
        {
            fixed (void* ptr_slice = slice)
            {
                var slice_slice = new SliceU8(new IntPtr(ptr_slice), (ulong) slice.Length);
                fixed (void* ptr_slice2 = slice2)
                {
                    var slice2_slice = new SliceMutU8(new IntPtr(ptr_slice2), (ulong) slice2.Length);
                    try
                    {
                        pattern_ffi_slice_4(slice_slice, slice2_slice);
                    }
                    finally
                    {
                    }
                }
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "pattern_ffi_slice_5")]
        public static partial void pattern_ffi_slice_5(ref SliceU8 slice, ref SliceMutU8 slice2);

        public static unsafe void pattern_ffi_slice_5(ReadOnlySpan<byte> slice, Span<byte> slice2)
        {
            fixed (void* ptr_slice = slice)
            {
                var slice_slice = new SliceU8(new IntPtr(ptr_slice), (ulong) slice.Length);
                fixed (void* ptr_slice2 = slice2)
                {
                    var slice2_slice = new SliceMutU8(new IntPtr(ptr_slice2), (ulong) slice2.Length);
                    try
                    {
                        pattern_ffi_slice_5(ref slice_slice, ref slice2_slice);
                    }
                    finally
                    {
                    }
                }
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "pattern_ffi_slice_6")]
        public static partial void pattern_ffi_slice_6(ref SliceMutU8 slice, CallbackU8 callback);

        public static unsafe void pattern_ffi_slice_6(Span<byte> slice, CallbackU8Delegate callback)
        {
            fixed (void* ptr_slice = slice)
            {
                var slice_slice = new SliceMutU8(new IntPtr(ptr_slice), (ulong) slice.Length);
                var callback_wrapped = new CallbackU8(callback);
                try
                {
                    pattern_ffi_slice_6(ref slice_slice, callback_wrapped);
                }
                finally
                {
                    callback_wrapped.Dispose();
                }
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "pattern_ffi_slice_8")]
        public static partial void pattern_ffi_slice_8(ref SliceMutCharArray slice, CallbackCharArray2 callback);

        public static unsafe void pattern_ffi_slice_8(Span<CharArray> slice, CallbackCharArray2Delegate callback)
        {
            fixed (void* ptr_slice = slice)
            {
                var slice_slice = new SliceMutCharArray(new IntPtr(ptr_slice), (ulong) slice.Length);
                var callback_wrapped = new CallbackCharArray2(callback);
                try
                {
                    pattern_ffi_slice_8(ref slice_slice, callback_wrapped);
                }
                finally
                {
                    callback_wrapped.Dispose();
                }
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "pattern_ffi_slice_delegate")]
        public static partial byte pattern_ffi_slice_delegate(CallbackFFISlice callback);

        public static unsafe byte pattern_ffi_slice_delegate(CallbackFFISliceDelegate callback)
        {
            var callback_wrapped = new CallbackFFISlice(callback);
            try
            {
                return pattern_ffi_slice_delegate(callback_wrapped);
            }
            finally
            {
                callback_wrapped.Dispose();
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "pattern_ffi_slice_delegate_huge")]
        public static partial Vec3f32 pattern_ffi_slice_delegate_huge(CallbackHugeVecSlice callback);

        public static unsafe Vec3f32 pattern_ffi_slice_delegate_huge(CallbackHugeVecSliceDelegate callback)
        {
            var callback_wrapped = new CallbackHugeVecSlice(callback);
            try
            {
                return pattern_ffi_slice_delegate_huge(callback_wrapped);
            }
            finally
            {
                callback_wrapped.Dispose();
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "pattern_ffi_option_1")]
        public static partial OptionInner pattern_ffi_option_1(OptionInner ffi_slice);


        [LibraryImport(NativeLib, EntryPoint = "pattern_ffi_option_2")]
        public static partial Inner pattern_ffi_option_2(OptionInner ffi_slice);


        [LibraryImport(NativeLib, EntryPoint = "pattern_ffi_bool")]
        public static partial Bool pattern_ffi_bool(Bool ffi_bool);


        [LibraryImport(NativeLib, EntryPoint = "pattern_ffi_cchar")]
        public static partial sbyte pattern_ffi_cchar(sbyte ffi_cchar);


        [LibraryImport(NativeLib, EntryPoint = "pattern_ffi_cchar_const_pointer")]
        public static partial IntPtr pattern_ffi_cchar_const_pointer(IntPtr ffi_cchar);


        [LibraryImport(NativeLib, EntryPoint = "pattern_ffi_cchar_mut_pointer")]
        public static partial IntPtr pattern_ffi_cchar_mut_pointer(IntPtr ffi_cchar);


        [LibraryImport(NativeLib, EntryPoint = "pattern_api_guard")]
        public static partial ulong pattern_api_guard();


        [LibraryImport(NativeLib, EntryPoint = "pattern_callback_1")]
        public static partial uint pattern_callback_1(MyCallback callback, uint x);

        public static unsafe uint pattern_callback_1(MyCallbackDelegate callback, uint x)
        {
            var callback_wrapped = new MyCallback(callback);
            try
            {
                return pattern_callback_1(callback_wrapped, x);
            }
            finally
            {
                callback_wrapped.Dispose();
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "pattern_callback_2")]
        public static partial MyCallbackVoid pattern_callback_2(MyCallbackVoid callback);

        public static unsafe MyCallbackVoid pattern_callback_2(MyCallbackVoidDelegate callback)
        {
            var callback_wrapped = new MyCallbackVoid(callback);
            try
            {
                return pattern_callback_2(callback_wrapped);
            }
            finally
            {
                callback_wrapped.Dispose();
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "pattern_callback_4")]
        public static partial uint pattern_callback_4(MyCallbackNamespaced callback, uint x);

        public static unsafe uint pattern_callback_4(MyCallbackNamespacedDelegate callback, uint x)
        {
            var callback_wrapped = new MyCallbackNamespaced(callback);
            try
            {
                return pattern_callback_4(callback_wrapped, x);
            }
            finally
            {
                callback_wrapped.Dispose();
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "pattern_callback_5")]
        public static partial SumDelegate1 pattern_callback_5();


        [LibraryImport(NativeLib, EntryPoint = "pattern_callback_6")]
        public static partial SumDelegate2 pattern_callback_6();


        [LibraryImport(NativeLib, EntryPoint = "pattern_callback_7")]
        public static partial FFIError pattern_callback_7(SumDelegateReturn c1, SumDelegateReturn2 c2, int x, int i, out int o);

        public static unsafe void pattern_callback_7(SumDelegateReturnDelegate c1, SumDelegateReturn2Delegate c2, int x, int i, out int o)
        {
            var c1_wrapped = new SumDelegateReturn(c1);
            var c2_wrapped = new SumDelegateReturn2(c2);
            try
            {
                var rval = pattern_callback_7(c1_wrapped, c2_wrapped, x, i, out o);
                if (rval != FFIError.Ok)
                {
                    throw new InteropException<FFIError>(rval);
                }
            }
            finally
            {
                c1_wrapped.Dispose();
                c2_wrapped.Dispose();
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "pattern_surrogates_1")]
        public static partial void pattern_surrogates_1(Local s, out Container c);


        /// Destroys the given instance.
        ///
        /// # Safety
        ///
        /// The passed parameter MUST have been created with the corresponding init function;
        /// passing any other value results in undefined behavior.
        [LibraryImport(NativeLib, EntryPoint = "service_async_destroy")]
        public static partial FFIError service_async_destroy(ref IntPtr _context);


        [LibraryImport(NativeLib, EntryPoint = "service_async_new")]
        public static partial FFIError service_async_new(ref IntPtr _context);


        [LibraryImport(NativeLib, EntryPoint = "service_async_return_after_ms")]
        public static partial FFIError service_async_return_after_ms(IntPtr _context, ulong x, ulong ms, AsyncHelper _async_callback);

        public static unsafe Task<ResultU64> service_async_return_after_ms(IntPtr _context, ulong x, ulong ms)
        {
            var cs = new TaskCompletionSource<ResultU64>();
            GCHandle pinned = default;
            var cb = new AsyncHelper((x) => {
                var unmanaged = Marshal.PtrToStructure<ResultU64.Unmanaged>(x);
                var marshaller = new ResultU64.Marshaller(unmanaged);
                cs.SetResult(marshaller.ToManaged());
                pinned.Free();
            });
            pinned = GCHandle.Alloc(cb);
            try
            {
                var rval = service_async_return_after_ms(_context, x, ms, cb);
                if (rval != FFIError.Ok)
                {
                    throw new InteropException<FFIError>(rval);
                }
            }
            finally
            {
            }
            return cs.Task;
        }

        [LibraryImport(NativeLib, EntryPoint = "service_async_process_struct")]
        public static partial FFIError service_async_process_struct(IntPtr _context, NestedArray x, AsyncHelper _async_callback);

        public static unsafe Task<ResultNestedArray> service_async_process_struct(IntPtr _context, NestedArray x)
        {
            var cs = new TaskCompletionSource<ResultNestedArray>();
            GCHandle pinned = default;
            var cb = new AsyncHelper((x) => {
                var unmanaged = Marshal.PtrToStructure<ResultNestedArray.Unmanaged>(x);
                var marshaller = new ResultNestedArray.Marshaller(unmanaged);
                cs.SetResult(marshaller.ToManaged());
                pinned.Free();
            });
            pinned = GCHandle.Alloc(cb);
            try
            {
                var rval = service_async_process_struct(_context, x, cb);
                if (rval != FFIError.Ok)
                {
                    throw new InteropException<FFIError>(rval);
                }
            }
            finally
            {
            }
            return cs.Task;
        }

        [LibraryImport(NativeLib, EntryPoint = "service_async_handle_string")]
        public static partial FFIError service_async_handle_string(IntPtr _context, Utf8String s, AsyncHelper _async_callback);

        public static unsafe Task<ResultUtf8String> service_async_handle_string(IntPtr _context, string s)
        {
            var cs = new TaskCompletionSource<ResultUtf8String>();
            GCHandle pinned = default;
            var cb = new AsyncHelper((x) => {
                var unmanaged = Marshal.PtrToStructure<ResultUtf8String.Unmanaged>(x);
                var marshaller = new ResultUtf8String.Marshaller(unmanaged);
                cs.SetResult(marshaller.ToManaged());
                pinned.Free();
            });
            pinned = GCHandle.Alloc(cb);
            var s_wrapped = new Utf8String(s);
            try
            {
                var rval = service_async_handle_string(_context, s_wrapped, cb);
                if (rval != FFIError.Ok)
                {
                    throw new InteropException<FFIError>(rval);
                }
            }
            finally
            {
                s_wrapped.Dispose();
            }
            return cs.Task;
        }

        [LibraryImport(NativeLib, EntryPoint = "service_async_bad")]
        public static partial void service_async_bad(IntPtr _context);


        /// Destroys the given instance.
        ///
        /// # Safety
        ///
        /// The passed parameter MUST have been created with the corresponding init function;
        /// passing any other value results in undefined behavior.
        [LibraryImport(NativeLib, EntryPoint = "service_basic_destroy")]
        public static partial FFIError service_basic_destroy(ref IntPtr _context);


        [LibraryImport(NativeLib, EntryPoint = "service_basic_new")]
        public static partial FFIError service_basic_new(ref IntPtr _context);


        /// Destroys the given instance.
        ///
        /// # Safety
        ///
        /// The passed parameter MUST have been created with the corresponding init function;
        /// passing any other value results in undefined behavior.
        [LibraryImport(NativeLib, EntryPoint = "service_on_panic_destroy")]
        public static partial FFIError service_on_panic_destroy(ref IntPtr _context);


        [LibraryImport(NativeLib, EntryPoint = "service_on_panic_new")]
        public static partial FFIError service_on_panic_new(ref IntPtr _context);


        /// Methods returning a Result<(), _> are the default and do not
        /// need annotations.
        [LibraryImport(NativeLib, EntryPoint = "service_on_panic_return_result")]
        public static partial FFIError service_on_panic_return_result(IntPtr _context, uint anon1);


        /// Methods returning a value need an `on_panic` annotation.
        [LibraryImport(NativeLib, EntryPoint = "service_on_panic_return_default_value")]
        public static partial uint service_on_panic_return_default_value(IntPtr _context, uint x);


        /// This function has no panic safeguards. It will be a bit faster to
        /// call, but if it panics your host app will abort.
        [LibraryImport(NativeLib, EntryPoint = "service_on_panic_return_ub_on_panic")]
        public static partial IntPtr service_on_panic_return_ub_on_panic(IntPtr _context);


        /// Destroys the given instance.
        ///
        /// # Safety
        ///
        /// The passed parameter MUST have been created with the corresponding init function;
        /// passing any other value results in undefined behavior.
        [LibraryImport(NativeLib, EntryPoint = "service_callbacks_destroy")]
        public static partial FFIError service_callbacks_destroy(ref IntPtr _context);


        [LibraryImport(NativeLib, EntryPoint = "service_callbacks_new")]
        public static partial FFIError service_callbacks_new(ref IntPtr _context);


        [LibraryImport(NativeLib, EntryPoint = "service_callbacks_callback_simple")]
        public static partial FFIError service_callbacks_callback_simple(IntPtr _context, MyCallback callback);

        public static unsafe void service_callbacks_callback_simple(IntPtr _context, MyCallbackDelegate callback)
        {
            var callback_wrapped = new MyCallback(callback);
            try
            {
                var rval = service_callbacks_callback_simple(_context, callback_wrapped);
                if (rval != FFIError.Ok)
                {
                    throw new InteropException<FFIError>(rval);
                }
            }
            finally
            {
                callback_wrapped.Dispose();
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "service_callbacks_callback_ffi_return")]
        public static partial FFIError service_callbacks_callback_ffi_return(IntPtr _context, SumDelegateReturn callback);

        public static unsafe void service_callbacks_callback_ffi_return(IntPtr _context, SumDelegateReturnDelegate callback)
        {
            var callback_wrapped = new SumDelegateReturn(callback);
            try
            {
                var rval = service_callbacks_callback_ffi_return(_context, callback_wrapped);
                if (rval != FFIError.Ok)
                {
                    throw new InteropException<FFIError>(rval);
                }
            }
            finally
            {
                callback_wrapped.Dispose();
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "service_callbacks_callback_with_slice")]
        public static partial FFIError service_callbacks_callback_with_slice(IntPtr _context, SumDelegateReturn callback, SliceI32 input);

        public static unsafe void service_callbacks_callback_with_slice(IntPtr _context, SumDelegateReturnDelegate callback, ReadOnlySpan<int> input)
        {
            fixed (void* ptr_input = input)
            {
                var input_slice = new SliceI32(new IntPtr(ptr_input), (ulong) input.Length);
                var callback_wrapped = new SumDelegateReturn(callback);
                try
                {
                    var rval = service_callbacks_callback_with_slice(_context, callback_wrapped, input_slice);
                    if (rval != FFIError.Ok)
                    {
                        throw new InteropException<FFIError>(rval);
                    }
                }
                finally
                {
                    callback_wrapped.Dispose();
                }
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "service_callbacks_set_delegate_table")]
        public static partial void service_callbacks_set_delegate_table(IntPtr _context, DelegateTable table);


        [LibraryImport(NativeLib, EntryPoint = "service_callbacks_invoke_delegates")]
        public static partial FFIError service_callbacks_invoke_delegates(IntPtr _context);


        /// Destroys the given instance.
        ///
        /// # Safety
        ///
        /// The passed parameter MUST have been created with the corresponding init function;
        /// passing any other value results in undefined behavior.
        [LibraryImport(NativeLib, EntryPoint = "service_ignoring_methods_destroy")]
        public static partial FFIError service_ignoring_methods_destroy(ref IntPtr _context);


        [LibraryImport(NativeLib, EntryPoint = "service_ignoring_methods_new")]
        public static partial FFIError service_ignoring_methods_new(ref IntPtr _context);


        /// Destroys the given instance.
        ///
        /// # Safety
        ///
        /// The passed parameter MUST have been created with the corresponding init function;
        /// passing any other value results in undefined behavior.
        [LibraryImport(NativeLib, EntryPoint = "service_multiple_ctors_destroy")]
        public static partial FFIError service_multiple_ctors_destroy(ref IntPtr _context);


        [LibraryImport(NativeLib, EntryPoint = "service_multiple_ctors_new_with")]
        public static partial FFIError service_multiple_ctors_new_with(ref IntPtr _context, uint some_value);


        [LibraryImport(NativeLib, EntryPoint = "service_multiple_ctors_new_without")]
        public static partial FFIError service_multiple_ctors_new_without(ref IntPtr _context);


        [LibraryImport(NativeLib, EntryPoint = "service_multiple_ctors_new_with_string")]
        public static partial FFIError service_multiple_ctors_new_with_string(ref IntPtr _context, [MarshalAs(UnmanagedType.LPStr)] string anon0);


        [LibraryImport(NativeLib, EntryPoint = "service_multiple_ctors_new_failing")]
        public static partial FFIError service_multiple_ctors_new_failing(ref IntPtr _context, byte some_value);


        /// Destroys the given instance.
        ///
        /// # Safety
        ///
        /// The passed parameter MUST have been created with the corresponding init function;
        /// passing any other value results in undefined behavior.
        [LibraryImport(NativeLib, EntryPoint = "service_using_lifetimes_destroy")]
        public static partial FFIError service_using_lifetimes_destroy(ref IntPtr _context);


        [LibraryImport(NativeLib, EntryPoint = "service_using_lifetimes_new_with")]
        public static partial FFIError service_using_lifetimes_new_with(ref IntPtr _context, ref uint some_value);


        [LibraryImport(NativeLib, EntryPoint = "service_using_lifetimes_lifetime_1")]
        public static partial void service_using_lifetimes_lifetime_1(IntPtr _context, SliceBool slice);

        public static unsafe void service_using_lifetimes_lifetime_1(IntPtr _context, ReadOnlySpan<Bool> slice)
        {
            fixed (void* ptr_slice = slice)
            {
                var slice_slice = new SliceBool(new IntPtr(ptr_slice), (ulong) slice.Length);
                try
                {
                    service_using_lifetimes_lifetime_1(_context, slice_slice);
                }
                finally
                {
                }
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "service_using_lifetimes_lifetime_2")]
        public static partial void service_using_lifetimes_lifetime_2(IntPtr _context, SliceBool slice);

        public static unsafe void service_using_lifetimes_lifetime_2(IntPtr _context, ReadOnlySpan<Bool> slice)
        {
            fixed (void* ptr_slice = slice)
            {
                var slice_slice = new SliceBool(new IntPtr(ptr_slice), (ulong) slice.Length);
                try
                {
                    service_using_lifetimes_lifetime_2(_context, slice_slice);
                }
                finally
                {
                }
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "service_using_lifetimes_return_string_accept_slice")]
        public static partial IntPtr service_using_lifetimes_return_string_accept_slice(IntPtr anon0, SliceU8 anon1);

        public static unsafe string service_using_lifetimes_return_string_accept_slice(IntPtr anon0, ReadOnlySpan<byte> anon1)
        {
            fixed (void* ptr_anon1 = anon1)
            {
                var anon1_slice = new SliceU8(new IntPtr(ptr_anon1), (ulong) anon1.Length);
                try
                {
                    var s = service_using_lifetimes_return_string_accept_slice(anon0, anon1_slice);
                    return Marshal.PtrToStringAnsi(s);
                }
                finally
                {
                }
            }
        }

        /// Destroys the given instance.
        ///
        /// # Safety
        ///
        /// The passed parameter MUST have been created with the corresponding init function;
        /// passing any other value results in undefined behavior.
        [LibraryImport(NativeLib, EntryPoint = "service_various_slices_destroy")]
        public static partial FFIError service_various_slices_destroy(ref IntPtr _context);


        [LibraryImport(NativeLib, EntryPoint = "service_various_slices_new")]
        public static partial FFIError service_various_slices_new(ref IntPtr _context);


        [LibraryImport(NativeLib, EntryPoint = "service_various_slices_mut_self")]
        public static partial byte service_various_slices_mut_self(IntPtr _context, SliceU8 slice);

        public static unsafe byte service_various_slices_mut_self(IntPtr _context, ReadOnlySpan<byte> slice)
        {
            fixed (void* ptr_slice = slice)
            {
                var slice_slice = new SliceU8(new IntPtr(ptr_slice), (ulong) slice.Length);
                try
                {
                    return service_various_slices_mut_self(_context, slice_slice);
                }
                finally
                {
                }
            }
        }

        /// Single line.
        [LibraryImport(NativeLib, EntryPoint = "service_various_slices_mut_self_void")]
        public static partial void service_various_slices_mut_self_void(IntPtr _context, SliceBool slice);

        /// Single line.
        public static unsafe void service_various_slices_mut_self_void(IntPtr _context, ReadOnlySpan<Bool> slice)
        {
            fixed (void* ptr_slice = slice)
            {
                var slice_slice = new SliceBool(new IntPtr(ptr_slice), (ulong) slice.Length);
                try
                {
                    service_various_slices_mut_self_void(_context, slice_slice);
                }
                finally
                {
                }
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "service_various_slices_mut_self_ref")]
        public static partial byte service_various_slices_mut_self_ref(IntPtr _context, ref byte x, out byte y);


        [LibraryImport(NativeLib, EntryPoint = "service_various_slices_mut_self_ref_slice")]
        public static partial byte service_various_slices_mut_self_ref_slice(IntPtr _context, ref byte x, out byte y, SliceU8 slice);

        public static unsafe byte service_various_slices_mut_self_ref_slice(IntPtr _context, ref byte x, out byte y, ReadOnlySpan<byte> slice)
        {
            fixed (void* ptr_slice = slice)
            {
                var slice_slice = new SliceU8(new IntPtr(ptr_slice), (ulong) slice.Length);
                try
                {
                    return service_various_slices_mut_self_ref_slice(_context, ref x, out y, slice_slice);
                }
                finally
                {
                }
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "service_various_slices_mut_self_ref_slice_limited")]
        public static partial byte service_various_slices_mut_self_ref_slice_limited(IntPtr _context, ref byte x, out byte y, SliceU8 slice, SliceU8 slice2);

        public static unsafe byte service_various_slices_mut_self_ref_slice_limited(IntPtr _context, ref byte x, out byte y, ReadOnlySpan<byte> slice, ReadOnlySpan<byte> slice2)
        {
            fixed (void* ptr_slice = slice)
            {
                var slice_slice = new SliceU8(new IntPtr(ptr_slice), (ulong) slice.Length);
                fixed (void* ptr_slice2 = slice2)
                {
                    var slice2_slice = new SliceU8(new IntPtr(ptr_slice2), (ulong) slice2.Length);
                    try
                    {
                        return service_various_slices_mut_self_ref_slice_limited(_context, ref x, out y, slice_slice, slice2_slice);
                    }
                    finally
                    {
                    }
                }
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "service_various_slices_mut_self_ffi_error")]
        public static partial FFIError service_various_slices_mut_self_ffi_error(IntPtr _context, SliceMutU8 slice);

        public static unsafe void service_various_slices_mut_self_ffi_error(IntPtr _context, Span<byte> slice)
        {
            fixed (void* ptr_slice = slice)
            {
                var slice_slice = new SliceMutU8(new IntPtr(ptr_slice), (ulong) slice.Length);
                try
                {
                    var rval = service_various_slices_mut_self_ffi_error(_context, slice_slice);
                    if (rval != FFIError.Ok)
                    {
                        throw new InteropException<FFIError>(rval);
                    }
                }
                finally
                {
                }
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "service_various_slices_mut_self_no_error")]
        public static partial FFIError service_various_slices_mut_self_no_error(IntPtr _context, SliceMutU8 slice);

        public static unsafe void service_various_slices_mut_self_no_error(IntPtr _context, Span<byte> slice)
        {
            fixed (void* ptr_slice = slice)
            {
                var slice_slice = new SliceMutU8(new IntPtr(ptr_slice), (ulong) slice.Length);
                try
                {
                    var rval = service_various_slices_mut_self_no_error(_context, slice_slice);
                    if (rval != FFIError.Ok)
                    {
                        throw new InteropException<FFIError>(rval);
                    }
                }
                finally
                {
                }
            }
        }

        /// Warning, you _must_ discard the returned slice object before calling into this service
        /// again, as otherwise undefined behavior might happen.
        [LibraryImport(NativeLib, EntryPoint = "service_various_slices_return_slice")]
        public static partial SliceU32 service_various_slices_return_slice(IntPtr _context);


        /// Warning, you _must_ discard the returned slice object before calling into this service
        /// again, as otherwise undefined behavior might happen.
        [LibraryImport(NativeLib, EntryPoint = "service_various_slices_return_slice_mut")]
        public static partial SliceMutU32 service_various_slices_return_slice_mut(IntPtr _context);


        /// Destroys the given instance.
        ///
        /// # Safety
        ///
        /// The passed parameter MUST have been created with the corresponding init function;
        /// passing any other value results in undefined behavior.
        [LibraryImport(NativeLib, EntryPoint = "service_strings_destroy")]
        public static partial FFIError service_strings_destroy(ref IntPtr _context);


        [LibraryImport(NativeLib, EntryPoint = "service_strings_new")]
        public static partial FFIError service_strings_new(ref IntPtr _context);


        [LibraryImport(NativeLib, EntryPoint = "service_strings_pass_string")]
        public static partial void service_strings_pass_string(IntPtr _context, [MarshalAs(UnmanagedType.LPStr)] string anon1);


        [LibraryImport(NativeLib, EntryPoint = "service_strings_return_string")]
        public static partial IntPtr service_strings_return_string(IntPtr _context);


    }

    /// Documented enum.
    public enum EnumDocumented
    {
        /// Variant A.
        A = 0,
        /// Variant B.
        B = 1,
        /// Variant B.
        C = 2,
    }

    public enum EnumRenamed
    {
        X = 0,
    }

    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct Array
    {
        public byte[] data;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct Array
    {
        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public fixed byte data[16];
        }

        [CustomMarshaller(typeof(Array), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private Array _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(Array managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(Array managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                fixed(byte* _fixed = _unmanaged.data)
                {
                    if (_managed.data == null) { throw new InvalidOperationException("Array 'data' must not be null"); }
                    if (_managed.data.Length != 16) { throw new InvalidOperationException("Array size mismatch for 'data'"); }
                    var src = new ReadOnlySpan<byte>(_managed.data, 0, 16);
                    var dst = new Span<byte>(_fixed, 16);
                    src.CopyTo(dst);
                }

                return _unmanaged;
            }

            public unsafe Array ToManaged()
            {
                _managed = new Array();

                fixed(byte* _fixed = _unmanaged.data)
                {
                    _managed.data = new byte[16];
                    var src = new ReadOnlySpan<byte>(_fixed, 16);
                    var dst = new Span<byte>(_managed.data, 0, 16);
                    src.CopyTo(dst);
                }

                return _managed;
            }
            public void Free() { }
        }
    }

    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct BoolField
    {
        public bool val;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct BoolField
    {
        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public sbyte val;
        }

        [CustomMarshaller(typeof(BoolField), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private BoolField _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(BoolField managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(BoolField managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                _unmanaged.val = (sbyte) (_managed.val ? 1 : 0);

                return _unmanaged;
            }

            public unsafe BoolField ToManaged()
            {
                _managed = new BoolField();

                _managed.val = _unmanaged.val == 1 ? true : false;

                return _managed;
            }
            public void Free() { }
        }
    }

    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct CharArray
    {
        public FixedString str;
        public FixedString str_2;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct CharArray
    {
        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public FixedString.Unmanaged str;
            public FixedString.Unmanaged str_2;
        }

        [CustomMarshaller(typeof(CharArray), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private CharArray _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(CharArray managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(CharArray managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                var _str = new FixedString.Marshaller(_managed.str);
                _unmanaged.str = _str.ToUnmanaged();
                var _str_2 = new FixedString.Marshaller(_managed.str_2);
                _unmanaged.str_2 = _str_2.ToUnmanaged();

                return _unmanaged;
            }

            public unsafe CharArray ToManaged()
            {
                _managed = new CharArray();

                var _str = new FixedString.Marshaller(_unmanaged.str);
                _managed.str = _str.ToManaged();
                var _str_2 = new FixedString.Marshaller(_unmanaged.str_2);
                _managed.str_2 = _str_2.ToManaged();

                return _managed;
            }
            public void Free() { }
        }
    }

    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct Container
    {
        public Local foreign;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct Container
    {
        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public Local.Unmanaged foreign;
        }

        [CustomMarshaller(typeof(Container), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private Container _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(Container managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(Container managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                var _foreign = new Local.Marshaller(_managed.foreign);
                _unmanaged.foreign = _foreign.ToUnmanaged();

                return _unmanaged;
            }

            public unsafe Container ToManaged()
            {
                _managed = new Container();

                var _foreign = new Local.Marshaller(_unmanaged.foreign);
                _managed.foreign = _foreign.ToManaged();

                return _managed;
            }
            public void Free() { }
        }
    }

    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct DelegateTable
    {
        public MyCallback my_callback;
        public MyCallbackNamespaced my_callback_namespaced;
        public MyCallbackVoid my_callback_void;
        public MyCallbackContextual my_callback_contextual;
        public SumDelegate1 sum_delegate_1;
        public SumDelegate2 sum_delegate_2;
        public SumDelegateReturn sum_delegate_return;
        public SumDelegateReturn2 sum_delegate_return_2;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct DelegateTable
    {
        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public MyCallback.Unmanaged my_callback;
            public MyCallbackNamespaced.Unmanaged my_callback_namespaced;
            public MyCallbackVoid.Unmanaged my_callback_void;
            public MyCallbackContextual.Unmanaged my_callback_contextual;
            public SumDelegate1.Unmanaged sum_delegate_1;
            public SumDelegate2.Unmanaged sum_delegate_2;
            public SumDelegateReturn.Unmanaged sum_delegate_return;
            public SumDelegateReturn2.Unmanaged sum_delegate_return_2;
        }

        [CustomMarshaller(typeof(DelegateTable), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private DelegateTable _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(DelegateTable managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(DelegateTable managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                var _my_callback = new MyCallback.Marshaller(_managed.my_callback);
                _unmanaged.my_callback = _my_callback.ToUnmanaged();
                var _my_callback_namespaced = new MyCallbackNamespaced.Marshaller(_managed.my_callback_namespaced);
                _unmanaged.my_callback_namespaced = _my_callback_namespaced.ToUnmanaged();
                var _my_callback_void = new MyCallbackVoid.Marshaller(_managed.my_callback_void);
                _unmanaged.my_callback_void = _my_callback_void.ToUnmanaged();
                var _my_callback_contextual = new MyCallbackContextual.Marshaller(_managed.my_callback_contextual);
                _unmanaged.my_callback_contextual = _my_callback_contextual.ToUnmanaged();
                var _sum_delegate_1 = new SumDelegate1.Marshaller(_managed.sum_delegate_1);
                _unmanaged.sum_delegate_1 = _sum_delegate_1.ToUnmanaged();
                var _sum_delegate_2 = new SumDelegate2.Marshaller(_managed.sum_delegate_2);
                _unmanaged.sum_delegate_2 = _sum_delegate_2.ToUnmanaged();
                var _sum_delegate_return = new SumDelegateReturn.Marshaller(_managed.sum_delegate_return);
                _unmanaged.sum_delegate_return = _sum_delegate_return.ToUnmanaged();
                var _sum_delegate_return_2 = new SumDelegateReturn2.Marshaller(_managed.sum_delegate_return_2);
                _unmanaged.sum_delegate_return_2 = _sum_delegate_return_2.ToUnmanaged();

                return _unmanaged;
            }

            public unsafe DelegateTable ToManaged()
            {
                _managed = new DelegateTable();

                var _my_callback = new MyCallback.Marshaller(_unmanaged.my_callback);
                _managed.my_callback = _my_callback.ToManaged();
                var _my_callback_namespaced = new MyCallbackNamespaced.Marshaller(_unmanaged.my_callback_namespaced);
                _managed.my_callback_namespaced = _my_callback_namespaced.ToManaged();
                var _my_callback_void = new MyCallbackVoid.Marshaller(_unmanaged.my_callback_void);
                _managed.my_callback_void = _my_callback_void.ToManaged();
                var _my_callback_contextual = new MyCallbackContextual.Marshaller(_unmanaged.my_callback_contextual);
                _managed.my_callback_contextual = _my_callback_contextual.ToManaged();
                var _sum_delegate_1 = new SumDelegate1.Marshaller(_unmanaged.sum_delegate_1);
                _managed.sum_delegate_1 = _sum_delegate_1.ToManaged();
                var _sum_delegate_2 = new SumDelegate2.Marshaller(_unmanaged.sum_delegate_2);
                _managed.sum_delegate_2 = _sum_delegate_2.ToManaged();
                var _sum_delegate_return = new SumDelegateReturn.Marshaller(_unmanaged.sum_delegate_return);
                _managed.sum_delegate_return = _sum_delegate_return.ToManaged();
                var _sum_delegate_return_2 = new SumDelegateReturn2.Marshaller(_unmanaged.sum_delegate_return_2);
                _managed.sum_delegate_return_2 = _sum_delegate_return_2.ToManaged();

                return _managed;
            }
            public void Free() { }
        }
    }

    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct ExtraTypef32
    {
        public float x;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct ExtraTypef32
    {
        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public float x;
        }

        [CustomMarshaller(typeof(ExtraTypef32), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private ExtraTypef32 _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(ExtraTypef32 managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(ExtraTypef32 managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                _unmanaged.x = _managed.x;

                return _unmanaged;
            }

            public unsafe ExtraTypef32 ToManaged()
            {
                _managed = new ExtraTypef32();

                _managed.x = _unmanaged.x;

                return _managed;
            }
            public void Free() { }
        }
    }

    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct FixedString
    {
        public byte[] data;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct FixedString
    {
        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public fixed byte data[32];
        }

        [CustomMarshaller(typeof(FixedString), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private FixedString _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(FixedString managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(FixedString managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                fixed(byte* _fixed = _unmanaged.data)
                {
                    if (_managed.data == null) { throw new InvalidOperationException("Array 'data' must not be null"); }
                    if (_managed.data.Length != 32) { throw new InvalidOperationException("Array size mismatch for 'data'"); }
                    var src = new ReadOnlySpan<byte>(_managed.data, 0, 32);
                    var dst = new Span<byte>(_fixed, 32);
                    src.CopyTo(dst);
                }

                return _unmanaged;
            }

            public unsafe FixedString ToManaged()
            {
                _managed = new FixedString();

                fixed(byte* _fixed = _unmanaged.data)
                {
                    _managed.data = new byte[32];
                    var src = new ReadOnlySpan<byte>(_fixed, 32);
                    var dst = new Span<byte>(_managed.data, 0, 32);
                    src.CopyTo(dst);
                }

                return _managed;
            }
            public void Free() { }
        }
    }

    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct Genericu32
    {
        public IntPtr x;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct Genericu32
    {
        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public IntPtr x;
        }

        [CustomMarshaller(typeof(Genericu32), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private Genericu32 _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(Genericu32 managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(Genericu32 managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                _unmanaged.x = _managed.x;

                return _unmanaged;
            }

            public unsafe Genericu32 ToManaged()
            {
                _managed = new Genericu32();

                _managed.x = _unmanaged.x;

                return _managed;
            }
            public void Free() { }
        }
    }

    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct Genericu8
    {
        public IntPtr x;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct Genericu8
    {
        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public IntPtr x;
        }

        [CustomMarshaller(typeof(Genericu8), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private Genericu8 _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(Genericu8 managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(Genericu8 managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                _unmanaged.x = _managed.x;

                return _unmanaged;
            }

            public unsafe Genericu8 ToManaged()
            {
                _managed = new Genericu8();

                _managed.x = _unmanaged.x;

                return _managed;
            }
            public void Free() { }
        }
    }

    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct Inner
    {
        internal float x;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct Inner
    {
        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public float x;
        }

        [CustomMarshaller(typeof(Inner), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private Inner _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(Inner managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(Inner managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                _unmanaged.x = _managed.x;

                return _unmanaged;
            }

            public unsafe Inner ToManaged()
            {
                _managed = new Inner();

                _managed.x = _unmanaged.x;

                return _managed;
            }
            public void Free() { }
        }
    }

    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct Local
    {
        internal uint x;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct Local
    {
        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public uint x;
        }

        [CustomMarshaller(typeof(Local), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private Local _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(Local managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(Local managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                _unmanaged.x = _managed.x;

                return _unmanaged;
            }

            public unsafe Local ToManaged()
            {
                _managed = new Local();

                _managed.x = _unmanaged.x;

                return _managed;
            }
            public void Free() { }
        }
    }

    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct NestedArray
    {
        public EnumRenamed field_enum;
        public Vec3f32 field_vec;
        public bool field_bool;
        public int field_int;
        public ushort[] field_array;
        public ushort[] field_array_2;
        public Array field_struct;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct NestedArray
    {
        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public EnumRenamed field_enum;
            public Vec3f32.Unmanaged field_vec;
            public sbyte field_bool;
            public int field_int;
            public fixed ushort field_array[5];
            public fixed ushort field_array_2[5];
            public Array.Unmanaged field_struct;
        }

        [CustomMarshaller(typeof(NestedArray), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private NestedArray _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(NestedArray managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(NestedArray managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                _unmanaged.field_enum = _managed.field_enum;
                var _field_vec = new Vec3f32.Marshaller(_managed.field_vec);
                _unmanaged.field_vec = _field_vec.ToUnmanaged();
                _unmanaged.field_bool = (sbyte) (_managed.field_bool ? 1 : 0);
                _unmanaged.field_int = _managed.field_int;
                fixed(ushort* _fixed = _unmanaged.field_array)
                {
                    if (_managed.field_array == null) { throw new InvalidOperationException("Array 'field_array' must not be null"); }
                    if (_managed.field_array.Length != 5) { throw new InvalidOperationException("Array size mismatch for 'field_array'"); }
                    var src = new ReadOnlySpan<ushort>(_managed.field_array, 0, 5);
                    var dst = new Span<ushort>(_fixed, 5);
                    src.CopyTo(dst);
                }
                fixed(ushort* _fixed = _unmanaged.field_array_2)
                {
                    if (_managed.field_array_2 == null) { throw new InvalidOperationException("Array 'field_array_2' must not be null"); }
                    if (_managed.field_array_2.Length != 5) { throw new InvalidOperationException("Array size mismatch for 'field_array_2'"); }
                    var src = new ReadOnlySpan<ushort>(_managed.field_array_2, 0, 5);
                    var dst = new Span<ushort>(_fixed, 5);
                    src.CopyTo(dst);
                }
                var _field_struct = new Array.Marshaller(_managed.field_struct);
                _unmanaged.field_struct = _field_struct.ToUnmanaged();

                return _unmanaged;
            }

            public unsafe NestedArray ToManaged()
            {
                _managed = new NestedArray();

                _managed.field_enum = _unmanaged.field_enum;
                var _field_vec = new Vec3f32.Marshaller(_unmanaged.field_vec);
                _managed.field_vec = _field_vec.ToManaged();
                _managed.field_bool = _unmanaged.field_bool == 1 ? true : false;
                _managed.field_int = _unmanaged.field_int;
                fixed(ushort* _fixed = _unmanaged.field_array)
                {
                    _managed.field_array = new ushort[5];
                    var src = new ReadOnlySpan<ushort>(_fixed, 5);
                    var dst = new Span<ushort>(_managed.field_array, 0, 5);
                    src.CopyTo(dst);
                }
                fixed(ushort* _fixed = _unmanaged.field_array_2)
                {
                    _managed.field_array_2 = new ushort[5];
                    var src = new ReadOnlySpan<ushort>(_fixed, 5);
                    var dst = new Span<ushort>(_managed.field_array_2, 0, 5);
                    src.CopyTo(dst);
                }
                var _field_struct = new Array.Marshaller(_unmanaged.field_struct);
                _managed.field_struct = _field_struct.ToManaged();

                return _managed;
            }
            public void Free() { }
        }
    }

    [Serializable]
    [StructLayout(LayoutKind.Sequential, Pack = 1)]
    public partial struct Packed1
    {
        public byte x;
        public ushort y;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct Packed1
    {
        [StructLayout(LayoutKind.Sequential, Pack = 1)]
        public unsafe struct Unmanaged
        {
            public byte x;
            public ushort y;
        }

        [CustomMarshaller(typeof(Packed1), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private Packed1 _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(Packed1 managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(Packed1 managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                _unmanaged.x = _managed.x;
                _unmanaged.y = _managed.y;

                return _unmanaged;
            }

            public unsafe Packed1 ToManaged()
            {
                _managed = new Packed1();

                _managed.x = _unmanaged.x;
                _managed.y = _unmanaged.y;

                return _managed;
            }
            public void Free() { }
        }
    }

    [Serializable]
    [StructLayout(LayoutKind.Sequential, Pack = 1)]
    public partial struct Packed2
    {
        public ushort y;
        public byte x;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct Packed2
    {
        [StructLayout(LayoutKind.Sequential, Pack = 1)]
        public unsafe struct Unmanaged
        {
            public ushort y;
            public byte x;
        }

        [CustomMarshaller(typeof(Packed2), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private Packed2 _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(Packed2 managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(Packed2 managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                _unmanaged.y = _managed.y;
                _unmanaged.x = _managed.x;

                return _unmanaged;
            }

            public unsafe Packed2 ToManaged()
            {
                _managed = new Packed2();

                _managed.y = _unmanaged.y;
                _managed.x = _unmanaged.x;

                return _managed;
            }
            public void Free() { }
        }
    }

    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct Phantomu8
    {
        public uint x;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct Phantomu8
    {
        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public uint x;
        }

        [CustomMarshaller(typeof(Phantomu8), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private Phantomu8 _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(Phantomu8 managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(Phantomu8 managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                _unmanaged.x = _managed.x;

                return _unmanaged;
            }

            public unsafe Phantomu8 ToManaged()
            {
                _managed = new Phantomu8();

                _managed.x = _unmanaged.x;

                return _managed;
            }
            public void Free() { }
        }
    }

    /// Documented struct.
    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct StructDocumented
    {
        /// Documented field.
        public float x;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct StructDocumented
    {
        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public float x;
        }

        [CustomMarshaller(typeof(StructDocumented), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private StructDocumented _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(StructDocumented managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(StructDocumented managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                _unmanaged.x = _managed.x;

                return _unmanaged;
            }

            public unsafe StructDocumented ToManaged()
            {
                _managed = new StructDocumented();

                _managed.x = _unmanaged.x;

                return _managed;
            }
            public void Free() { }
        }
    }

    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct StructRenamed
    {
        public EnumRenamed e;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct StructRenamed
    {
        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public EnumRenamed e;
        }

        [CustomMarshaller(typeof(StructRenamed), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private StructRenamed _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(StructRenamed managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(StructRenamed managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                _unmanaged.e = _managed.e;

                return _unmanaged;
            }

            public unsafe StructRenamed ToManaged()
            {
                _managed = new StructRenamed();

                _managed.e = _unmanaged.e;

                return _managed;
            }
            public void Free() { }
        }
    }

    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct Tupled
    {
        public byte x0;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct Tupled
    {
        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public byte x0;
        }

        [CustomMarshaller(typeof(Tupled), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private Tupled _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(Tupled managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(Tupled managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                _unmanaged.x0 = _managed.x0;

                return _unmanaged;
            }

            public unsafe Tupled ToManaged()
            {
                _managed = new Tupled();

                _managed.x0 = _unmanaged.x0;

                return _managed;
            }
            public void Free() { }
        }
    }

    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct UseCStrPtr
    {
        public string ascii_string;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct UseCStrPtr
    {
        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public IntPtr ascii_string;
        }

        [CustomMarshaller(typeof(UseCStrPtr), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private UseCStrPtr _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(UseCStrPtr managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(UseCStrPtr managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                _unmanaged.ascii_string = Marshal.StringToHGlobalAnsi(_managed.ascii_string);

                return _unmanaged;
            }

            public unsafe UseCStrPtr ToManaged()
            {
                _managed = new UseCStrPtr();

                _managed.ascii_string = Marshal.PtrToStringAnsi(_unmanaged.ascii_string);

                return _managed;
            }
            public void Free() { }
        }
    }

    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct UseUtf8String
    {
        public string s;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct UseUtf8String
    {
        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public Utf8String.Unmanaged s;
        }

        [CustomMarshaller(typeof(UseUtf8String), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private UseUtf8String _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(UseUtf8String managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(UseUtf8String managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                var _s = new Utf8String.Marshaller(new Utf8String(_managed.s));
                _unmanaged.s = _s.ToUnmanaged();

                return _unmanaged;
            }

            public unsafe UseUtf8String ToManaged()
            {
                _managed = new UseUtf8String();

                var _s = new Utf8String.Marshaller(_unmanaged.s);
                _managed.s = _s.ToManaged().String;

                return _managed;
            }
            public void Free() { }
        }
    }

    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct Vec1
    {
        public float x;
        public float y;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct Vec1
    {
        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public float x;
            public float y;
        }

        [CustomMarshaller(typeof(Vec1), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private Vec1 _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(Vec1 managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(Vec1 managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                _unmanaged.x = _managed.x;
                _unmanaged.y = _managed.y;

                return _unmanaged;
            }

            public unsafe Vec1 ToManaged()
            {
                _managed = new Vec1();

                _managed.x = _unmanaged.x;
                _managed.y = _unmanaged.y;

                return _managed;
            }
            public void Free() { }
        }
    }

    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct Vec2
    {
        public double x;
        public double z;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct Vec2
    {
        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public double x;
            public double z;
        }

        [CustomMarshaller(typeof(Vec2), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private Vec2 _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(Vec2 managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(Vec2 managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                _unmanaged.x = _managed.x;
                _unmanaged.z = _managed.z;

                return _unmanaged;
            }

            public unsafe Vec2 ToManaged()
            {
                _managed = new Vec2();

                _managed.x = _unmanaged.x;
                _managed.z = _unmanaged.z;

                return _managed;
            }
            public void Free() { }
        }
    }

    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct Vec3f32
    {
        public float x;
        public float y;
        public float z;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct Vec3f32
    {
        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public float x;
            public float y;
            public float z;
        }

        [CustomMarshaller(typeof(Vec3f32), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private Vec3f32 _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(Vec3f32 managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(Vec3f32 managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                _unmanaged.x = _managed.x;
                _unmanaged.y = _managed.y;
                _unmanaged.z = _managed.z;

                return _unmanaged;
            }

            public unsafe Vec3f32 ToManaged()
            {
                _managed = new Vec3f32();

                _managed.x = _unmanaged.x;
                _managed.y = _unmanaged.y;
                _managed.z = _unmanaged.z;

                return _managed;
            }
            public void Free() { }
        }
    }

    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct Visibility1
    {
        public byte pblc;
        internal byte prvt;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct Visibility1
    {
        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public byte pblc;
            public byte prvt;
        }

        [CustomMarshaller(typeof(Visibility1), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private Visibility1 _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(Visibility1 managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(Visibility1 managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                _unmanaged.pblc = _managed.pblc;
                _unmanaged.prvt = _managed.prvt;

                return _unmanaged;
            }

            public unsafe Visibility1 ToManaged()
            {
                _managed = new Visibility1();

                _managed.pblc = _unmanaged.pblc;
                _managed.prvt = _unmanaged.prvt;

                return _managed;
            }
            public void Free() { }
        }
    }

    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct Visibility2
    {
        public byte pblc1;
        public byte pblc2;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct Visibility2
    {
        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public byte pblc1;
            public byte pblc2;
        }

        [CustomMarshaller(typeof(Visibility2), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private Visibility2 _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(Visibility2 managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(Visibility2 managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                _unmanaged.pblc1 = _managed.pblc1;
                _unmanaged.pblc2 = _managed.pblc2;

                return _unmanaged;
            }

            public unsafe Visibility2 ToManaged()
            {
                _managed = new Visibility2();

                _managed.pblc1 = _unmanaged.pblc1;
                _managed.pblc2 = _unmanaged.pblc2;

                return _managed;
            }
            public void Free() { }
        }
    }

    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct Weird1u32
    {
        internal uint x;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct Weird1u32
    {
        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public uint x;
        }

        [CustomMarshaller(typeof(Weird1u32), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private Weird1u32 _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(Weird1u32 managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(Weird1u32 managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                _unmanaged.x = _managed.x;

                return _unmanaged;
            }

            public unsafe Weird1u32 ToManaged()
            {
                _managed = new Weird1u32();

                _managed.x = _unmanaged.x;

                return _managed;
            }
            public void Free() { }
        }
    }

    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct Weird2u8
    {
        internal byte t;
        internal byte[] a;
        internal IntPtr r;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct Weird2u8
    {
        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public byte t;
            public fixed byte a[5];
            public IntPtr r;
        }

        [CustomMarshaller(typeof(Weird2u8), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private Weird2u8 _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(Weird2u8 managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(Weird2u8 managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                _unmanaged.t = _managed.t;
                fixed(byte* _fixed = _unmanaged.a)
                {
                    if (_managed.a == null) { throw new InvalidOperationException("Array 'a' must not be null"); }
                    if (_managed.a.Length != 5) { throw new InvalidOperationException("Array size mismatch for 'a'"); }
                    var src = new ReadOnlySpan<byte>(_managed.a, 0, 5);
                    var dst = new Span<byte>(_fixed, 5);
                    src.CopyTo(dst);
                }
                _unmanaged.r = _managed.r;

                return _unmanaged;
            }

            public unsafe Weird2u8 ToManaged()
            {
                _managed = new Weird2u8();

                _managed.t = _unmanaged.t;
                fixed(byte* _fixed = _unmanaged.a)
                {
                    _managed.a = new byte[5];
                    var src = new ReadOnlySpan<byte>(_fixed, 5);
                    var dst = new Span<byte>(_managed.a, 0, 5);
                    src.CopyTo(dst);
                }
                _managed.r = _unmanaged.r;

                return _managed;
            }
            public void Free() { }
        }
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate byte InteropDelegate_fn_u8_rval_u8(byte x0);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void InteropDelegate_fn_CharArray(CharArray x0);
    public delegate void InteropDelegate_fn_CharArray_native(CharArray x0);

    public enum FFIError
    {
        Ok = 0,
        Null = 100,
        Panic = 200,
        Delegate = 300,
        Fail = 400,
    }

    public partial struct SliceUseCStrPtr
    {
        UseCStrPtr[] _managed;
        IntPtr _data;
        ulong _len;
        bool _wePinned;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct SliceUseCStrPtr : IEnumerable<UseCStrPtr>, IDisposable
    {
        public int Count => _managed?.Length ?? (int)_len;

        public unsafe ReadOnlySpan<UseCStrPtr> ReadOnlySpan
        {
            get
            {
                if (_managed is not null)
                {
                    return new ReadOnlySpan<UseCStrPtr>(_managed);
                }
                return new ReadOnlySpan<UseCStrPtr>(_data.ToPointer(), (int)_len);
            }
        }

        public unsafe UseCStrPtr this[int i]
        {
            get
            {
                if (i >= Count) throw new IndexOutOfRangeException();
                if (_managed is not null)
                {
                    return _managed[i];
                }
                return Unsafe.Read<UseCStrPtr>((void*)IntPtr.Add(_data, i * Unsafe.SizeOf<UseCStrPtr>()));
            }
        }

        public SliceUseCStrPtr(GCHandle handle, ulong count)
        {
            _data = handle.AddrOfPinnedObject();
            _len = count;
        }

        public SliceUseCStrPtr(IntPtr handle, ulong count)
        {
            _data = handle;
            _len = count;
        }

        public SliceUseCStrPtr(UseCStrPtr[] managed)
        {
            _managed = managed;
            _data = GCHandle.Alloc(managed, GCHandleType.Pinned).AddrOfPinnedObject();
            _len = (ulong) managed.Length;
            _wePinned = true;
        }

        public IEnumerator<UseCStrPtr> GetEnumerator()
        {
            for (var i = 0; i < Count; ++i)
            {
                yield return this[i];
            }
        }

        IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();

        public void Dispose()
        {
            if (_wePinned && _data != IntPtr.Zero)
            {
                Marshal.FreeHGlobal(_data);
                _data = IntPtr.Zero;
            }
            _managed = null;
        }

        [CustomMarshaller(typeof(SliceUseCStrPtr), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            public IntPtr Data;
            public ulong Len;

            public SliceUseCStrPtr Managed()
            {
                return new SliceUseCStrPtr(Data, Len);
            }
        }

        public ref struct Marshaller
        {
            private SliceUseCStrPtr managed;
            private Unmanaged native;
            private Unmanaged sourceNative;
            private GCHandle? pinned;
            private SliceUseCStrPtr marshalled;

            public void FromManaged(SliceUseCStrPtr managed) { this.managed = managed; }
            public Unmanaged ToUnmanaged() => new Unmanaged { Data = managed._data, Len = managed._len };
            public void FromUnmanaged(Unmanaged unmanaged) { sourceNative = unmanaged; }
            public unsafe SliceUseCStrPtr ToManaged() => new SliceUseCStrPtr(sourceNative.Data, sourceNative.Len);
            public void Free() { }
        }
    }

    public partial struct SliceVec3f32
    {
        Vec3f32[] _managed;
        IntPtr _data;
        ulong _len;
        bool _wePinned;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct SliceVec3f32 : IEnumerable<Vec3f32>, IDisposable
    {
        public int Count => _managed?.Length ?? (int)_len;

        public unsafe ReadOnlySpan<Vec3f32> ReadOnlySpan
        {
            get
            {
                if (_managed is not null)
                {
                    return new ReadOnlySpan<Vec3f32>(_managed);
                }
                return new ReadOnlySpan<Vec3f32>(_data.ToPointer(), (int)_len);
            }
        }

        public unsafe Vec3f32 this[int i]
        {
            get
            {
                if (i >= Count) throw new IndexOutOfRangeException();
                if (_managed is not null)
                {
                    return _managed[i];
                }
                return Unsafe.Read<Vec3f32>((void*)IntPtr.Add(_data, i * Unsafe.SizeOf<Vec3f32>()));
            }
        }

        public SliceVec3f32(GCHandle handle, ulong count)
        {
            _data = handle.AddrOfPinnedObject();
            _len = count;
        }

        public SliceVec3f32(IntPtr handle, ulong count)
        {
            _data = handle;
            _len = count;
        }

        public SliceVec3f32(Vec3f32[] managed)
        {
            _managed = managed;
            _data = GCHandle.Alloc(managed, GCHandleType.Pinned).AddrOfPinnedObject();
            _len = (ulong) managed.Length;
            _wePinned = true;
        }

        public IEnumerator<Vec3f32> GetEnumerator()
        {
            for (var i = 0; i < Count; ++i)
            {
                yield return this[i];
            }
        }

        IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();

        public void Dispose()
        {
            if (_wePinned && _data != IntPtr.Zero)
            {
                Marshal.FreeHGlobal(_data);
                _data = IntPtr.Zero;
            }
            _managed = null;
        }

        [CustomMarshaller(typeof(SliceVec3f32), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            public IntPtr Data;
            public ulong Len;

            public SliceVec3f32 Managed()
            {
                return new SliceVec3f32(Data, Len);
            }
        }

        public ref struct Marshaller
        {
            private SliceVec3f32 managed;
            private Unmanaged native;
            private Unmanaged sourceNative;
            private GCHandle? pinned;
            private SliceVec3f32 marshalled;

            public void FromManaged(SliceVec3f32 managed) { this.managed = managed; }
            public Unmanaged ToUnmanaged() => new Unmanaged { Data = managed._data, Len = managed._len };
            public void FromUnmanaged(Unmanaged unmanaged) { sourceNative = unmanaged; }
            public unsafe SliceVec3f32 ToManaged() => new SliceVec3f32(sourceNative.Data, sourceNative.Len);
            public void Free() { }
        }
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct SliceMutCharArray : IEnumerable<CharArray>, IDisposable
    {
        CharArray[] _managed;
        IntPtr _data;
        ulong _len;
        bool _wePinned;

        public int Count => _managed?.Length ?? (int)_len;

        public unsafe ReadOnlySpan<CharArray> ReadOnlySpan
        {
            get
            {
                if (_managed is not null)
                {
                    return new ReadOnlySpan<CharArray>(_managed);
                }
                return new ReadOnlySpan<CharArray>(_data.ToPointer(), (int)_len);
            }
        }

        public unsafe CharArray this[int i]
        {
            get
            {
                if (i >= Count) throw new IndexOutOfRangeException();
                if (_managed is not null)
                {
                    return _managed[i];
                }
                return Unsafe.Read<CharArray>((void*)IntPtr.Add(_data, i * Unsafe.SizeOf<CharArray>()));
            }
            set
            {
                if (i >= Count) throw new IndexOutOfRangeException();
                var d = (CharArray*) _data.ToPointer();
                d[i] = value;
            }
        }

        public SliceMutCharArray(GCHandle handle, ulong count)
        {
            _data = handle.AddrOfPinnedObject();
            _len = count;
        }

        public SliceMutCharArray(IntPtr handle, ulong count)
        {
            _data = handle;
            _len = count;
        }

        public SliceMutCharArray(CharArray[] managed)
        {
            _managed = managed;
            _data = GCHandle.Alloc(managed, GCHandleType.Pinned).AddrOfPinnedObject();
            _len = (ulong) managed.Length;
            _wePinned = true;
        }

        public IEnumerator<CharArray> GetEnumerator()
        {
            for (var i = 0; i < Count; ++i)
            {
                yield return this[i];
            }
        }

        IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();

        public void Dispose()
        {
            if (_wePinned && _data != IntPtr.Zero)
            {
                Marshal.FreeHGlobal(_data);
                _data = IntPtr.Zero;
            }
            _managed = null;
        }

        [CustomMarshaller(typeof(SliceMutCharArray), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            public IntPtr Data;
            public ulong Len;

            public SliceMutCharArray Managed()
            {
                return new SliceMutCharArray(Data, Len);
            }
        }

        public ref struct Marshaller
        {
            private SliceMutCharArray managed;
            private Unmanaged native;
            private Unmanaged sourceNative;
            private GCHandle? pinned;
            private SliceMutCharArray marshalled;

            public void FromManaged(SliceMutCharArray managed) { this.managed = managed; }
            public Unmanaged ToUnmanaged() => new Unmanaged { Data = managed._data, Len = managed._len };
            public void FromUnmanaged(Unmanaged unmanaged) { sourceNative = unmanaged; }
            public unsafe SliceMutCharArray ToManaged() => new SliceMutCharArray(sourceNative.Data, sourceNative.Len);
            public void Free() { }
        }
    }

    ///Option type containing boolean flag and maybe valid data.
    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct OptionInner
    {
        ///Element that is maybe valid.
        internal Inner t;
        ///Byte where `1` means element `t` is valid.
        internal byte is_some;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct OptionInner
    {
        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public Inner.Unmanaged t;
            public byte is_some;
        }

        [CustomMarshaller(typeof(OptionInner), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private OptionInner _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(OptionInner managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(OptionInner managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                var _t = new Inner.Marshaller(_managed.t);
                _unmanaged.t = _t.ToUnmanaged();
                _unmanaged.is_some = _managed.is_some;

                return _unmanaged;
            }

            public unsafe OptionInner ToManaged()
            {
                _managed = new OptionInner();

                var _t = new Inner.Marshaller(_unmanaged.t);
                _managed.t = _t.ToManaged();
                _managed.is_some = _unmanaged.is_some;

                return _managed;
            }
            public void Free() { }
        }
    }

    public partial struct OptionInner
    {
        public static OptionInner FromNullable(Inner? nullable)
        {
            var result = new OptionInner();
            if (nullable.HasValue)
            {
                result.is_some = 1;
                result.t = nullable.Value;
            }

            return result;
        }

        public Inner? ToNullable()
        {
            return this.is_some == 1 ? this.t : (Inner?)null;
        }
    }


    ///Result that contains value or an error.
    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct ResultNestedArray
    {
        ///Element if err is `Ok`.
        internal NestedArray t;
        ///Error value.
        internal FFIError err;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct ResultNestedArray
    {
        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public NestedArray.Unmanaged t;
            public FFIError err;
        }

        [CustomMarshaller(typeof(ResultNestedArray), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private ResultNestedArray _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(ResultNestedArray managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(ResultNestedArray managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                var _t = new NestedArray.Marshaller(_managed.t);
                _unmanaged.t = _t.ToUnmanaged();
                _unmanaged.err = _managed.err;

                return _unmanaged;
            }

            public unsafe ResultNestedArray ToManaged()
            {
                _managed = new ResultNestedArray();

                var _t = new NestedArray.Marshaller(_unmanaged.t);
                _managed.t = _t.ToManaged();
                _managed.err = _unmanaged.err;

                return _managed;
            }
            public void Free() { }
        }
    }

    public partial struct ResultNestedArray
    {
        public NestedArray Ok()
        {
            if (err == 0)
            {
                return t;
            }
            throw new InteropException<FFIError>(err);
        }

    }


    ///Result that contains value or an error.
    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct ResultU64
    {
        ///Element if err is `Ok`.
        internal ulong t;
        ///Error value.
        internal FFIError err;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct ResultU64
    {
        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public ulong t;
            public FFIError err;
        }

        [CustomMarshaller(typeof(ResultU64), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private ResultU64 _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(ResultU64 managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(ResultU64 managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                _unmanaged.t = _managed.t;
                _unmanaged.err = _managed.err;

                return _unmanaged;
            }

            public unsafe ResultU64 ToManaged()
            {
                _managed = new ResultU64();

                _managed.t = _unmanaged.t;
                _managed.err = _unmanaged.err;

                return _managed;
            }
            public void Free() { }
        }
    }

    public partial struct ResultU64
    {
        public ulong Ok()
        {
            if (err == 0)
            {
                return t;
            }
            throw new InteropException<FFIError>(err);
        }

    }


    ///Result that contains value or an error.
    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct ResultUtf8String
    {
        ///Element if err is `Ok`.
        internal string t;
        ///Error value.
        internal FFIError err;
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct ResultUtf8String
    {
        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public Utf8String.Unmanaged t;
            public FFIError err;
        }

        [CustomMarshaller(typeof(ResultUtf8String), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        public ref struct Marshaller
        {
            private ResultUtf8String _managed; // Used when converting managed -> unmanaged
            private Unmanaged _unmanaged; // Used when converting unmanaged -> managed

            public Marshaller(ResultUtf8String managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(ResultUtf8String managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public unsafe Unmanaged ToUnmanaged()
            {;
                _unmanaged = new Unmanaged();

                var _t = new Utf8String.Marshaller(new Utf8String(_managed.t));
                _unmanaged.t = _t.ToUnmanaged();
                _unmanaged.err = _managed.err;

                return _unmanaged;
            }

            public unsafe ResultUtf8String ToManaged()
            {
                _managed = new ResultUtf8String();

                var _t = new Utf8String.Marshaller(_unmanaged.t);
                _managed.t = _t.ToManaged().String;
                _managed.err = _unmanaged.err;

                return _managed;
            }
            public void Free() { }
        }
    }

    public partial struct ResultUtf8String
    {
        public string Ok()
        {
            if (err == 0)
            {
                return t;
            }
            throw new InteropException<FFIError>(err);
        }

    }


    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void CallbackCharArray2Native(CharArray value, IntPtr callback_data); // 'True' native callback signature
    public delegate void CallbackCharArray2Delegate(CharArray value); // Our C# signature

    public partial class CallbackCharArray2
    {
        private CallbackCharArray2Delegate _managed; // C# callback
        private CallbackCharArray2Native _native; // Native callback 
        private IntPtr _ptr; // Raw function pointer of native callback
        private Exception _exception; // Set if the callback encountered an Exception
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class CallbackCharArray2 : IDisposable
    {

        public CallbackCharArray2() { }

        public CallbackCharArray2(CallbackCharArray2Delegate managed)
        {
            _managed = managed;
            _native = Call;
            _ptr = Marshal.GetFunctionPointerForDelegate(_native);
        }

        public void Call(CharArray value, IntPtr callback_data)
        {
            // We ignore the last parameter, a generic callback pointer, as it's not needed in C#.
            try
            {
                _managed(value);
            }
            catch (Exception e)
            {
                _exception = e;
                return;
            }
        }

        public void Dispose()
        {
            // This means when the callback was invoked from Rust C# had an exception which
            // we caught (otherwise C# might not re-enter Rust, and we leak memory). Now is
            // the time to rethrow it.
            if (_exception != null) throw _exception;
        }

        [CustomMarshaller(typeof(CallbackCharArray2), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta {  }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            internal IntPtr Callback;
            internal IntPtr Data;
        }

        public ref struct Marshaller
        {
            private CallbackCharArray2 _managed;
            private Unmanaged _unmanaged;

            public Marshaller(CallbackCharArray2 managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(CallbackCharArray2 managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public Unmanaged ToUnmanaged()
            {
                _unmanaged = new Unmanaged();
                _unmanaged.Callback = _managed?._ptr ?? IntPtr.Zero;
                _unmanaged.Data = IntPtr.Zero;
                return _unmanaged;
            }

            public CallbackCharArray2 ToManaged()
            {
                _managed = new CallbackCharArray2();
                _managed._ptr = _unmanaged.Callback;
                return _managed;
            }

            public void Free() { }
        }
    }


    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate byte CallbackFFISliceNative(SliceU8.Unmanaged slice, IntPtr callback_data); // 'True' native callback signature
    public delegate byte CallbackFFISliceDelegate(SliceU8 slice); // Our C# signature

    public partial class CallbackFFISlice
    {
        private CallbackFFISliceDelegate _managed; // C# callback
        private CallbackFFISliceNative _native; // Native callback 
        private IntPtr _ptr; // Raw function pointer of native callback
        private Exception _exception; // Set if the callback encountered an Exception
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class CallbackFFISlice : IDisposable
    {

        public CallbackFFISlice() { }

        public CallbackFFISlice(CallbackFFISliceDelegate managed)
        {
            _managed = managed;
            _native = Call;
            _ptr = Marshal.GetFunctionPointerForDelegate(_native);
        }

        public byte Call(SliceU8.Unmanaged slice, IntPtr callback_data)
        {
            // We ignore the last parameter, a generic callback pointer, as it's not needed in C#.
            try
            {
                return _managed(slice.Managed());
            }
            catch (Exception e)
            {
                _exception = e;
                return default;
            }
        }

        public void Dispose()
        {
            // This means when the callback was invoked from Rust C# had an exception which
            // we caught (otherwise C# might not re-enter Rust, and we leak memory). Now is
            // the time to rethrow it.
            if (_exception != null) throw _exception;
        }

        [CustomMarshaller(typeof(CallbackFFISlice), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta {  }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            internal IntPtr Callback;
            internal IntPtr Data;
        }

        public ref struct Marshaller
        {
            private CallbackFFISlice _managed;
            private Unmanaged _unmanaged;

            public Marshaller(CallbackFFISlice managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(CallbackFFISlice managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public Unmanaged ToUnmanaged()
            {
                _unmanaged = new Unmanaged();
                _unmanaged.Callback = _managed?._ptr ?? IntPtr.Zero;
                _unmanaged.Data = IntPtr.Zero;
                return _unmanaged;
            }

            public CallbackFFISlice ToManaged()
            {
                _managed = new CallbackFFISlice();
                _managed._ptr = _unmanaged.Callback;
                return _managed;
            }

            public void Free() { }
        }
    }


    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate Vec3f32 CallbackHugeVecSliceNative(SliceVec3f32.Unmanaged slice, IntPtr callback_data); // 'True' native callback signature
    public delegate Vec3f32 CallbackHugeVecSliceDelegate(SliceVec3f32 slice); // Our C# signature

    public partial class CallbackHugeVecSlice
    {
        private CallbackHugeVecSliceDelegate _managed; // C# callback
        private CallbackHugeVecSliceNative _native; // Native callback 
        private IntPtr _ptr; // Raw function pointer of native callback
        private Exception _exception; // Set if the callback encountered an Exception
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class CallbackHugeVecSlice : IDisposable
    {

        public CallbackHugeVecSlice() { }

        public CallbackHugeVecSlice(CallbackHugeVecSliceDelegate managed)
        {
            _managed = managed;
            _native = Call;
            _ptr = Marshal.GetFunctionPointerForDelegate(_native);
        }

        public Vec3f32 Call(SliceVec3f32.Unmanaged slice, IntPtr callback_data)
        {
            // We ignore the last parameter, a generic callback pointer, as it's not needed in C#.
            try
            {
                return _managed(slice.Managed());
            }
            catch (Exception e)
            {
                _exception = e;
                return default;
            }
        }

        public void Dispose()
        {
            // This means when the callback was invoked from Rust C# had an exception which
            // we caught (otherwise C# might not re-enter Rust, and we leak memory). Now is
            // the time to rethrow it.
            if (_exception != null) throw _exception;
        }

        [CustomMarshaller(typeof(CallbackHugeVecSlice), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta {  }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            internal IntPtr Callback;
            internal IntPtr Data;
        }

        public ref struct Marshaller
        {
            private CallbackHugeVecSlice _managed;
            private Unmanaged _unmanaged;

            public Marshaller(CallbackHugeVecSlice managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(CallbackHugeVecSlice managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public Unmanaged ToUnmanaged()
            {
                _unmanaged = new Unmanaged();
                _unmanaged.Callback = _managed?._ptr ?? IntPtr.Zero;
                _unmanaged.Data = IntPtr.Zero;
                return _unmanaged;
            }

            public CallbackHugeVecSlice ToManaged()
            {
                _managed = new CallbackHugeVecSlice();
                _managed._ptr = _unmanaged.Callback;
                return _managed;
            }

            public void Free() { }
        }
    }


    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void CallbackSliceMutNative(SliceMutU8.Unmanaged slice, IntPtr callback_data); // 'True' native callback signature
    public delegate void CallbackSliceMutDelegate(SliceMutU8 slice); // Our C# signature

    public partial class CallbackSliceMut
    {
        private CallbackSliceMutDelegate _managed; // C# callback
        private CallbackSliceMutNative _native; // Native callback 
        private IntPtr _ptr; // Raw function pointer of native callback
        private Exception _exception; // Set if the callback encountered an Exception
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class CallbackSliceMut : IDisposable
    {

        public CallbackSliceMut() { }

        public CallbackSliceMut(CallbackSliceMutDelegate managed)
        {
            _managed = managed;
            _native = Call;
            _ptr = Marshal.GetFunctionPointerForDelegate(_native);
        }

        public void Call(SliceMutU8.Unmanaged slice, IntPtr callback_data)
        {
            // We ignore the last parameter, a generic callback pointer, as it's not needed in C#.
            try
            {
                _managed(slice.Managed());
            }
            catch (Exception e)
            {
                _exception = e;
                return;
            }
        }

        public void Dispose()
        {
            // This means when the callback was invoked from Rust C# had an exception which
            // we caught (otherwise C# might not re-enter Rust, and we leak memory). Now is
            // the time to rethrow it.
            if (_exception != null) throw _exception;
        }

        [CustomMarshaller(typeof(CallbackSliceMut), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta {  }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            internal IntPtr Callback;
            internal IntPtr Data;
        }

        public ref struct Marshaller
        {
            private CallbackSliceMut _managed;
            private Unmanaged _unmanaged;

            public Marshaller(CallbackSliceMut managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(CallbackSliceMut managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public Unmanaged ToUnmanaged()
            {
                _unmanaged = new Unmanaged();
                _unmanaged.Callback = _managed?._ptr ?? IntPtr.Zero;
                _unmanaged.Data = IntPtr.Zero;
                return _unmanaged;
            }

            public CallbackSliceMut ToManaged()
            {
                _managed = new CallbackSliceMut();
                _managed._ptr = _unmanaged.Callback;
                return _managed;
            }

            public void Free() { }
        }
    }


    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate byte CallbackU8Native(byte value, IntPtr callback_data); // 'True' native callback signature
    public delegate byte CallbackU8Delegate(byte value); // Our C# signature

    public partial class CallbackU8
    {
        private CallbackU8Delegate _managed; // C# callback
        private CallbackU8Native _native; // Native callback 
        private IntPtr _ptr; // Raw function pointer of native callback
        private Exception _exception; // Set if the callback encountered an Exception
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class CallbackU8 : IDisposable
    {

        public CallbackU8() { }

        public CallbackU8(CallbackU8Delegate managed)
        {
            _managed = managed;
            _native = Call;
            _ptr = Marshal.GetFunctionPointerForDelegate(_native);
        }

        public byte Call(byte value, IntPtr callback_data)
        {
            // We ignore the last parameter, a generic callback pointer, as it's not needed in C#.
            try
            {
                return _managed(value);
            }
            catch (Exception e)
            {
                _exception = e;
                return default;
            }
        }

        public void Dispose()
        {
            // This means when the callback was invoked from Rust C# had an exception which
            // we caught (otherwise C# might not re-enter Rust, and we leak memory). Now is
            // the time to rethrow it.
            if (_exception != null) throw _exception;
        }

        [CustomMarshaller(typeof(CallbackU8), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta {  }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            internal IntPtr Callback;
            internal IntPtr Data;
        }

        public ref struct Marshaller
        {
            private CallbackU8 _managed;
            private Unmanaged _unmanaged;

            public Marshaller(CallbackU8 managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(CallbackU8 managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public Unmanaged ToUnmanaged()
            {
                _unmanaged = new Unmanaged();
                _unmanaged.Callback = _managed?._ptr ?? IntPtr.Zero;
                _unmanaged.Data = IntPtr.Zero;
                return _unmanaged;
            }

            public CallbackU8 ToManaged()
            {
                _managed = new CallbackU8();
                _managed._ptr = _unmanaged.Callback;
                return _managed;
            }

            public void Free() { }
        }
    }


    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate uint MyCallbackNative(uint value, IntPtr callback_data); // 'True' native callback signature
    public delegate uint MyCallbackDelegate(uint value); // Our C# signature

    public partial class MyCallback
    {
        private MyCallbackDelegate _managed; // C# callback
        private MyCallbackNative _native; // Native callback 
        private IntPtr _ptr; // Raw function pointer of native callback
        private Exception _exception; // Set if the callback encountered an Exception
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class MyCallback : IDisposable
    {

        public MyCallback() { }

        public MyCallback(MyCallbackDelegate managed)
        {
            _managed = managed;
            _native = Call;
            _ptr = Marshal.GetFunctionPointerForDelegate(_native);
        }

        public uint Call(uint value, IntPtr callback_data)
        {
            // We ignore the last parameter, a generic callback pointer, as it's not needed in C#.
            try
            {
                return _managed(value);
            }
            catch (Exception e)
            {
                _exception = e;
                return default;
            }
        }

        public void Dispose()
        {
            // This means when the callback was invoked from Rust C# had an exception which
            // we caught (otherwise C# might not re-enter Rust, and we leak memory). Now is
            // the time to rethrow it.
            if (_exception != null) throw _exception;
        }

        [CustomMarshaller(typeof(MyCallback), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta {  }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            internal IntPtr Callback;
            internal IntPtr Data;
        }

        public ref struct Marshaller
        {
            private MyCallback _managed;
            private Unmanaged _unmanaged;

            public Marshaller(MyCallback managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(MyCallback managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public Unmanaged ToUnmanaged()
            {
                _unmanaged = new Unmanaged();
                _unmanaged.Callback = _managed?._ptr ?? IntPtr.Zero;
                _unmanaged.Data = IntPtr.Zero;
                return _unmanaged;
            }

            public MyCallback ToManaged()
            {
                _managed = new MyCallback();
                _managed._ptr = _unmanaged.Callback;
                return _managed;
            }

            public void Free() { }
        }
    }


    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void MyCallbackContextualNative(IntPtr context, uint value, IntPtr callback_data); // 'True' native callback signature
    public delegate void MyCallbackContextualDelegate(IntPtr context, uint value); // Our C# signature

    public partial class MyCallbackContextual
    {
        private MyCallbackContextualDelegate _managed; // C# callback
        private MyCallbackContextualNative _native; // Native callback 
        private IntPtr _ptr; // Raw function pointer of native callback
        private Exception _exception; // Set if the callback encountered an Exception
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class MyCallbackContextual : IDisposable
    {

        public MyCallbackContextual() { }

        public MyCallbackContextual(MyCallbackContextualDelegate managed)
        {
            _managed = managed;
            _native = Call;
            _ptr = Marshal.GetFunctionPointerForDelegate(_native);
        }

        public void Call(IntPtr context, uint value, IntPtr callback_data)
        {
            // We ignore the last parameter, a generic callback pointer, as it's not needed in C#.
            try
            {
                _managed(context, value);
            }
            catch (Exception e)
            {
                _exception = e;
                return;
            }
        }

        public void Dispose()
        {
            // This means when the callback was invoked from Rust C# had an exception which
            // we caught (otherwise C# might not re-enter Rust, and we leak memory). Now is
            // the time to rethrow it.
            if (_exception != null) throw _exception;
        }

        [CustomMarshaller(typeof(MyCallbackContextual), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta {  }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            internal IntPtr Callback;
            internal IntPtr Data;
        }

        public ref struct Marshaller
        {
            private MyCallbackContextual _managed;
            private Unmanaged _unmanaged;

            public Marshaller(MyCallbackContextual managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(MyCallbackContextual managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public Unmanaged ToUnmanaged()
            {
                _unmanaged = new Unmanaged();
                _unmanaged.Callback = _managed?._ptr ?? IntPtr.Zero;
                _unmanaged.Data = IntPtr.Zero;
                return _unmanaged;
            }

            public MyCallbackContextual ToManaged()
            {
                _managed = new MyCallbackContextual();
                _managed._ptr = _unmanaged.Callback;
                return _managed;
            }

            public void Free() { }
        }
    }


    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void MyCallbackVoidNative(IntPtr ptr, IntPtr callback_data); // 'True' native callback signature
    public delegate void MyCallbackVoidDelegate(IntPtr ptr); // Our C# signature

    public partial class MyCallbackVoid
    {
        private MyCallbackVoidDelegate _managed; // C# callback
        private MyCallbackVoidNative _native; // Native callback 
        private IntPtr _ptr; // Raw function pointer of native callback
        private Exception _exception; // Set if the callback encountered an Exception
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class MyCallbackVoid : IDisposable
    {

        public MyCallbackVoid() { }

        public MyCallbackVoid(MyCallbackVoidDelegate managed)
        {
            _managed = managed;
            _native = Call;
            _ptr = Marshal.GetFunctionPointerForDelegate(_native);
        }

        public void Call(IntPtr ptr, IntPtr callback_data)
        {
            // We ignore the last parameter, a generic callback pointer, as it's not needed in C#.
            try
            {
                _managed(ptr);
            }
            catch (Exception e)
            {
                _exception = e;
                return;
            }
        }

        public void Dispose()
        {
            // This means when the callback was invoked from Rust C# had an exception which
            // we caught (otherwise C# might not re-enter Rust, and we leak memory). Now is
            // the time to rethrow it.
            if (_exception != null) throw _exception;
        }

        [CustomMarshaller(typeof(MyCallbackVoid), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta {  }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            internal IntPtr Callback;
            internal IntPtr Data;
        }

        public ref struct Marshaller
        {
            private MyCallbackVoid _managed;
            private Unmanaged _unmanaged;

            public Marshaller(MyCallbackVoid managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(MyCallbackVoid managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public Unmanaged ToUnmanaged()
            {
                _unmanaged = new Unmanaged();
                _unmanaged.Callback = _managed?._ptr ?? IntPtr.Zero;
                _unmanaged.Data = IntPtr.Zero;
                return _unmanaged;
            }

            public MyCallbackVoid ToManaged()
            {
                _managed = new MyCallbackVoid();
                _managed._ptr = _unmanaged.Callback;
                return _managed;
            }

            public void Free() { }
        }
    }


    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void SumDelegate1Native(IntPtr callback_data); // 'True' native callback signature
    public delegate void SumDelegate1Delegate(); // Our C# signature

    public partial class SumDelegate1
    {
        private SumDelegate1Delegate _managed; // C# callback
        private SumDelegate1Native _native; // Native callback 
        private IntPtr _ptr; // Raw function pointer of native callback
        private Exception _exception; // Set if the callback encountered an Exception
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class SumDelegate1 : IDisposable
    {

        public SumDelegate1() { }

        public SumDelegate1(SumDelegate1Delegate managed)
        {
            _managed = managed;
            _native = Call;
            _ptr = Marshal.GetFunctionPointerForDelegate(_native);
        }

        public void Call(IntPtr callback_data)
        {
            // We ignore the last parameter, a generic callback pointer, as it's not needed in C#.
            try
            {
                _managed();
            }
            catch (Exception e)
            {
                _exception = e;
                return;
            }
        }

        public void Dispose()
        {
            // This means when the callback was invoked from Rust C# had an exception which
            // we caught (otherwise C# might not re-enter Rust, and we leak memory). Now is
            // the time to rethrow it.
            if (_exception != null) throw _exception;
        }

        [CustomMarshaller(typeof(SumDelegate1), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta {  }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            internal IntPtr Callback;
            internal IntPtr Data;
        }

        public ref struct Marshaller
        {
            private SumDelegate1 _managed;
            private Unmanaged _unmanaged;

            public Marshaller(SumDelegate1 managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(SumDelegate1 managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public Unmanaged ToUnmanaged()
            {
                _unmanaged = new Unmanaged();
                _unmanaged.Callback = _managed?._ptr ?? IntPtr.Zero;
                _unmanaged.Data = IntPtr.Zero;
                return _unmanaged;
            }

            public SumDelegate1 ToManaged()
            {
                _managed = new SumDelegate1();
                _managed._ptr = _unmanaged.Callback;
                return _managed;
            }

            public void Free() { }
        }
    }


    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate int SumDelegate2Native(int x, int y, IntPtr callback_data); // 'True' native callback signature
    public delegate int SumDelegate2Delegate(int x, int y); // Our C# signature

    public partial class SumDelegate2
    {
        private SumDelegate2Delegate _managed; // C# callback
        private SumDelegate2Native _native; // Native callback 
        private IntPtr _ptr; // Raw function pointer of native callback
        private Exception _exception; // Set if the callback encountered an Exception
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class SumDelegate2 : IDisposable
    {

        public SumDelegate2() { }

        public SumDelegate2(SumDelegate2Delegate managed)
        {
            _managed = managed;
            _native = Call;
            _ptr = Marshal.GetFunctionPointerForDelegate(_native);
        }

        public int Call(int x, int y, IntPtr callback_data)
        {
            // We ignore the last parameter, a generic callback pointer, as it's not needed in C#.
            try
            {
                return _managed(x, y);
            }
            catch (Exception e)
            {
                _exception = e;
                return default;
            }
        }

        public void Dispose()
        {
            // This means when the callback was invoked from Rust C# had an exception which
            // we caught (otherwise C# might not re-enter Rust, and we leak memory). Now is
            // the time to rethrow it.
            if (_exception != null) throw _exception;
        }

        [CustomMarshaller(typeof(SumDelegate2), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta {  }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            internal IntPtr Callback;
            internal IntPtr Data;
        }

        public ref struct Marshaller
        {
            private SumDelegate2 _managed;
            private Unmanaged _unmanaged;

            public Marshaller(SumDelegate2 managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(SumDelegate2 managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public Unmanaged ToUnmanaged()
            {
                _unmanaged = new Unmanaged();
                _unmanaged.Callback = _managed?._ptr ?? IntPtr.Zero;
                _unmanaged.Data = IntPtr.Zero;
                return _unmanaged;
            }

            public SumDelegate2 ToManaged()
            {
                _managed = new SumDelegate2();
                _managed._ptr = _unmanaged.Callback;
                return _managed;
            }

            public void Free() { }
        }
    }


    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate FFIError SumDelegateReturnNative(int x, int y, IntPtr callback_data); // 'True' native callback signature
    public delegate FFIError SumDelegateReturnDelegate(int x, int y); // Our C# signature

    public partial class SumDelegateReturn
    {
        private SumDelegateReturnDelegate _managed; // C# callback
        private SumDelegateReturnNative _native; // Native callback 
        private IntPtr _ptr; // Raw function pointer of native callback
        private Exception _exception; // Set if the callback encountered an Exception
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class SumDelegateReturn : IDisposable
    {

        public SumDelegateReturn() { }

        public SumDelegateReturn(SumDelegateReturnDelegate managed)
        {
            _managed = managed;
            _native = Call;
            _ptr = Marshal.GetFunctionPointerForDelegate(_native);
        }

        public FFIError Call(int x, int y, IntPtr callback_data)
        {
            // We ignore the last parameter, a generic callback pointer, as it's not needed in C#.
            try
            {
                return _managed(x, y);
            }
            catch (Exception e)
            {
                _exception = e;
                return FFIError.Panic;
            }
        }

        public void Dispose()
        {
            // This means when the callback was invoked from Rust C# had an exception which
            // we caught (otherwise C# might not re-enter Rust, and we leak memory). Now is
            // the time to rethrow it.
            if (_exception != null) throw _exception;
        }

        [CustomMarshaller(typeof(SumDelegateReturn), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta {  }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            internal IntPtr Callback;
            internal IntPtr Data;
        }

        public ref struct Marshaller
        {
            private SumDelegateReturn _managed;
            private Unmanaged _unmanaged;

            public Marshaller(SumDelegateReturn managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(SumDelegateReturn managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public Unmanaged ToUnmanaged()
            {
                _unmanaged = new Unmanaged();
                _unmanaged.Callback = _managed?._ptr ?? IntPtr.Zero;
                _unmanaged.Data = IntPtr.Zero;
                return _unmanaged;
            }

            public SumDelegateReturn ToManaged()
            {
                _managed = new SumDelegateReturn();
                _managed._ptr = _unmanaged.Callback;
                return _managed;
            }

            public void Free() { }
        }
    }


    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void SumDelegateReturn2Native(int x, int y, IntPtr callback_data); // 'True' native callback signature
    public delegate void SumDelegateReturn2Delegate(int x, int y); // Our C# signature

    public partial class SumDelegateReturn2
    {
        private SumDelegateReturn2Delegate _managed; // C# callback
        private SumDelegateReturn2Native _native; // Native callback 
        private IntPtr _ptr; // Raw function pointer of native callback
        private Exception _exception; // Set if the callback encountered an Exception
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial class SumDelegateReturn2 : IDisposable
    {

        public SumDelegateReturn2() { }

        public SumDelegateReturn2(SumDelegateReturn2Delegate managed)
        {
            _managed = managed;
            _native = Call;
            _ptr = Marshal.GetFunctionPointerForDelegate(_native);
        }

        public void Call(int x, int y, IntPtr callback_data)
        {
            // We ignore the last parameter, a generic callback pointer, as it's not needed in C#.
            try
            {
                _managed(x, y);
            }
            catch (Exception e)
            {
                _exception = e;
                return;
            }
        }

        public void Dispose()
        {
            // This means when the callback was invoked from Rust C# had an exception which
            // we caught (otherwise C# might not re-enter Rust, and we leak memory). Now is
            // the time to rethrow it.
            if (_exception != null) throw _exception;
        }

        [CustomMarshaller(typeof(SumDelegateReturn2), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta {  }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            internal IntPtr Callback;
            internal IntPtr Data;
        }

        public ref struct Marshaller
        {
            private SumDelegateReturn2 _managed;
            private Unmanaged _unmanaged;

            public Marshaller(SumDelegateReturn2 managed) { _managed = managed; }
            public Marshaller(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public void FromManaged(SumDelegateReturn2 managed) { _managed = managed; }
            public void FromUnmanaged(Unmanaged unmanaged) { _unmanaged = unmanaged; }

            public Unmanaged ToUnmanaged()
            {
                _unmanaged = new Unmanaged();
                _unmanaged.Callback = _managed?._ptr ?? IntPtr.Zero;
                _unmanaged.Data = IntPtr.Zero;
                return _unmanaged;
            }

            public SumDelegateReturn2 ToManaged()
            {
                _managed = new SumDelegateReturn2();
                _managed._ptr = _unmanaged.Callback;
                return _managed;
            }

            public void Free() { }
        }
    }



    public partial class ServiceAsync : IDisposable
    {
        private IntPtr _context;

        private ServiceAsync() {}

        public static ServiceAsync New()
        {
            var self = new ServiceAsync();
            var rval = Interop.service_async_new(ref self._context);
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
            return self;
        }

        public void Dispose()
        {
            var rval = Interop.service_async_destroy(ref _context);
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
        }

        public Task<ResultU64> ReturnAfterMs(ulong x, ulong ms)
        {
            return Interop.service_async_return_after_ms(_context, x, ms);
        }

        public Task<ResultNestedArray> ProcessStruct(NestedArray x)
        {
            return Interop.service_async_process_struct(_context, x);
        }

        public Task<ResultUtf8String> HandleString(string s)
        {
            return Interop.service_async_handle_string(_context, s);
        }

        public void Bad()
        {
            Interop.service_async_bad(_context);
        }

        public IntPtr Context => _context;
    }


    public partial class ServiceBasic : IDisposable
    {
        private IntPtr _context;

        private ServiceBasic() {}

        public static ServiceBasic New()
        {
            var self = new ServiceBasic();
            var rval = Interop.service_basic_new(ref self._context);
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
            return self;
        }

        public void Dispose()
        {
            var rval = Interop.service_basic_destroy(ref _context);
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
        }

        public IntPtr Context => _context;
    }


    /// Some struct we want to expose as a class.
    public partial class ServiceOnPanic : IDisposable
    {
        private IntPtr _context;

        private ServiceOnPanic() {}

        public static ServiceOnPanic New()
        {
            var self = new ServiceOnPanic();
            var rval = Interop.service_on_panic_new(ref self._context);
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
            return self;
        }

        public void Dispose()
        {
            var rval = Interop.service_on_panic_destroy(ref _context);
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
        }

        /// Methods returning a Result<(), _> are the default and do not
        /// need annotations.
        public void ReturnResult(uint anon1)
        {
            var rval = Interop.service_on_panic_return_result(_context, anon1);
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
        }

        /// Methods returning a value need an `on_panic` annotation.
        public uint ReturnDefaultValue(uint x)
        {
            return Interop.service_on_panic_return_default_value(_context, x);
        }

        /// This function has no panic safeguards. It will be a bit faster to
        /// call, but if it panics your host app will abort.
        public string ReturnUbOnPanic()
        {
            var s = Interop.service_on_panic_return_ub_on_panic(_context);
            return Marshal.PtrToStringAnsi(s);
        }

        public IntPtr Context => _context;
    }


    /// Some struct we want to expose as a class.
    public partial class ServiceCallbacks : IDisposable
    {
        private IntPtr _context;

        private ServiceCallbacks() {}

        public static ServiceCallbacks New()
        {
            var self = new ServiceCallbacks();
            var rval = Interop.service_callbacks_new(ref self._context);
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
            return self;
        }

        public void Dispose()
        {
            var rval = Interop.service_callbacks_destroy(ref _context);
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
        }

        public void CallbackSimple(MyCallback callback)
        {
            var rval = Interop.service_callbacks_callback_simple(_context, callback);
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
        }

        public void CallbackSimple(MyCallbackDelegate callback)
        {
            Interop.service_callbacks_callback_simple(_context, callback);
        }

        public void CallbackFfiReturn(SumDelegateReturn callback)
        {
            var rval = Interop.service_callbacks_callback_ffi_return(_context, callback);
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
        }

        public void CallbackFfiReturn(SumDelegateReturnDelegate callback)
        {
            Interop.service_callbacks_callback_ffi_return(_context, callback);
        }

        public void CallbackWithSlice(SumDelegateReturn callback, SliceI32 input)
        {
            var rval = Interop.service_callbacks_callback_with_slice(_context, callback, input);
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
        }

        public void CallbackWithSlice(SumDelegateReturnDelegate callback, ReadOnlySpan<int> input)
        {
            Interop.service_callbacks_callback_with_slice(_context, callback, input);
        }

        public void SetDelegateTable(DelegateTable table)
        {
            Interop.service_callbacks_set_delegate_table(_context, table);
        }

        public void InvokeDelegates()
        {
            var rval = Interop.service_callbacks_invoke_delegates(_context);
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
        }

        public IntPtr Context => _context;
    }


    public partial class ServiceIgnoringMethods : IDisposable
    {
        private IntPtr _context;

        private ServiceIgnoringMethods() {}

        public static ServiceIgnoringMethods New()
        {
            var self = new ServiceIgnoringMethods();
            var rval = Interop.service_ignoring_methods_new(ref self._context);
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
            return self;
        }

        public void Dispose()
        {
            var rval = Interop.service_ignoring_methods_destroy(ref _context);
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
        }

        public IntPtr Context => _context;
    }


    /// Some struct we want to expose as a class.
    public partial class ServiceMultipleCtors : IDisposable
    {
        private IntPtr _context;

        private ServiceMultipleCtors() {}

        public static ServiceMultipleCtors NewWith(uint some_value)
        {
            var self = new ServiceMultipleCtors();
            var rval = Interop.service_multiple_ctors_new_with(ref self._context, some_value);
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
            return self;
        }

        public static ServiceMultipleCtors NewWithout()
        {
            var self = new ServiceMultipleCtors();
            var rval = Interop.service_multiple_ctors_new_without(ref self._context);
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
            return self;
        }

        public static ServiceMultipleCtors NewWithString([MarshalAs(UnmanagedType.LPStr)] string anon0)
        {
            var self = new ServiceMultipleCtors();
            var rval = Interop.service_multiple_ctors_new_with_string(ref self._context, anon0);
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
            return self;
        }

        public static ServiceMultipleCtors NewFailing(byte some_value)
        {
            var self = new ServiceMultipleCtors();
            var rval = Interop.service_multiple_ctors_new_failing(ref self._context, some_value);
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
            return self;
        }

        public void Dispose()
        {
            var rval = Interop.service_multiple_ctors_destroy(ref _context);
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
        }

        public IntPtr Context => _context;
    }


    /// Services can use lifetimes. However, they are more dangerous to use
    /// via FFI, since you will not get any help tracking lifetimes there.
    public partial class ServiceUsingLifetimes : IDisposable
    {
        private IntPtr _context;

        private ServiceUsingLifetimes() {}

        public static ServiceUsingLifetimes NewWith(ref uint some_value)
        {
            var self = new ServiceUsingLifetimes();
            var rval = Interop.service_using_lifetimes_new_with(ref self._context, ref some_value);
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
            return self;
        }

        public void Dispose()
        {
            var rval = Interop.service_using_lifetimes_destroy(ref _context);
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
        }

        public void Lifetime1(SliceBool slice)
        {
            Interop.service_using_lifetimes_lifetime_1(_context, slice);
        }

        public void Lifetime1(ReadOnlySpan<Bool> slice)
        {
            Interop.service_using_lifetimes_lifetime_1(_context, slice);
        }

        public void Lifetime2(SliceBool slice)
        {
            Interop.service_using_lifetimes_lifetime_2(_context, slice);
        }

        public void Lifetime2(ReadOnlySpan<Bool> slice)
        {
            Interop.service_using_lifetimes_lifetime_2(_context, slice);
        }

        public string ReturnStringAcceptSlice(SliceU8 anon1)
        {
            var s = Interop.service_using_lifetimes_return_string_accept_slice(_context, anon1);
            return Marshal.PtrToStringAnsi(s);
        }

        public string ReturnStringAcceptSlice(ReadOnlySpan<byte> anon1)
        {
            return Interop.service_using_lifetimes_return_string_accept_slice(_context, anon1);
        }

        public IntPtr Context => _context;
    }


    /// Some struct we want to expose as a class.
    public partial class ServiceVariousSlices : IDisposable
    {
        private IntPtr _context;

        private ServiceVariousSlices() {}

        public static ServiceVariousSlices New()
        {
            var self = new ServiceVariousSlices();
            var rval = Interop.service_various_slices_new(ref self._context);
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
            return self;
        }

        public void Dispose()
        {
            var rval = Interop.service_various_slices_destroy(ref _context);
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
        }

        public byte MutSelf(SliceU8 slice)
        {
            return Interop.service_various_slices_mut_self(_context, slice);
        }

        public byte MutSelf(ReadOnlySpan<byte> slice)
        {
            return Interop.service_various_slices_mut_self(_context, slice);
        }

        /// Single line.
        public void MutSelfVoid(SliceBool slice)
        {
            Interop.service_various_slices_mut_self_void(_context, slice);
        }

        /// Single line.
        public void MutSelfVoid(ReadOnlySpan<Bool> slice)
        {
            Interop.service_various_slices_mut_self_void(_context, slice);
        }

        public byte MutSelfRef(ref byte x, out byte y)
        {
            return Interop.service_various_slices_mut_self_ref(_context, ref x, out y);
        }

        public byte MutSelfRefSlice(ref byte x, out byte y, SliceU8 slice)
        {
            return Interop.service_various_slices_mut_self_ref_slice(_context, ref x, out y, slice);
        }

        public byte MutSelfRefSlice(ref byte x, out byte y, ReadOnlySpan<byte> slice)
        {
            return Interop.service_various_slices_mut_self_ref_slice(_context, ref x, out y, slice);
        }

        public byte MutSelfRefSliceLimited(ref byte x, out byte y, SliceU8 slice, SliceU8 slice2)
        {
            return Interop.service_various_slices_mut_self_ref_slice_limited(_context, ref x, out y, slice, slice2);
        }

        public byte MutSelfRefSliceLimited(ref byte x, out byte y, ReadOnlySpan<byte> slice, ReadOnlySpan<byte> slice2)
        {
            return Interop.service_various_slices_mut_self_ref_slice_limited(_context, ref x, out y, slice, slice2);
        }

        public void MutSelfFfiError(SliceMutU8 slice)
        {
            var rval = Interop.service_various_slices_mut_self_ffi_error(_context, slice);
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
        }

        public void MutSelfFfiError(Span<byte> slice)
        {
            Interop.service_various_slices_mut_self_ffi_error(_context, slice);
        }

        public void MutSelfNoError(SliceMutU8 slice)
        {
            var rval = Interop.service_various_slices_mut_self_no_error(_context, slice);
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
        }

        public void MutSelfNoError(Span<byte> slice)
        {
            Interop.service_various_slices_mut_self_no_error(_context, slice);
        }

        /// Warning, you _must_ discard the returned slice object before calling into this service
        /// again, as otherwise undefined behavior might happen.
        public SliceU32 ReturnSlice()
        {
            return Interop.service_various_slices_return_slice(_context);
        }

        /// Warning, you _must_ discard the returned slice object before calling into this service
        /// again, as otherwise undefined behavior might happen.
        public SliceMutU32 ReturnSliceMut()
        {
            return Interop.service_various_slices_return_slice_mut(_context);
        }

        public IntPtr Context => _context;
    }


    /// Some struct we want to expose as a class.
    public partial class ServiceStrings : IDisposable
    {
        private IntPtr _context;

        private ServiceStrings() {}

        public static ServiceStrings New()
        {
            var self = new ServiceStrings();
            var rval = Interop.service_strings_new(ref self._context);
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
            return self;
        }

        public void Dispose()
        {
            var rval = Interop.service_strings_destroy(ref _context);
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
        }

        public void PassString([MarshalAs(UnmanagedType.LPStr)] string anon1)
        {
            Interop.service_strings_pass_string(_context, anon1);
        }

        public string ReturnString()
        {
            var s = Interop.service_strings_return_string(_context);
            return Marshal.PtrToStringAnsi(s);
        }

        public IntPtr Context => _context;
    }



}
