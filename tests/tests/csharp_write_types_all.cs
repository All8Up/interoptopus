// Automatically generated by Interoptopus.

#pragma warning disable 0105
using System;
using System.Text;
using System.Threading.Tasks;
using System.Reflection;
using System.Linq.Expressions;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Runtime.InteropServices.Marshalling;
using System.Runtime.CompilerServices;
using My.Company;
using My.Company.Common;
#pragma warning restore 0105

namespace My.Company
{
    public static partial class Interop
    {
        public const string NativeLib = "library";

        static Interop()
        {
            var api_version = Interop.pattern_api_guard();
            if (api_version != 6372935688695721067ul)
            {
                throw new TypeLoadException($"API reports hash {api_version} which differs from hash in bindings (6372935688695721067). You probably forgot to update / copy either the bindings or the library.");
            }
        }

        public const byte U8 = (byte) 255;

        public const float F32_MIN_POSITIVE = (float) 0.000000000000000000000000000000000000011754944;

        public const int COMPUTED_I32 = (int) -2147483647;


        [LibraryImport(NativeLib, EntryPoint = "primitive_void")]
        public static partial void primitive_void();

        [LibraryImport(NativeLib, EntryPoint = "primitive_void2")]
        public static partial void primitive_void2();

        [LibraryImport(NativeLib, EntryPoint = "primitive_bool")]
        [return: MarshalAs(UnmanagedType.U1)]
        public static partial bool primitive_bool([MarshalAs(UnmanagedType.U1)] bool x);

        [LibraryImport(NativeLib, EntryPoint = "primitive_u8")]
        public static partial byte primitive_u8(byte x);

        [LibraryImport(NativeLib, EntryPoint = "primitive_u16")]
        public static partial ushort primitive_u16(ushort x);

        [LibraryImport(NativeLib, EntryPoint = "primitive_u32")]
        public static partial uint primitive_u32(uint x);

        [LibraryImport(NativeLib, EntryPoint = "primitive_u64")]
        public static partial ulong primitive_u64(ulong x);

        [LibraryImport(NativeLib, EntryPoint = "primitive_i8")]
        public static partial sbyte primitive_i8(sbyte x);

        [LibraryImport(NativeLib, EntryPoint = "primitive_i16")]
        public static partial short primitive_i16(short x);

        [LibraryImport(NativeLib, EntryPoint = "primitive_i32")]
        public static partial int primitive_i32(int x);

        [LibraryImport(NativeLib, EntryPoint = "primitive_i64")]
        public static partial long primitive_i64(long x);

        [LibraryImport(NativeLib, EntryPoint = "packed_to_packed1")]
        public static partial Packed2 packed_to_packed1(Packed1 a);

        [LibraryImport(NativeLib, EntryPoint = "many_args_5")]
        public static partial long many_args_5(long x0, long x1, long x2, long x3, long x4);

        [LibraryImport(NativeLib, EntryPoint = "many_args_10")]
        public static partial long many_args_10(long x0, long x1, long x2, long x3, long x4, long x5, long x6, long x7, long x8, long x9);

        [LibraryImport(NativeLib, EntryPoint = "ptr")]
        public static partial IntPtr ptr(ref long x);

        /// # Safety
        ///
        /// Parameter x must point to valid data.
        [LibraryImport(NativeLib, EntryPoint = "ptr_mut")]
        public static partial IntPtr ptr_mut(out long x);

        [LibraryImport(NativeLib, EntryPoint = "ptr_ptr")]
        public static partial IntPtr ptr_ptr(ref IntPtr x);

        [LibraryImport(NativeLib, EntryPoint = "ref_simple")]
        public static partial IntPtr ref_simple(ref long x);

        [LibraryImport(NativeLib, EntryPoint = "ref_mut_simple")]
        public static partial IntPtr ref_mut_simple(out long x);

        [LibraryImport(NativeLib, EntryPoint = "ref_option")]
        [return: MarshalAs(UnmanagedType.U1)]
        public static partial bool ref_option(ref long x);

        [LibraryImport(NativeLib, EntryPoint = "ref_mut_option")]
        [return: MarshalAs(UnmanagedType.U1)]
        public static partial bool ref_mut_option(out long x);

        [LibraryImport(NativeLib, EntryPoint = "call_tupled")]
        public static partial Tupled call_tupled(Tupled x);

        [LibraryImport(NativeLib, EntryPoint = "complex_args_1")]
        public static partial FFIError complex_args_1(Vec3f32 a, ref Tupled b);

        [LibraryImport(NativeLib, EntryPoint = "callback")]
        public static partial byte callback(InteropDelegate_fn_u8_rval_u8 callback, byte value);

        [LibraryImport(NativeLib, EntryPoint = "callback_marshalled")]
        public static partial void callback_marshalled(InteropDelegate_fn_CharArray_native callback, CharArray value);

        [LibraryImport(NativeLib, EntryPoint = "generic_1a")]
        public static partial uint generic_1a(Genericu32 x, Phantomu8 y);

        [LibraryImport(NativeLib, EntryPoint = "generic_1b")]
        public static partial byte generic_1b(Genericu8 x, Phantomu8 y);

        [LibraryImport(NativeLib, EntryPoint = "generic_1c")]
        public static partial byte generic_1c(ref Genericu8 x, ref Genericu8 y);

        [LibraryImport(NativeLib, EntryPoint = "generic_2")]
        public static partial byte generic_2(IntPtr x);

        [LibraryImport(NativeLib, EntryPoint = "generic_3")]
        public static partial byte generic_3(IntPtr x);

        [LibraryImport(NativeLib, EntryPoint = "generic_4")]
        public static partial byte generic_4(IntPtr x);

        [LibraryImport(NativeLib, EntryPoint = "array_1")]
        public static partial byte array_1(Array x);

        [LibraryImport(NativeLib, EntryPoint = "array_2")]
        public static partial Array array_2();

        [LibraryImport(NativeLib, EntryPoint = "array_3")]
        public static partial void array_3(out Array arr);

        [LibraryImport(NativeLib, EntryPoint = "nested_array_1")]
        public static partial NestedArray nested_array_1();

        [LibraryImport(NativeLib, EntryPoint = "nested_array_2")]
        public static partial void nested_array_2(out NestedArray result);

        [LibraryImport(NativeLib, EntryPoint = "nested_array_3")]
        public static partial byte nested_array_3(NestedArray input);

        [LibraryImport(NativeLib, EntryPoint = "char_array_1")]
        public static partial CharArray char_array_1();

        [LibraryImport(NativeLib, EntryPoint = "char_array_2")]
        public static partial CharArray char_array_2(CharArray arr);

        [LibraryImport(NativeLib, EntryPoint = "char_array_3")]
        public static partial byte char_array_3(ref CharArray arr);

        [LibraryImport(NativeLib, EntryPoint = "bool_field")]
        [return: MarshalAs(UnmanagedType.U1)]
        public static partial bool bool_field(BoolField x);

        /// This function has documentation.
        [LibraryImport(NativeLib, EntryPoint = "documented")]
        public static partial EnumDocumented documented(StructDocumented x);

        [LibraryImport(NativeLib, EntryPoint = "ambiguous_1")]
        public static partial Vec1 ambiguous_1(Vec1 x);

        [LibraryImport(NativeLib, EntryPoint = "ambiguous_2")]
        public static partial Vec2 ambiguous_2(Vec2 x);

        [LibraryImport(NativeLib, EntryPoint = "ambiguous_3")]
        [return: MarshalAs(UnmanagedType.U1)]
        public static partial bool ambiguous_3(Vec1 x, Vec2 y);

        [LibraryImport(NativeLib, EntryPoint = "namespaced_type")]
        public static partial Vec namespaced_type(Vec x);

        [LibraryImport(NativeLib, EntryPoint = "namespaced_inner_option")]
        public static partial OptionVec namespaced_inner_option(OptionVec x);

        [LibraryImport(NativeLib, EntryPoint = "namespaced_inner_slice")]
        public static partial SliceVec namespaced_inner_slice(SliceVec x);

        public static unsafe SliceVec namespaced_inner_slice(ReadOnlySpan<Vec> x)
        {
            fixed (void* ptr_x = x)
            {
                var x_slice = new SliceVec(new IntPtr(ptr_x), (ulong) x.Length);
                return namespaced_inner_slice(x_slice);;
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "namespaced_inner_slice_mut")]
        public static partial SliceMutVec namespaced_inner_slice_mut(SliceMutVec x);

        public static unsafe SliceMutVec namespaced_inner_slice_mut(Span<Vec> x)
        {
            fixed (void* ptr_x = x)
            {
                var x_slice = new SliceMutVec(new IntPtr(ptr_x), (ulong) x.Length);
                return namespaced_inner_slice_mut(x_slice);;
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "panics")]
        public static partial FFIError panics();

        [LibraryImport(NativeLib, EntryPoint = "renamed")]
        public static partial EnumRenamed renamed(StructRenamed x);

        [LibraryImport(NativeLib, EntryPoint = "sleep")]
        public static partial void sleep(ulong millis);

        [LibraryImport(NativeLib, EntryPoint = "weird_1")]
        [return: MarshalAs(UnmanagedType.U1)]
        public static partial bool weird_1(Weird1u32 x, Weird2u8 y);

        [LibraryImport(NativeLib, EntryPoint = "visibility")]
        public static partial void visibility(Visibility1 x, Visibility2 y);

        [LibraryImport(NativeLib, EntryPoint = "repr_transparent")]
        public static partial Tupled repr_transparent(Tupled x, ref Tupled r);

        [LibraryImport(NativeLib, EntryPoint = "pattern_ascii_pointer_1")]
        public static partial uint pattern_ascii_pointer_1([MarshalAs(UnmanagedType.LPStr)] string x);

        [LibraryImport(NativeLib, EntryPoint = "pattern_ascii_pointer_2")]
        public static partial IntPtr pattern_ascii_pointer_2();

        [LibraryImport(NativeLib, EntryPoint = "pattern_ascii_pointer_3")]
        public static partial IntPtr pattern_ascii_pointer_3([MarshalAs(UnmanagedType.LPStr)] string x);

        [LibraryImport(NativeLib, EntryPoint = "pattern_ascii_pointer_4")]
        public static partial IntPtr pattern_ascii_pointer_4([MarshalAs(UnmanagedType.LPStr)] string x, uint l);

        [LibraryImport(NativeLib, EntryPoint = "pattern_ascii_pointer_5")]
        public static partial byte pattern_ascii_pointer_5([MarshalAs(UnmanagedType.LPStr)] string x, uint i);

        [LibraryImport(NativeLib, EntryPoint = "pattern_ascii_pointer_return_slice")]
        public static partial SliceUseAsciiStringPattern pattern_ascii_pointer_return_slice();

        [LibraryImport(NativeLib, EntryPoint = "pattern_ffi_slice_1")]
        public static partial uint pattern_ffi_slice_1(SliceU32 ffi_slice);

        public static unsafe uint pattern_ffi_slice_1(ReadOnlySpan<uint> ffi_slice)
        {
            fixed (void* ptr_ffi_slice = ffi_slice)
            {
                var ffi_slice_slice = new SliceU32(new IntPtr(ptr_ffi_slice), (ulong) ffi_slice.Length);
                return pattern_ffi_slice_1(ffi_slice_slice);;
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "pattern_ffi_slice_1b")]
        public static partial uint pattern_ffi_slice_1b(SliceMutU32 ffi_slice);

        public static unsafe uint pattern_ffi_slice_1b(Span<uint> ffi_slice)
        {
            fixed (void* ptr_ffi_slice = ffi_slice)
            {
                var ffi_slice_slice = new SliceMutU32(new IntPtr(ptr_ffi_slice), (ulong) ffi_slice.Length);
                return pattern_ffi_slice_1b(ffi_slice_slice);;
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "pattern_ffi_slice_2")]
        public static partial Vec3f32 pattern_ffi_slice_2(SliceVec3f32 ffi_slice, int i);

        public static unsafe Vec3f32 pattern_ffi_slice_2(ReadOnlySpan<Vec3f32> ffi_slice, int i)
        {
            fixed (void* ptr_ffi_slice = ffi_slice)
            {
                var ffi_slice_slice = new SliceVec3f32(new IntPtr(ptr_ffi_slice), (ulong) ffi_slice.Length);
                return pattern_ffi_slice_2(ffi_slice_slice, i);;
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "pattern_ffi_slice_3b")]
        public static partial void pattern_ffi_slice_3b(SliceMutU8 slice, CallbackSliceMut callback);

        public static unsafe void pattern_ffi_slice_3b(Span<byte> slice, CallbackSliceMutDelegate callback)
        {
            fixed (void* ptr_slice = slice)
            {
                var slice_slice = new SliceMutU8(new IntPtr(ptr_slice), (ulong) slice.Length);
                var callback_wrapped = new CallbackSliceMut(callback);
                pattern_ffi_slice_3b(slice_slice, callback_wrapped);;
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "pattern_ffi_slice_4")]
        public static partial void pattern_ffi_slice_4(SliceU8 slice, SliceMutU8 slice2);

        public static unsafe void pattern_ffi_slice_4(ReadOnlySpan<byte> slice, Span<byte> slice2)
        {
            fixed (void* ptr_slice = slice)
            {
                var slice_slice = new SliceU8(new IntPtr(ptr_slice), (ulong) slice.Length);
                fixed (void* ptr_slice2 = slice2)
                {
                    var slice2_slice = new SliceMutU8(new IntPtr(ptr_slice2), (ulong) slice2.Length);
                    pattern_ffi_slice_4(slice_slice, slice2_slice);;
                }
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "pattern_ffi_slice_5")]
        public static partial void pattern_ffi_slice_5(ref SliceU8 slice, ref SliceMutU8 slice2);

        public static unsafe void pattern_ffi_slice_5(ReadOnlySpan<byte> slice, Span<byte> slice2)
        {
            fixed (void* ptr_slice = slice)
            {
                var slice_slice = new SliceU8(new IntPtr(ptr_slice), (ulong) slice.Length);
                fixed (void* ptr_slice2 = slice2)
                {
                    var slice2_slice = new SliceMutU8(new IntPtr(ptr_slice2), (ulong) slice2.Length);
                    pattern_ffi_slice_5(ref slice_slice, ref slice2_slice);;
                }
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "pattern_ffi_slice_6")]
        public static partial void pattern_ffi_slice_6(ref SliceMutU8 slice, CallbackU8 callback);

        public static unsafe void pattern_ffi_slice_6(Span<byte> slice, CallbackU8Delegate callback)
        {
            fixed (void* ptr_slice = slice)
            {
                var slice_slice = new SliceMutU8(new IntPtr(ptr_slice), (ulong) slice.Length);
                var callback_wrapped = new CallbackU8(callback);
                pattern_ffi_slice_6(ref slice_slice, callback_wrapped);;
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "pattern_ffi_slice_8")]
        public static partial void pattern_ffi_slice_8(ref SliceMutCharArray slice, CallbackCharArray2 callback);

        public static unsafe void pattern_ffi_slice_8(ref SliceMutCharArray slice, CallbackCharArray2Delegate callback)
        {
            var callback_wrapped = new CallbackCharArray2(callback);
            pattern_ffi_slice_8(ref slice, callback_wrapped);;
        }

        [LibraryImport(NativeLib, EntryPoint = "pattern_ffi_slice_delegate")]
        public static partial byte pattern_ffi_slice_delegate(CallbackFFISlice callback);

        public static unsafe byte pattern_ffi_slice_delegate(CallbackFFISliceDelegate callback)
        {
            var callback_wrapped = new CallbackFFISlice(callback);
            return pattern_ffi_slice_delegate(callback_wrapped);;
        }

        [LibraryImport(NativeLib, EntryPoint = "pattern_ffi_slice_delegate_huge")]
        public static partial Vec3f32 pattern_ffi_slice_delegate_huge(CallbackHugeVecSlice callback);

        public static unsafe Vec3f32 pattern_ffi_slice_delegate_huge(CallbackHugeVecSliceDelegate callback)
        {
            var callback_wrapped = new CallbackHugeVecSlice(callback);
            return pattern_ffi_slice_delegate_huge(callback_wrapped);;
        }

        [LibraryImport(NativeLib, EntryPoint = "pattern_ffi_option_1")]
        public static partial OptionInner pattern_ffi_option_1(OptionInner ffi_slice);

        [LibraryImport(NativeLib, EntryPoint = "pattern_ffi_option_2")]
        public static partial Inner pattern_ffi_option_2(OptionInner ffi_slice);

        [LibraryImport(NativeLib, EntryPoint = "pattern_ffi_bool")]
        public static partial Bool pattern_ffi_bool(Bool ffi_bool);

        [LibraryImport(NativeLib, EntryPoint = "pattern_ffi_cchar")]
        public static partial sbyte pattern_ffi_cchar(sbyte ffi_cchar);

        [LibraryImport(NativeLib, EntryPoint = "pattern_ffi_cchar_const_pointer")]
        public static partial IntPtr pattern_ffi_cchar_const_pointer(IntPtr ffi_cchar);

        [LibraryImport(NativeLib, EntryPoint = "pattern_ffi_cchar_mut_pointer")]
        public static partial IntPtr pattern_ffi_cchar_mut_pointer(IntPtr ffi_cchar);

        [LibraryImport(NativeLib, EntryPoint = "pattern_api_guard")]
        public static partial ulong pattern_api_guard();

        [LibraryImport(NativeLib, EntryPoint = "pattern_callback_1")]
        public static partial uint pattern_callback_1(MyCallback callback, uint x);

        public static unsafe uint pattern_callback_1(MyCallbackDelegate callback, uint x)
        {
            var callback_wrapped = new MyCallback(callback);
            return pattern_callback_1(callback_wrapped, x);;
        }

        [LibraryImport(NativeLib, EntryPoint = "pattern_callback_2")]
        public static partial MyCallbackVoid pattern_callback_2(MyCallbackVoid callback);

        public static unsafe MyCallbackVoid pattern_callback_2(MyCallbackVoidDelegate callback)
        {
            var callback_wrapped = new MyCallbackVoid(callback);
            return pattern_callback_2(callback_wrapped);;
        }

        [LibraryImport(NativeLib, EntryPoint = "pattern_callback_4")]
        public static partial uint pattern_callback_4(MyCallbackNamespaced callback, uint x);

        public static unsafe uint pattern_callback_4(MyCallbackNamespacedDelegate callback, uint x)
        {
            var callback_wrapped = new MyCallbackNamespaced(callback);
            return pattern_callback_4(callback_wrapped, x);;
        }

        [LibraryImport(NativeLib, EntryPoint = "pattern_callback_5")]
        public static partial SumDelegate1 pattern_callback_5();

        [LibraryImport(NativeLib, EntryPoint = "pattern_callback_6")]
        public static partial SumDelegate2 pattern_callback_6();

        [LibraryImport(NativeLib, EntryPoint = "pattern_callback_7")]
        public static partial FFIError pattern_callback_7(SumDelegateReturn c1, SumDelegateReturn2 c2, int x, int i, out int o);

        public static unsafe void pattern_callback_7(SumDelegateReturnDelegate c1, SumDelegateReturn2Delegate c2, int x, int i, out int o)
        {
            var c1_wrapped = new SumDelegateReturn(c1);
            var c2_wrapped = new SumDelegateReturn2(c2);
            var rval = pattern_callback_7(c1_wrapped, c2_wrapped, x, i, out o);;
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "pattern_surrogates_1")]
        public static partial void pattern_surrogates_1(Local s, out Container c);

        /// Destroys the given instance.
        ///
        /// # Safety
        ///
        /// The passed parameter MUST have been created with the corresponding init function;
        /// passing any other value results in undefined behavior.
        [LibraryImport(NativeLib, EntryPoint = "service_async_destroy")]
        public static partial FFIError service_async_destroy(ref IntPtr context);

        [LibraryImport(NativeLib, EntryPoint = "service_async_new")]
        public static partial FFIError service_async_new(ref IntPtr context);

        [LibraryImport(NativeLib, EntryPoint = "service_async_return_after_ms")]
        public static partial FFIError service_async_return_after_ms(IntPtr context, ulong x, ulong ms, AsyncHelper async_callback);

        [LibraryImport(NativeLib, EntryPoint = "service_async_bad")]
        public static partial void service_async_bad(IntPtr context);

        /// Destroys the given instance.
        ///
        /// # Safety
        ///
        /// The passed parameter MUST have been created with the corresponding init function;
        /// passing any other value results in undefined behavior.
        [LibraryImport(NativeLib, EntryPoint = "basic_service_destroy")]
        public static partial FFIError basic_service_destroy(ref IntPtr context);

        [LibraryImport(NativeLib, EntryPoint = "basic_service_new")]
        public static partial FFIError basic_service_new(ref IntPtr context);

        /// Destroys the given instance.
        ///
        /// # Safety
        ///
        /// The passed parameter MUST have been created with the corresponding init function;
        /// passing any other value results in undefined behavior.
        [LibraryImport(NativeLib, EntryPoint = "service_on_panic_destroy")]
        public static partial FFIError service_on_panic_destroy(ref IntPtr context);

        [LibraryImport(NativeLib, EntryPoint = "service_on_panic_new")]
        public static partial FFIError service_on_panic_new(ref IntPtr context);

        /// Methods returning a Result<(), _> are the default and do not
        /// need annotations.
        [LibraryImport(NativeLib, EntryPoint = "service_on_panic_return_result")]
        public static partial FFIError service_on_panic_return_result(IntPtr context, uint anon1);

        /// Methods returning a value need an `on_panic` annotation.
        [LibraryImport(NativeLib, EntryPoint = "service_on_panic_return_default_value")]
        public static partial uint service_on_panic_return_default_value(IntPtr context, uint x);

        /// This function has no panic safeguards. It will be a bit faster to
        /// call, but if it panics your host app will abort.
        [LibraryImport(NativeLib, EntryPoint = "service_on_panic_return_ub_on_panic")]
        public static partial IntPtr service_on_panic_return_ub_on_panic(IntPtr context);

        /// Destroys the given instance.
        ///
        /// # Safety
        ///
        /// The passed parameter MUST have been created with the corresponding init function;
        /// passing any other value results in undefined behavior.
        [LibraryImport(NativeLib, EntryPoint = "service_callbacks_destroy")]
        public static partial FFIError service_callbacks_destroy(ref IntPtr context);

        [LibraryImport(NativeLib, EntryPoint = "service_callbacks_new")]
        public static partial FFIError service_callbacks_new(ref IntPtr context);

        [LibraryImport(NativeLib, EntryPoint = "service_callbacks_callback_simple")]
        public static partial FFIError service_callbacks_callback_simple(IntPtr context, MyCallback callback);

        public static unsafe void service_callbacks_callback_simple(IntPtr context, MyCallbackDelegate callback)
        {
            var callback_wrapped = new MyCallback(callback);
            var rval = service_callbacks_callback_simple(context, callback_wrapped);;
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "service_callbacks_callback_ffi_return")]
        public static partial FFIError service_callbacks_callback_ffi_return(IntPtr context, SumDelegateReturn callback);

        public static unsafe void service_callbacks_callback_ffi_return(IntPtr context, SumDelegateReturnDelegate callback)
        {
            var callback_wrapped = new SumDelegateReturn(callback);
            var rval = service_callbacks_callback_ffi_return(context, callback_wrapped);;
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "service_callbacks_callback_with_slice")]
        public static partial FFIError service_callbacks_callback_with_slice(IntPtr context, SumDelegateReturn callback, SliceI32 input);

        public static unsafe void service_callbacks_callback_with_slice(IntPtr context, SumDelegateReturnDelegate callback, ReadOnlySpan<int> input)
        {
            fixed (void* ptr_input = input)
            {
                var input_slice = new SliceI32(new IntPtr(ptr_input), (ulong) input.Length);
                var callback_wrapped = new SumDelegateReturn(callback);
                var rval = service_callbacks_callback_with_slice(context, callback_wrapped, input_slice);;
                if (rval != FFIError.Ok)
                {
                    throw new InteropException<FFIError>(rval);
                }
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "service_callbacks_invoke_delegates")]
        public static partial FFIError service_callbacks_invoke_delegates(IntPtr context);

        /// Destroys the given instance.
        ///
        /// # Safety
        ///
        /// The passed parameter MUST have been created with the corresponding init function;
        /// passing any other value results in undefined behavior.
        [LibraryImport(NativeLib, EntryPoint = "service_ignoring_methods_destroy")]
        public static partial FFIError service_ignoring_methods_destroy(ref IntPtr context);

        [LibraryImport(NativeLib, EntryPoint = "service_ignoring_methods_new")]
        public static partial FFIError service_ignoring_methods_new(ref IntPtr context);

        /// Destroys the given instance.
        ///
        /// # Safety
        ///
        /// The passed parameter MUST have been created with the corresponding init function;
        /// passing any other value results in undefined behavior.
        [LibraryImport(NativeLib, EntryPoint = "service_multiple_ctors_destroy")]
        public static partial FFIError service_multiple_ctors_destroy(ref IntPtr context);

        [LibraryImport(NativeLib, EntryPoint = "service_multiple_ctors_new_with")]
        public static partial FFIError service_multiple_ctors_new_with(ref IntPtr context, uint some_value);

        [LibraryImport(NativeLib, EntryPoint = "service_multiple_ctors_new_without")]
        public static partial FFIError service_multiple_ctors_new_without(ref IntPtr context);

        [LibraryImport(NativeLib, EntryPoint = "service_multiple_ctors_new_with_string")]
        public static partial FFIError service_multiple_ctors_new_with_string(ref IntPtr context, [MarshalAs(UnmanagedType.LPStr)] string anon0);

        [LibraryImport(NativeLib, EntryPoint = "service_multiple_ctors_new_failing")]
        public static partial FFIError service_multiple_ctors_new_failing(ref IntPtr context, byte some_value);

        /// Destroys the given instance.
        ///
        /// # Safety
        ///
        /// The passed parameter MUST have been created with the corresponding init function;
        /// passing any other value results in undefined behavior.
        [LibraryImport(NativeLib, EntryPoint = "service_using_lifetimes_destroy")]
        public static partial FFIError service_using_lifetimes_destroy(ref IntPtr context);

        [LibraryImport(NativeLib, EntryPoint = "service_using_lifetimes_new_with")]
        public static partial FFIError service_using_lifetimes_new_with(ref IntPtr context, ref uint some_value);

        [LibraryImport(NativeLib, EntryPoint = "service_using_lifetimes_lifetime_1")]
        public static partial void service_using_lifetimes_lifetime_1(IntPtr context, SliceBool slice);

        public static unsafe void service_using_lifetimes_lifetime_1(IntPtr context, ReadOnlySpan<Bool> slice)
        {
            fixed (void* ptr_slice = slice)
            {
                var slice_slice = new SliceBool(new IntPtr(ptr_slice), (ulong) slice.Length);
                service_using_lifetimes_lifetime_1(context, slice_slice);;
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "service_using_lifetimes_lifetime_2")]
        public static partial void service_using_lifetimes_lifetime_2(IntPtr context, SliceBool slice);

        public static unsafe void service_using_lifetimes_lifetime_2(IntPtr context, ReadOnlySpan<Bool> slice)
        {
            fixed (void* ptr_slice = slice)
            {
                var slice_slice = new SliceBool(new IntPtr(ptr_slice), (ulong) slice.Length);
                service_using_lifetimes_lifetime_2(context, slice_slice);;
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "service_using_lifetimes_return_string_accept_slice")]
        public static partial IntPtr service_using_lifetimes_return_string_accept_slice(IntPtr anon0, SliceU8 anon1);

        public static unsafe string service_using_lifetimes_return_string_accept_slice(IntPtr anon0, ReadOnlySpan<byte> anon1)
        {
            fixed (void* ptr_anon1 = anon1)
            {
                var anon1_slice = new SliceU8(new IntPtr(ptr_anon1), (ulong) anon1.Length);
                var s = service_using_lifetimes_return_string_accept_slice(anon0, anon1_slice);;
                return Marshal.PtrToStringAnsi(s);
            }
        }

        /// Destroys the given instance.
        ///
        /// # Safety
        ///
        /// The passed parameter MUST have been created with the corresponding init function;
        /// passing any other value results in undefined behavior.
        [LibraryImport(NativeLib, EntryPoint = "service_various_slices_destroy")]
        public static partial FFIError service_various_slices_destroy(ref IntPtr context);

        [LibraryImport(NativeLib, EntryPoint = "service_various_slices_new")]
        public static partial FFIError service_various_slices_new(ref IntPtr context);

        [LibraryImport(NativeLib, EntryPoint = "service_various_slices_mut_self")]
        public static partial byte service_various_slices_mut_self(IntPtr context, SliceU8 slice);

        public static unsafe byte service_various_slices_mut_self(IntPtr context, ReadOnlySpan<byte> slice)
        {
            fixed (void* ptr_slice = slice)
            {
                var slice_slice = new SliceU8(new IntPtr(ptr_slice), (ulong) slice.Length);
                return service_various_slices_mut_self(context, slice_slice);;
            }
        }

        /// Single line.
        [LibraryImport(NativeLib, EntryPoint = "service_various_slices_mut_self_void")]
        public static partial void service_various_slices_mut_self_void(IntPtr context, SliceBool slice);

        /// Single line.
        public static unsafe void service_various_slices_mut_self_void(IntPtr context, ReadOnlySpan<Bool> slice)
        {
            fixed (void* ptr_slice = slice)
            {
                var slice_slice = new SliceBool(new IntPtr(ptr_slice), (ulong) slice.Length);
                service_various_slices_mut_self_void(context, slice_slice);;
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "service_various_slices_mut_self_ref")]
        public static partial byte service_various_slices_mut_self_ref(IntPtr context, ref byte x, out byte y);

        [LibraryImport(NativeLib, EntryPoint = "service_various_slices_mut_self_ref_slice")]
        public static partial byte service_various_slices_mut_self_ref_slice(IntPtr context, ref byte x, out byte y, SliceU8 slice);

        public static unsafe byte service_various_slices_mut_self_ref_slice(IntPtr context, ref byte x, out byte y, ReadOnlySpan<byte> slice)
        {
            fixed (void* ptr_slice = slice)
            {
                var slice_slice = new SliceU8(new IntPtr(ptr_slice), (ulong) slice.Length);
                return service_various_slices_mut_self_ref_slice(context, ref x, out y, slice_slice);;
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "service_various_slices_mut_self_ref_slice_limited")]
        public static partial byte service_various_slices_mut_self_ref_slice_limited(IntPtr context, ref byte x, out byte y, SliceU8 slice, SliceU8 slice2);

        public static unsafe byte service_various_slices_mut_self_ref_slice_limited(IntPtr context, ref byte x, out byte y, ReadOnlySpan<byte> slice, ReadOnlySpan<byte> slice2)
        {
            fixed (void* ptr_slice = slice)
            {
                var slice_slice = new SliceU8(new IntPtr(ptr_slice), (ulong) slice.Length);
                fixed (void* ptr_slice2 = slice2)
                {
                    var slice2_slice = new SliceU8(new IntPtr(ptr_slice2), (ulong) slice2.Length);
                    return service_various_slices_mut_self_ref_slice_limited(context, ref x, out y, slice_slice, slice2_slice);;
                }
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "service_various_slices_mut_self_ffi_error")]
        public static partial FFIError service_various_slices_mut_self_ffi_error(IntPtr context, SliceMutU8 slice);

        public static unsafe void service_various_slices_mut_self_ffi_error(IntPtr context, Span<byte> slice)
        {
            fixed (void* ptr_slice = slice)
            {
                var slice_slice = new SliceMutU8(new IntPtr(ptr_slice), (ulong) slice.Length);
                var rval = service_various_slices_mut_self_ffi_error(context, slice_slice);;
                if (rval != FFIError.Ok)
                {
                    throw new InteropException<FFIError>(rval);
                }
            }
        }

        [LibraryImport(NativeLib, EntryPoint = "service_various_slices_mut_self_no_error")]
        public static partial FFIError service_various_slices_mut_self_no_error(IntPtr context, SliceMutU8 slice);

        public static unsafe void service_various_slices_mut_self_no_error(IntPtr context, Span<byte> slice)
        {
            fixed (void* ptr_slice = slice)
            {
                var slice_slice = new SliceMutU8(new IntPtr(ptr_slice), (ulong) slice.Length);
                var rval = service_various_slices_mut_self_no_error(context, slice_slice);;
                if (rval != FFIError.Ok)
                {
                    throw new InteropException<FFIError>(rval);
                }
            }
        }

        /// Warning, you _must_ discard the returned slice object before calling into this service
        /// again, as otherwise undefined behavior might happen.
        [LibraryImport(NativeLib, EntryPoint = "service_various_slices_return_slice")]
        public static partial SliceU32 service_various_slices_return_slice(IntPtr context);

        /// Warning, you _must_ discard the returned slice object before calling into this service
        /// again, as otherwise undefined behavior might happen.
        [LibraryImport(NativeLib, EntryPoint = "service_various_slices_return_slice_mut")]
        public static partial SliceMutU32 service_various_slices_return_slice_mut(IntPtr context);

        /// Destroys the given instance.
        ///
        /// # Safety
        ///
        /// The passed parameter MUST have been created with the corresponding init function;
        /// passing any other value results in undefined behavior.
        [LibraryImport(NativeLib, EntryPoint = "service_strings_destroy")]
        public static partial FFIError service_strings_destroy(ref IntPtr context);

        [LibraryImport(NativeLib, EntryPoint = "service_strings_new")]
        public static partial FFIError service_strings_new(ref IntPtr context);

        [LibraryImport(NativeLib, EntryPoint = "service_strings_pass_string")]
        public static partial void service_strings_pass_string(IntPtr context, [MarshalAs(UnmanagedType.LPStr)] string anon1);

        [LibraryImport(NativeLib, EntryPoint = "service_strings_return_string")]
        public static partial IntPtr service_strings_return_string(IntPtr context);

    }

    /// Documented enum.
    public enum EnumDocumented
    {
        /// Variant A.
        A = 0,
        /// Variant B.
        B = 1,
        /// Variant B.
        C = 2,
    }

    public enum EnumRenamed
    {
        X = 0,
    }

    [Serializable]
    [NativeMarshalling(typeof(ArrayMarshaller))]
    public partial struct Array
    {
        public byte[] data;
    }

    [CustomMarshaller(typeof(Array), MarshalMode.Default, typeof(ArrayMarshaller))]
    internal static class ArrayMarshaller
    {
        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public fixed byte data[16];
        }

        public static Unmanaged ConvertToUnmanaged(Array managed)
        {
            var result = new Unmanaged
            {
            };

            unsafe
            {
                if(managed.data != null)
                {
                    if(managed.data.Length != 16)
                    {
                        throw new InvalidOperationException($"The managed array field '{nameof(Array.data)}' has {managed.data.Length} elements, exceeding the fixed size array of 16.");
                    }
                    var source_data = new ReadOnlySpan<byte>(managed.data, 0, managed.data.Length);
                    var dest = new Span<byte>(result.data, 16);
                    source_data.CopyTo(dest);
                }
                else
                {
                    throw new InvalidOperationException($"The managed field cannot be null.");
                }
            }

            return result;
        }

        public static Array ConvertToManaged(Unmanaged unmanaged)
        {
            var result = new Array()
            {
            };

            unsafe
            {
                var source_data = new Span<byte>(unmanaged.data, 16);
                var arr_data = new byte[16];
                source_data.CopyTo(arr_data.AsSpan());
                result.data = arr_data;
            }

            return result;
        }
    }


    [Serializable]
    [NativeMarshalling(typeof(BoolFieldMarshaller))]
    public partial struct BoolField
    {
        public bool val;
    }

    [CustomMarshaller(typeof(BoolField), MarshalMode.Default, typeof(BoolFieldMarshaller))]
    internal static class BoolFieldMarshaller
    {
        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public sbyte val;
        }

        public static Unmanaged ConvertToUnmanaged(BoolField managed)
        {
            var result = new Unmanaged
            {
                val = Convert.ToSByte(managed.val),
            };

            unsafe
            {
            }

            return result;
        }

        public static BoolField ConvertToManaged(Unmanaged unmanaged)
        {
            var result = new BoolField()
            {
                val = Convert.ToBoolean(unmanaged.val),
            };

            unsafe
            {
            }

            return result;
        }
    }


    [Serializable]
    [NativeMarshalling(typeof(CharArrayMarshaller))]
    public partial struct CharArray
    {
        public string str;
        public string str_2;
    }

    [CustomMarshaller(typeof(CharArray), MarshalMode.Default, typeof(CharArrayMarshaller))]
    internal static class CharArrayMarshaller
    {
        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public fixed byte str[32];
            public fixed byte str_2[32];
        }

        public static Unmanaged ConvertToUnmanaged(CharArray managed)
        {
            var result = new Unmanaged
            {
            };

            unsafe
            {
                if(managed.str != null)
                {
                    fixed(char* s = managed.str)
                    {
                        if(Encoding.UTF8.GetByteCount(managed.str, 0, managed.str.Length) + 1 > 32)
                        {
                            throw new InvalidOperationException($"The managed string field '{nameof(CharArray.str)}' cannot be encoded to fit the fixed size array of 32.");
                        }
                        var written = Encoding.UTF8.GetBytes(s, managed.str.Length, result.str, 31);
                        result.str[written] = 0;
                    }
                }
                else
                {
                    throw new InvalidOperationException($"The managed field cannot be null.");
                }

                if(managed.str_2 != null)
                {
                    fixed(char* s = managed.str_2)
                    {
                        if(Encoding.UTF8.GetByteCount(managed.str_2, 0, managed.str_2.Length) + 1 > 32)
                        {
                            throw new InvalidOperationException($"The managed string field '{nameof(CharArray.str_2)}' cannot be encoded to fit the fixed size array of 32.");
                        }
                        var written = Encoding.UTF8.GetBytes(s, managed.str_2.Length, result.str_2, 31);
                        result.str_2[written] = 0;
                    }
                }
                else
                {
                    throw new InvalidOperationException($"The managed field cannot be null.");
                }
            }

            return result;
        }

        public static CharArray ConvertToManaged(Unmanaged unmanaged)
        {
            var result = new CharArray()
            {
            };

            unsafe
            {
                var source_str = new ReadOnlySpan<byte>(unmanaged.str, 32);
                var terminatorIndex_str = source_str.IndexOf<byte>(0);
                result.str = Encoding.UTF8.GetString(source_str.Slice(0, terminatorIndex_str == -1 ? Math.Min(source_str.Length, 32) : terminatorIndex_str));

                var source_str_2 = new ReadOnlySpan<byte>(unmanaged.str_2, 32);
                var terminatorIndex_str_2 = source_str_2.IndexOf<byte>(0);
                result.str_2 = Encoding.UTF8.GetString(source_str_2.Slice(0, terminatorIndex_str_2 == -1 ? Math.Min(source_str_2.Length, 32) : terminatorIndex_str_2));
            }

            return result;
        }
    }


    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct Container
    {
        public Local foreign;
    }

    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct ExtraTypef32
    {
        public float x;
    }

    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct Genericu32
    {
        public IntPtr x;
    }

    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct Genericu8
    {
        public IntPtr x;
    }

    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct Inner
    {
        float x;
    }

    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct Local
    {
        uint x;
    }

    [Serializable]
    [NativeMarshalling(typeof(NestedArrayMarshaller))]
    public partial struct NestedArray
    {
        public EnumRenamed field_enum;
        public Vec3f32 field_vec;
        public bool field_bool;
        public int field_int;
        public ushort[] field_array;
        public ushort[] field_array_2;
        public Array field_struct;
    }

    [CustomMarshaller(typeof(NestedArray), MarshalMode.Default, typeof(NestedArrayMarshaller))]
    internal static class NestedArrayMarshaller
    {
        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public EnumRenamed field_enum;
            public Vec3f32 field_vec;
            public sbyte field_bool;
            public int field_int;
            public fixed ushort field_array[5];
            public fixed ushort field_array_2[5];
            public ArrayMarshaller.Unmanaged field_struct;
        }

        public static Unmanaged ConvertToUnmanaged(NestedArray managed)
        {
            var result = new Unmanaged
            {
                field_enum = managed.field_enum,
                field_vec = managed.field_vec,
                field_bool = Convert.ToSByte(managed.field_bool),
                field_int = managed.field_int,
                field_struct = ArrayMarshaller.ConvertToUnmanaged(managed.field_struct),
            };

            unsafe
            {
                if(managed.field_array != null)
                {
                    if(managed.field_array.Length != 5)
                    {
                        throw new InvalidOperationException($"The managed array field '{nameof(NestedArray.field_array)}' has {managed.field_array.Length} elements, exceeding the fixed size array of 5.");
                    }
                    var source_field_array = new ReadOnlySpan<ushort>(managed.field_array, 0, managed.field_array.Length);
                    var dest = new Span<ushort>(result.field_array, 5);
                    source_field_array.CopyTo(dest);
                }
                else
                {
                    throw new InvalidOperationException($"The managed field cannot be null.");
                }

                if(managed.field_array_2 != null)
                {
                    if(managed.field_array_2.Length != 5)
                    {
                        throw new InvalidOperationException($"The managed array field '{nameof(NestedArray.field_array_2)}' has {managed.field_array_2.Length} elements, exceeding the fixed size array of 5.");
                    }
                    var source_field_array_2 = new ReadOnlySpan<ushort>(managed.field_array_2, 0, managed.field_array_2.Length);
                    var dest = new Span<ushort>(result.field_array_2, 5);
                    source_field_array_2.CopyTo(dest);
                }
                else
                {
                    throw new InvalidOperationException($"The managed field cannot be null.");
                }
            }

            return result;
        }

        public static NestedArray ConvertToManaged(Unmanaged unmanaged)
        {
            var result = new NestedArray()
            {
                field_enum = unmanaged.field_enum,
                field_vec = unmanaged.field_vec,
                field_bool = Convert.ToBoolean(unmanaged.field_bool),
                field_int = unmanaged.field_int,
                field_struct = ArrayMarshaller.ConvertToManaged(unmanaged.field_struct),
            };

            unsafe
            {
                var source_field_array = new Span<ushort>(unmanaged.field_array, 5);
                var arr_field_array = new ushort[5];
                source_field_array.CopyTo(arr_field_array.AsSpan());
                result.field_array = arr_field_array;

                var source_field_array_2 = new Span<ushort>(unmanaged.field_array_2, 5);
                var arr_field_array_2 = new ushort[5];
                source_field_array_2.CopyTo(arr_field_array_2.AsSpan());
                result.field_array_2 = arr_field_array_2;
            }

            return result;
        }
    }


    [Serializable]
    [StructLayout(LayoutKind.Sequential, Pack = 1)]
    public partial struct Packed1
    {
        public byte x;
        public ushort y;
    }

    [Serializable]
    [StructLayout(LayoutKind.Sequential, Pack = 1)]
    public partial struct Packed2
    {
        public ushort y;
        public byte x;
    }

    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct Phantomu8
    {
        public uint x;
    }

    /// Documented struct.
    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct StructDocumented
    {
        /// Documented field.
        public float x;
    }

    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct StructRenamed
    {
        public EnumRenamed e;
    }

    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct Tupled
    {
        public byte x0;
    }

    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct UseAsciiStringPattern
    {
        public string ascii_string;
    }

    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct Vec
    {
        public double x;
        public double z;
    }

    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct Vec1
    {
        public float x;
        public float y;
    }

    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct Vec2
    {
        public double x;
        public double z;
    }

    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct Vec3f32
    {
        public float x;
        public float y;
        public float z;
    }

    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct Visibility1
    {
        public byte pblc;
        byte prvt;
    }

    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct Visibility2
    {
        public byte pblc1;
        public byte pblc2;
    }

    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct Weird1u32
    {
        uint x;
    }

    [Serializable]
    [NativeMarshalling(typeof(Weird2u8Marshaller))]
    public partial struct Weird2u8
    {
        internal byte t;
        internal byte[] a;
        internal IntPtr r;
    }

    [CustomMarshaller(typeof(Weird2u8), MarshalMode.Default, typeof(Weird2u8Marshaller))]
    internal static class Weird2u8Marshaller
    {
        [StructLayout(LayoutKind.Sequential)]
        public unsafe struct Unmanaged
        {
            public byte t;
            public fixed byte a[5];
            public IntPtr r;
        }

        public static Unmanaged ConvertToUnmanaged(Weird2u8 managed)
        {
            var result = new Unmanaged
            {
                t = managed.t,
                r = managed.r,
            };

            unsafe
            {
                if(managed.a != null)
                {
                    if(managed.a.Length != 5)
                    {
                        throw new InvalidOperationException($"The managed array field '{nameof(Weird2u8.a)}' has {managed.a.Length} elements, exceeding the fixed size array of 5.");
                    }
                    var source_a = new ReadOnlySpan<byte>(managed.a, 0, managed.a.Length);
                    var dest = new Span<byte>(result.a, 5);
                    source_a.CopyTo(dest);
                }
                else
                {
                    throw new InvalidOperationException($"The managed field cannot be null.");
                }
            }

            return result;
        }

        public static Weird2u8 ConvertToManaged(Unmanaged unmanaged)
        {
            var result = new Weird2u8()
            {
                t = unmanaged.t,
                r = unmanaged.r,
            };

            unsafe
            {
                var source_a = new Span<byte>(unmanaged.a, 5);
                var arr_a = new byte[5];
                source_a.CopyTo(arr_a.AsSpan());
                result.a = arr_a;
            }

            return result;
        }
    }


    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate byte InteropDelegate_fn_u8_rval_u8(byte x0);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void InteropDelegate_fn_CharArray(CharArray x0);
    public delegate void InteropDelegate_fn_CharArray_native(CharArray x0);

    public enum FFIError
    {
        Ok = 0,
        Null = 100,
        Panic = 200,
        Delegate = 300,
        Fail = 400,
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct SliceBool : IEnumerable<Bool>, IDisposable
    {
        Bool[] _managed;
        IntPtr _data;
        ulong _len;
        bool _wePinned;

        public int Count => _managed?.Length ?? (int)_len;

        public unsafe ReadOnlySpan<Bool> ReadOnlySpan
        {
            get
            {
                if (_managed is not null)
                {
                    return new ReadOnlySpan<Bool>(_managed);
                }
                return new ReadOnlySpan<Bool>(_data.ToPointer(), (int)_len);
            }
        }

        public unsafe Bool this[int i]
        {
            get
            {
                if (i >= Count) throw new IndexOutOfRangeException();
                if (_managed is not null)
                {
                    return _managed[i];
                }
                return Unsafe.Read<Bool>((void*)IntPtr.Add(_data, i * Unsafe.SizeOf<Bool>()));
            }
        }

        public SliceBool(GCHandle handle, ulong count)
        {
            _data = handle.AddrOfPinnedObject();
            _len = count;
        }

        public SliceBool(IntPtr handle, ulong count)
        {
            _data = handle;
            _len = count;
        }

        public SliceBool(Bool[] managed)
        {
            _managed = managed;
            _data = GCHandle.Alloc(managed, GCHandleType.Pinned).AddrOfPinnedObject();
            _len = (ulong) managed.Length;
            _wePinned = true;
        }

        public IEnumerator<Bool> GetEnumerator()
        {
            for (var i = 0; i < Count; ++i)
            {
                yield return this[i];
            }
        }

        IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();

        public void Dispose()
        {
            if (_wePinned && _data != IntPtr.Zero)
            {
                Marshal.FreeHGlobal(_data);
                _data = IntPtr.Zero;
            }
            _managed = null;
        }

        [CustomMarshaller(typeof(SliceBool), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            public IntPtr Data;
            public ulong Len;

            public SliceBool Managed()
            {
                return new SliceBool(Data, Len);
            }
        }

        public ref struct Marshaller
        {
            private SliceBool managed;
            private Unmanaged native;
            private Unmanaged sourceNative;
            private GCHandle? pinned;
            private SliceBool marshalled;

            public void FromManaged(SliceBool managed) { this.managed = managed; }
            public Unmanaged ToUnmanaged() => new Unmanaged { Data = managed._data, Len = managed._len };
            public void FromUnmanaged(Unmanaged unmanaged) { sourceNative = unmanaged; }
            public unsafe SliceBool ToManaged() => new SliceBool(sourceNative.Data, sourceNative.Len);
            public void Free() { }
        }
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct SliceI32 : IEnumerable<int>, IDisposable
    {
        int[] _managed;
        IntPtr _data;
        ulong _len;
        bool _wePinned;

        public int Count => _managed?.Length ?? (int)_len;

        public unsafe ReadOnlySpan<int> ReadOnlySpan
        {
            get
            {
                if (_managed is not null)
                {
                    return new ReadOnlySpan<int>(_managed);
                }
                return new ReadOnlySpan<int>(_data.ToPointer(), (int)_len);
            }
        }

        public unsafe int this[int i]
        {
            get
            {
                if (i >= Count) throw new IndexOutOfRangeException();
                if (_managed is not null)
                {
                    return _managed[i];
                }
                return Unsafe.Read<int>((void*)IntPtr.Add(_data, i * Unsafe.SizeOf<int>()));
            }
        }

        public SliceI32(GCHandle handle, ulong count)
        {
            _data = handle.AddrOfPinnedObject();
            _len = count;
        }

        public SliceI32(IntPtr handle, ulong count)
        {
            _data = handle;
            _len = count;
        }

        public SliceI32(int[] managed)
        {
            _managed = managed;
            _data = GCHandle.Alloc(managed, GCHandleType.Pinned).AddrOfPinnedObject();
            _len = (ulong) managed.Length;
            _wePinned = true;
        }

        public IEnumerator<int> GetEnumerator()
        {
            for (var i = 0; i < Count; ++i)
            {
                yield return this[i];
            }
        }

        IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();

        public void Dispose()
        {
            if (_wePinned && _data != IntPtr.Zero)
            {
                Marshal.FreeHGlobal(_data);
                _data = IntPtr.Zero;
            }
            _managed = null;
        }

        [CustomMarshaller(typeof(SliceI32), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            public IntPtr Data;
            public ulong Len;

            public SliceI32 Managed()
            {
                return new SliceI32(Data, Len);
            }
        }

        public ref struct Marshaller
        {
            private SliceI32 managed;
            private Unmanaged native;
            private Unmanaged sourceNative;
            private GCHandle? pinned;
            private SliceI32 marshalled;

            public void FromManaged(SliceI32 managed) { this.managed = managed; }
            public Unmanaged ToUnmanaged() => new Unmanaged { Data = managed._data, Len = managed._len };
            public void FromUnmanaged(Unmanaged unmanaged) { sourceNative = unmanaged; }
            public unsafe SliceI32 ToManaged() => new SliceI32(sourceNative.Data, sourceNative.Len);
            public void Free() { }
        }
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct SliceU32 : IEnumerable<uint>, IDisposable
    {
        uint[] _managed;
        IntPtr _data;
        ulong _len;
        bool _wePinned;

        public int Count => _managed?.Length ?? (int)_len;

        public unsafe ReadOnlySpan<uint> ReadOnlySpan
        {
            get
            {
                if (_managed is not null)
                {
                    return new ReadOnlySpan<uint>(_managed);
                }
                return new ReadOnlySpan<uint>(_data.ToPointer(), (int)_len);
            }
        }

        public unsafe uint this[int i]
        {
            get
            {
                if (i >= Count) throw new IndexOutOfRangeException();
                if (_managed is not null)
                {
                    return _managed[i];
                }
                return Unsafe.Read<uint>((void*)IntPtr.Add(_data, i * Unsafe.SizeOf<uint>()));
            }
        }

        public SliceU32(GCHandle handle, ulong count)
        {
            _data = handle.AddrOfPinnedObject();
            _len = count;
        }

        public SliceU32(IntPtr handle, ulong count)
        {
            _data = handle;
            _len = count;
        }

        public SliceU32(uint[] managed)
        {
            _managed = managed;
            _data = GCHandle.Alloc(managed, GCHandleType.Pinned).AddrOfPinnedObject();
            _len = (ulong) managed.Length;
            _wePinned = true;
        }

        public IEnumerator<uint> GetEnumerator()
        {
            for (var i = 0; i < Count; ++i)
            {
                yield return this[i];
            }
        }

        IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();

        public void Dispose()
        {
            if (_wePinned && _data != IntPtr.Zero)
            {
                Marshal.FreeHGlobal(_data);
                _data = IntPtr.Zero;
            }
            _managed = null;
        }

        [CustomMarshaller(typeof(SliceU32), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            public IntPtr Data;
            public ulong Len;

            public SliceU32 Managed()
            {
                return new SliceU32(Data, Len);
            }
        }

        public ref struct Marshaller
        {
            private SliceU32 managed;
            private Unmanaged native;
            private Unmanaged sourceNative;
            private GCHandle? pinned;
            private SliceU32 marshalled;

            public void FromManaged(SliceU32 managed) { this.managed = managed; }
            public Unmanaged ToUnmanaged() => new Unmanaged { Data = managed._data, Len = managed._len };
            public void FromUnmanaged(Unmanaged unmanaged) { sourceNative = unmanaged; }
            public unsafe SliceU32 ToManaged() => new SliceU32(sourceNative.Data, sourceNative.Len);
            public void Free() { }
        }
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct SliceU8 : IEnumerable<byte>, IDisposable
    {
        byte[] _managed;
        IntPtr _data;
        ulong _len;
        bool _wePinned;

        public int Count => _managed?.Length ?? (int)_len;

        public unsafe ReadOnlySpan<byte> ReadOnlySpan
        {
            get
            {
                if (_managed is not null)
                {
                    return new ReadOnlySpan<byte>(_managed);
                }
                return new ReadOnlySpan<byte>(_data.ToPointer(), (int)_len);
            }
        }

        public unsafe byte this[int i]
        {
            get
            {
                if (i >= Count) throw new IndexOutOfRangeException();
                if (_managed is not null)
                {
                    return _managed[i];
                }
                return Unsafe.Read<byte>((void*)IntPtr.Add(_data, i * Unsafe.SizeOf<byte>()));
            }
        }

        public SliceU8(GCHandle handle, ulong count)
        {
            _data = handle.AddrOfPinnedObject();
            _len = count;
        }

        public SliceU8(IntPtr handle, ulong count)
        {
            _data = handle;
            _len = count;
        }

        public SliceU8(byte[] managed)
        {
            _managed = managed;
            _data = GCHandle.Alloc(managed, GCHandleType.Pinned).AddrOfPinnedObject();
            _len = (ulong) managed.Length;
            _wePinned = true;
        }

        public IEnumerator<byte> GetEnumerator()
        {
            for (var i = 0; i < Count; ++i)
            {
                yield return this[i];
            }
        }

        IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();

        public void Dispose()
        {
            if (_wePinned && _data != IntPtr.Zero)
            {
                Marshal.FreeHGlobal(_data);
                _data = IntPtr.Zero;
            }
            _managed = null;
        }

        [CustomMarshaller(typeof(SliceU8), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            public IntPtr Data;
            public ulong Len;

            public SliceU8 Managed()
            {
                return new SliceU8(Data, Len);
            }
        }

        public ref struct Marshaller
        {
            private SliceU8 managed;
            private Unmanaged native;
            private Unmanaged sourceNative;
            private GCHandle? pinned;
            private SliceU8 marshalled;

            public void FromManaged(SliceU8 managed) { this.managed = managed; }
            public Unmanaged ToUnmanaged() => new Unmanaged { Data = managed._data, Len = managed._len };
            public void FromUnmanaged(Unmanaged unmanaged) { sourceNative = unmanaged; }
            public unsafe SliceU8 ToManaged() => new SliceU8(sourceNative.Data, sourceNative.Len);
            public void Free() { }
        }
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct SliceUseAsciiStringPattern : IEnumerable<UseAsciiStringPattern>, IDisposable
    {
        UseAsciiStringPattern[] _managed;
        IntPtr _data;
        ulong _len;
        bool _wePinned;

        public int Count => _managed?.Length ?? (int)_len;

        public unsafe ReadOnlySpan<UseAsciiStringPattern> ReadOnlySpan
        {
            get
            {
                if (_managed is not null)
                {
                    return new ReadOnlySpan<UseAsciiStringPattern>(_managed);
                }
                return new ReadOnlySpan<UseAsciiStringPattern>(_data.ToPointer(), (int)_len);
            }
        }

        public unsafe UseAsciiStringPattern this[int i]
        {
            get
            {
                if (i >= Count) throw new IndexOutOfRangeException();
                if (_managed is not null)
                {
                    return _managed[i];
                }
                return Unsafe.Read<UseAsciiStringPattern>((void*)IntPtr.Add(_data, i * Unsafe.SizeOf<UseAsciiStringPattern>()));
            }
        }

        public SliceUseAsciiStringPattern(GCHandle handle, ulong count)
        {
            _data = handle.AddrOfPinnedObject();
            _len = count;
        }

        public SliceUseAsciiStringPattern(IntPtr handle, ulong count)
        {
            _data = handle;
            _len = count;
        }

        public SliceUseAsciiStringPattern(UseAsciiStringPattern[] managed)
        {
            _managed = managed;
            _data = GCHandle.Alloc(managed, GCHandleType.Pinned).AddrOfPinnedObject();
            _len = (ulong) managed.Length;
            _wePinned = true;
        }

        public IEnumerator<UseAsciiStringPattern> GetEnumerator()
        {
            for (var i = 0; i < Count; ++i)
            {
                yield return this[i];
            }
        }

        IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();

        public void Dispose()
        {
            if (_wePinned && _data != IntPtr.Zero)
            {
                Marshal.FreeHGlobal(_data);
                _data = IntPtr.Zero;
            }
            _managed = null;
        }

        [CustomMarshaller(typeof(SliceUseAsciiStringPattern), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            public IntPtr Data;
            public ulong Len;

            public SliceUseAsciiStringPattern Managed()
            {
                return new SliceUseAsciiStringPattern(Data, Len);
            }
        }

        public ref struct Marshaller
        {
            private SliceUseAsciiStringPattern managed;
            private Unmanaged native;
            private Unmanaged sourceNative;
            private GCHandle? pinned;
            private SliceUseAsciiStringPattern marshalled;

            public void FromManaged(SliceUseAsciiStringPattern managed) { this.managed = managed; }
            public Unmanaged ToUnmanaged() => new Unmanaged { Data = managed._data, Len = managed._len };
            public void FromUnmanaged(Unmanaged unmanaged) { sourceNative = unmanaged; }
            public unsafe SliceUseAsciiStringPattern ToManaged() => new SliceUseAsciiStringPattern(sourceNative.Data, sourceNative.Len);
            public void Free() { }
        }
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct SliceVec : IEnumerable<Vec>, IDisposable
    {
        Vec[] _managed;
        IntPtr _data;
        ulong _len;
        bool _wePinned;

        public int Count => _managed?.Length ?? (int)_len;

        public unsafe ReadOnlySpan<Vec> ReadOnlySpan
        {
            get
            {
                if (_managed is not null)
                {
                    return new ReadOnlySpan<Vec>(_managed);
                }
                return new ReadOnlySpan<Vec>(_data.ToPointer(), (int)_len);
            }
        }

        public unsafe Vec this[int i]
        {
            get
            {
                if (i >= Count) throw new IndexOutOfRangeException();
                if (_managed is not null)
                {
                    return _managed[i];
                }
                return Unsafe.Read<Vec>((void*)IntPtr.Add(_data, i * Unsafe.SizeOf<Vec>()));
            }
        }

        public SliceVec(GCHandle handle, ulong count)
        {
            _data = handle.AddrOfPinnedObject();
            _len = count;
        }

        public SliceVec(IntPtr handle, ulong count)
        {
            _data = handle;
            _len = count;
        }

        public SliceVec(Vec[] managed)
        {
            _managed = managed;
            _data = GCHandle.Alloc(managed, GCHandleType.Pinned).AddrOfPinnedObject();
            _len = (ulong) managed.Length;
            _wePinned = true;
        }

        public IEnumerator<Vec> GetEnumerator()
        {
            for (var i = 0; i < Count; ++i)
            {
                yield return this[i];
            }
        }

        IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();

        public void Dispose()
        {
            if (_wePinned && _data != IntPtr.Zero)
            {
                Marshal.FreeHGlobal(_data);
                _data = IntPtr.Zero;
            }
            _managed = null;
        }

        [CustomMarshaller(typeof(SliceVec), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            public IntPtr Data;
            public ulong Len;

            public SliceVec Managed()
            {
                return new SliceVec(Data, Len);
            }
        }

        public ref struct Marshaller
        {
            private SliceVec managed;
            private Unmanaged native;
            private Unmanaged sourceNative;
            private GCHandle? pinned;
            private SliceVec marshalled;

            public void FromManaged(SliceVec managed) { this.managed = managed; }
            public Unmanaged ToUnmanaged() => new Unmanaged { Data = managed._data, Len = managed._len };
            public void FromUnmanaged(Unmanaged unmanaged) { sourceNative = unmanaged; }
            public unsafe SliceVec ToManaged() => new SliceVec(sourceNative.Data, sourceNative.Len);
            public void Free() { }
        }
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct SliceVec3f32 : IEnumerable<Vec3f32>, IDisposable
    {
        Vec3f32[] _managed;
        IntPtr _data;
        ulong _len;
        bool _wePinned;

        public int Count => _managed?.Length ?? (int)_len;

        public unsafe ReadOnlySpan<Vec3f32> ReadOnlySpan
        {
            get
            {
                if (_managed is not null)
                {
                    return new ReadOnlySpan<Vec3f32>(_managed);
                }
                return new ReadOnlySpan<Vec3f32>(_data.ToPointer(), (int)_len);
            }
        }

        public unsafe Vec3f32 this[int i]
        {
            get
            {
                if (i >= Count) throw new IndexOutOfRangeException();
                if (_managed is not null)
                {
                    return _managed[i];
                }
                return Unsafe.Read<Vec3f32>((void*)IntPtr.Add(_data, i * Unsafe.SizeOf<Vec3f32>()));
            }
        }

        public SliceVec3f32(GCHandle handle, ulong count)
        {
            _data = handle.AddrOfPinnedObject();
            _len = count;
        }

        public SliceVec3f32(IntPtr handle, ulong count)
        {
            _data = handle;
            _len = count;
        }

        public SliceVec3f32(Vec3f32[] managed)
        {
            _managed = managed;
            _data = GCHandle.Alloc(managed, GCHandleType.Pinned).AddrOfPinnedObject();
            _len = (ulong) managed.Length;
            _wePinned = true;
        }

        public IEnumerator<Vec3f32> GetEnumerator()
        {
            for (var i = 0; i < Count; ++i)
            {
                yield return this[i];
            }
        }

        IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();

        public void Dispose()
        {
            if (_wePinned && _data != IntPtr.Zero)
            {
                Marshal.FreeHGlobal(_data);
                _data = IntPtr.Zero;
            }
            _managed = null;
        }

        [CustomMarshaller(typeof(SliceVec3f32), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            public IntPtr Data;
            public ulong Len;

            public SliceVec3f32 Managed()
            {
                return new SliceVec3f32(Data, Len);
            }
        }

        public ref struct Marshaller
        {
            private SliceVec3f32 managed;
            private Unmanaged native;
            private Unmanaged sourceNative;
            private GCHandle? pinned;
            private SliceVec3f32 marshalled;

            public void FromManaged(SliceVec3f32 managed) { this.managed = managed; }
            public Unmanaged ToUnmanaged() => new Unmanaged { Data = managed._data, Len = managed._len };
            public void FromUnmanaged(Unmanaged unmanaged) { sourceNative = unmanaged; }
            public unsafe SliceVec3f32 ToManaged() => new SliceVec3f32(sourceNative.Data, sourceNative.Len);
            public void Free() { }
        }
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct SliceMutCharArray : IEnumerable<CharArray>, IDisposable
    {
        CharArray[] _managed;
        IntPtr _data;
        ulong _len;
        bool _wePinned;

        public int Count => _managed?.Length ?? (int)_len;

        public unsafe ReadOnlySpan<CharArray> ReadOnlySpan
        {
            get
            {
                if (_managed is not null)
                {
                    return new ReadOnlySpan<CharArray>(_managed);
                }
                return new ReadOnlySpan<CharArray>(_data.ToPointer(), (int)_len);
            }
        }

        public unsafe CharArray this[int i]
        {
            get
            {
                if (i >= Count) throw new IndexOutOfRangeException();
                if (_managed is not null)
                {
                    return _managed[i];
                }
                return Unsafe.Read<CharArray>((void*)IntPtr.Add(_data, i * Unsafe.SizeOf<CharArray>()));
            }
            set
            {
                if (i >= Count) throw new IndexOutOfRangeException();
                var d = (CharArray*) _data.ToPointer();
                d[i] = value;
            }
        }

        public SliceMutCharArray(GCHandle handle, ulong count)
        {
            _data = handle.AddrOfPinnedObject();
            _len = count;
        }

        public SliceMutCharArray(IntPtr handle, ulong count)
        {
            _data = handle;
            _len = count;
        }

        public SliceMutCharArray(CharArray[] managed)
        {
            _managed = managed;
            _data = GCHandle.Alloc(managed, GCHandleType.Pinned).AddrOfPinnedObject();
            _len = (ulong) managed.Length;
            _wePinned = true;
        }

        public IEnumerator<CharArray> GetEnumerator()
        {
            for (var i = 0; i < Count; ++i)
            {
                yield return this[i];
            }
        }

        IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();

        public void Dispose()
        {
            if (_wePinned && _data != IntPtr.Zero)
            {
                Marshal.FreeHGlobal(_data);
                _data = IntPtr.Zero;
            }
            _managed = null;
        }

        [CustomMarshaller(typeof(SliceMutCharArray), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            public IntPtr Data;
            public ulong Len;

            public SliceMutCharArray Managed()
            {
                return new SliceMutCharArray(Data, Len);
            }
        }

        public ref struct Marshaller
        {
            private SliceMutCharArray managed;
            private Unmanaged native;
            private Unmanaged sourceNative;
            private GCHandle? pinned;
            private SliceMutCharArray marshalled;

            public void FromManaged(SliceMutCharArray managed) { this.managed = managed; }
            public Unmanaged ToUnmanaged() => new Unmanaged { Data = managed._data, Len = managed._len };
            public void FromUnmanaged(Unmanaged unmanaged) { sourceNative = unmanaged; }
            public unsafe SliceMutCharArray ToManaged() => new SliceMutCharArray(sourceNative.Data, sourceNative.Len);
            public void Free() { }
        }
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct SliceMutU32 : IEnumerable<uint>, IDisposable
    {
        uint[] _managed;
        IntPtr _data;
        ulong _len;
        bool _wePinned;

        public int Count => _managed?.Length ?? (int)_len;

        public unsafe ReadOnlySpan<uint> ReadOnlySpan
        {
            get
            {
                if (_managed is not null)
                {
                    return new ReadOnlySpan<uint>(_managed);
                }
                return new ReadOnlySpan<uint>(_data.ToPointer(), (int)_len);
            }
        }

        public unsafe uint this[int i]
        {
            get
            {
                if (i >= Count) throw new IndexOutOfRangeException();
                if (_managed is not null)
                {
                    return _managed[i];
                }
                return Unsafe.Read<uint>((void*)IntPtr.Add(_data, i * Unsafe.SizeOf<uint>()));
            }
            set
            {
                if (i >= Count) throw new IndexOutOfRangeException();
                var d = (uint*) _data.ToPointer();
                d[i] = value;
            }
        }

        public SliceMutU32(GCHandle handle, ulong count)
        {
            _data = handle.AddrOfPinnedObject();
            _len = count;
        }

        public SliceMutU32(IntPtr handle, ulong count)
        {
            _data = handle;
            _len = count;
        }

        public SliceMutU32(uint[] managed)
        {
            _managed = managed;
            _data = GCHandle.Alloc(managed, GCHandleType.Pinned).AddrOfPinnedObject();
            _len = (ulong) managed.Length;
            _wePinned = true;
        }

        public IEnumerator<uint> GetEnumerator()
        {
            for (var i = 0; i < Count; ++i)
            {
                yield return this[i];
            }
        }

        IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();

        public void Dispose()
        {
            if (_wePinned && _data != IntPtr.Zero)
            {
                Marshal.FreeHGlobal(_data);
                _data = IntPtr.Zero;
            }
            _managed = null;
        }

        [CustomMarshaller(typeof(SliceMutU32), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            public IntPtr Data;
            public ulong Len;

            public SliceMutU32 Managed()
            {
                return new SliceMutU32(Data, Len);
            }
        }

        public ref struct Marshaller
        {
            private SliceMutU32 managed;
            private Unmanaged native;
            private Unmanaged sourceNative;
            private GCHandle? pinned;
            private SliceMutU32 marshalled;

            public void FromManaged(SliceMutU32 managed) { this.managed = managed; }
            public Unmanaged ToUnmanaged() => new Unmanaged { Data = managed._data, Len = managed._len };
            public void FromUnmanaged(Unmanaged unmanaged) { sourceNative = unmanaged; }
            public unsafe SliceMutU32 ToManaged() => new SliceMutU32(sourceNative.Data, sourceNative.Len);
            public void Free() { }
        }
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct SliceMutU8 : IEnumerable<byte>, IDisposable
    {
        byte[] _managed;
        IntPtr _data;
        ulong _len;
        bool _wePinned;

        public int Count => _managed?.Length ?? (int)_len;

        public unsafe ReadOnlySpan<byte> ReadOnlySpan
        {
            get
            {
                if (_managed is not null)
                {
                    return new ReadOnlySpan<byte>(_managed);
                }
                return new ReadOnlySpan<byte>(_data.ToPointer(), (int)_len);
            }
        }

        public unsafe byte this[int i]
        {
            get
            {
                if (i >= Count) throw new IndexOutOfRangeException();
                if (_managed is not null)
                {
                    return _managed[i];
                }
                return Unsafe.Read<byte>((void*)IntPtr.Add(_data, i * Unsafe.SizeOf<byte>()));
            }
            set
            {
                if (i >= Count) throw new IndexOutOfRangeException();
                var d = (byte*) _data.ToPointer();
                d[i] = value;
            }
        }

        public SliceMutU8(GCHandle handle, ulong count)
        {
            _data = handle.AddrOfPinnedObject();
            _len = count;
        }

        public SliceMutU8(IntPtr handle, ulong count)
        {
            _data = handle;
            _len = count;
        }

        public SliceMutU8(byte[] managed)
        {
            _managed = managed;
            _data = GCHandle.Alloc(managed, GCHandleType.Pinned).AddrOfPinnedObject();
            _len = (ulong) managed.Length;
            _wePinned = true;
        }

        public IEnumerator<byte> GetEnumerator()
        {
            for (var i = 0; i < Count; ++i)
            {
                yield return this[i];
            }
        }

        IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();

        public void Dispose()
        {
            if (_wePinned && _data != IntPtr.Zero)
            {
                Marshal.FreeHGlobal(_data);
                _data = IntPtr.Zero;
            }
            _managed = null;
        }

        [CustomMarshaller(typeof(SliceMutU8), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            public IntPtr Data;
            public ulong Len;

            public SliceMutU8 Managed()
            {
                return new SliceMutU8(Data, Len);
            }
        }

        public ref struct Marshaller
        {
            private SliceMutU8 managed;
            private Unmanaged native;
            private Unmanaged sourceNative;
            private GCHandle? pinned;
            private SliceMutU8 marshalled;

            public void FromManaged(SliceMutU8 managed) { this.managed = managed; }
            public Unmanaged ToUnmanaged() => new Unmanaged { Data = managed._data, Len = managed._len };
            public void FromUnmanaged(Unmanaged unmanaged) { sourceNative = unmanaged; }
            public unsafe SliceMutU8 ToManaged() => new SliceMutU8(sourceNative.Data, sourceNative.Len);
            public void Free() { }
        }
    }

    [NativeMarshalling(typeof(MarshallerMeta))]
    public partial struct SliceMutVec : IEnumerable<Vec>, IDisposable
    {
        Vec[] _managed;
        IntPtr _data;
        ulong _len;
        bool _wePinned;

        public int Count => _managed?.Length ?? (int)_len;

        public unsafe ReadOnlySpan<Vec> ReadOnlySpan
        {
            get
            {
                if (_managed is not null)
                {
                    return new ReadOnlySpan<Vec>(_managed);
                }
                return new ReadOnlySpan<Vec>(_data.ToPointer(), (int)_len);
            }
        }

        public unsafe Vec this[int i]
        {
            get
            {
                if (i >= Count) throw new IndexOutOfRangeException();
                if (_managed is not null)
                {
                    return _managed[i];
                }
                return Unsafe.Read<Vec>((void*)IntPtr.Add(_data, i * Unsafe.SizeOf<Vec>()));
            }
            set
            {
                if (i >= Count) throw new IndexOutOfRangeException();
                var d = (Vec*) _data.ToPointer();
                d[i] = value;
            }
        }

        public SliceMutVec(GCHandle handle, ulong count)
        {
            _data = handle.AddrOfPinnedObject();
            _len = count;
        }

        public SliceMutVec(IntPtr handle, ulong count)
        {
            _data = handle;
            _len = count;
        }

        public SliceMutVec(Vec[] managed)
        {
            _managed = managed;
            _data = GCHandle.Alloc(managed, GCHandleType.Pinned).AddrOfPinnedObject();
            _len = (ulong) managed.Length;
            _wePinned = true;
        }

        public IEnumerator<Vec> GetEnumerator()
        {
            for (var i = 0; i < Count; ++i)
            {
                yield return this[i];
            }
        }

        IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();

        public void Dispose()
        {
            if (_wePinned && _data != IntPtr.Zero)
            {
                Marshal.FreeHGlobal(_data);
                _data = IntPtr.Zero;
            }
            _managed = null;
        }

        [CustomMarshaller(typeof(SliceMutVec), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            public IntPtr Data;
            public ulong Len;

            public SliceMutVec Managed()
            {
                return new SliceMutVec(Data, Len);
            }
        }

        public ref struct Marshaller
        {
            private SliceMutVec managed;
            private Unmanaged native;
            private Unmanaged sourceNative;
            private GCHandle? pinned;
            private SliceMutVec marshalled;

            public void FromManaged(SliceMutVec managed) { this.managed = managed; }
            public Unmanaged ToUnmanaged() => new Unmanaged { Data = managed._data, Len = managed._len };
            public void FromUnmanaged(Unmanaged unmanaged) { sourceNative = unmanaged; }
            public unsafe SliceMutVec ToManaged() => new SliceMutVec(sourceNative.Data, sourceNative.Len);
            public void Free() { }
        }
    }

    ///Option type containing boolean flag and maybe valid data.
    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct OptionInner
    {
        ///Element that is maybe valid.
        Inner t;
        ///Byte where `1` means element `t` is valid.
        byte is_some;
    }

    public partial struct OptionInner
    {
        public static OptionInner FromNullable(Inner? nullable)
        {
            var result = new OptionInner();
            if (nullable.HasValue)
            {
                result.is_some = 1;
                result.t = nullable.Value;
            }

            return result;
        }

        public Inner? ToNullable()
        {
            return this.is_some == 1 ? this.t : (Inner?)null;
        }
    }


    ///Option type containing boolean flag and maybe valid data.
    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct OptionVec
    {
        ///Element that is maybe valid.
        Vec t;
        ///Byte where `1` means element `t` is valid.
        byte is_some;
    }

    public partial struct OptionVec
    {
        public static OptionVec FromNullable(Vec? nullable)
        {
            var result = new OptionVec();
            if (nullable.HasValue)
            {
                result.is_some = 1;
                result.t = nullable.Value;
            }

            return result;
        }

        public Vec? ToNullable()
        {
            return this.is_some == 1 ? this.t : (Vec?)null;
        }
    }


    ///Result that contains value or an error.
    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct ResultU64
    {
        ///Element if err is `Ok`.
        ulong t;
        ///Error value.
        FFIError err;
    }

    public partial struct ResultU64
    {
        public ulong Ok()
        {
            if (err == 0)
            {
                return t;
            }
            throw new InteropException<FFIError>(err);
        }

    }


    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct Bool
    {
        byte value;
    }

    public partial struct Bool
    {
        public static readonly Bool True = new Bool { value =  1 };
        public static readonly Bool False = new Bool { value =  0 };
        public Bool(bool b)
        {
            value = (byte) (b ? 1 : 0);
        }
        public bool Is => value == 1;
    }


    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void CallbackCharArray2Native(CharArray value, IntPtr callback_data);
    public delegate void CallbackCharArray2Delegate(CharArray value);

    [NativeMarshalling(typeof(MarshallerMeta))]
    public struct CallbackCharArray2 : IDisposable
    {
        private CallbackCharArray2Delegate _callbackUser;
        private IntPtr _callbackNative;

        public CallbackCharArray2() { }

        public CallbackCharArray2(CallbackCharArray2Delegate callbackUser)
        {
            _callbackUser = callbackUser;
            _callbackNative = Marshal.GetFunctionPointerForDelegate(new CallbackCharArray2Native(Call));
        }

        public void Call(CharArray value, IntPtr callback_data)
        {
            _callbackUser(value);
        }

        public void Dispose()
        {
            if (_callbackNative == IntPtr.Zero) return;
            Marshal.FreeHGlobal(_callbackNative);
            _callbackNative = IntPtr.Zero;
        }


        [CustomMarshaller(typeof(CallbackCharArray2), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta {  }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            internal IntPtr Callback;
            internal IntPtr Data;
        }


        public ref struct Marshaller
        {
            private CallbackCharArray2 managed;
            private Unmanaged native;
            private Unmanaged sourceNative;
            private GCHandle? pinned;

            public void FromManaged(CallbackCharArray2 managed)
            {
                this.managed = managed;
            }

            public Unmanaged ToUnmanaged()
            {
                return new Unmanaged
                {
                    Callback = managed._callbackNative,
                    Data = IntPtr.Zero
                };
            }

            public void FromUnmanaged(Unmanaged unmanaged)
            {
                sourceNative = unmanaged;
            }

            public CallbackCharArray2 ToManaged()
            {
                return new CallbackCharArray2
                {
                    _callbackNative = sourceNative.Callback,
                };
            }

            public void Free() { }
        }
    }


    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate byte CallbackFFISliceNative(SliceU8.Unmanaged slice, IntPtr callback_data);
    public delegate byte CallbackFFISliceDelegate(SliceU8 slice);

    [NativeMarshalling(typeof(MarshallerMeta))]
    public struct CallbackFFISlice : IDisposable
    {
        private CallbackFFISliceDelegate _callbackUser;
        private IntPtr _callbackNative;

        public CallbackFFISlice() { }

        public CallbackFFISlice(CallbackFFISliceDelegate callbackUser)
        {
            _callbackUser = callbackUser;
            _callbackNative = Marshal.GetFunctionPointerForDelegate(new CallbackFFISliceNative(Call));
        }

        public byte Call(SliceU8.Unmanaged slice, IntPtr callback_data)
        {
            return _callbackUser(slice.Managed());
        }

        public void Dispose()
        {
            if (_callbackNative == IntPtr.Zero) return;
            Marshal.FreeHGlobal(_callbackNative);
            _callbackNative = IntPtr.Zero;
        }


        [CustomMarshaller(typeof(CallbackFFISlice), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta {  }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            internal IntPtr Callback;
            internal IntPtr Data;
        }


        public ref struct Marshaller
        {
            private CallbackFFISlice managed;
            private Unmanaged native;
            private Unmanaged sourceNative;
            private GCHandle? pinned;

            public void FromManaged(CallbackFFISlice managed)
            {
                this.managed = managed;
            }

            public Unmanaged ToUnmanaged()
            {
                return new Unmanaged
                {
                    Callback = managed._callbackNative,
                    Data = IntPtr.Zero
                };
            }

            public void FromUnmanaged(Unmanaged unmanaged)
            {
                sourceNative = unmanaged;
            }

            public CallbackFFISlice ToManaged()
            {
                return new CallbackFFISlice
                {
                    _callbackNative = sourceNative.Callback,
                };
            }

            public void Free() { }
        }
    }


    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate Vec3f32 CallbackHugeVecSliceNative(SliceVec3f32.Unmanaged slice, IntPtr callback_data);
    public delegate Vec3f32 CallbackHugeVecSliceDelegate(SliceVec3f32 slice);

    [NativeMarshalling(typeof(MarshallerMeta))]
    public struct CallbackHugeVecSlice : IDisposable
    {
        private CallbackHugeVecSliceDelegate _callbackUser;
        private IntPtr _callbackNative;

        public CallbackHugeVecSlice() { }

        public CallbackHugeVecSlice(CallbackHugeVecSliceDelegate callbackUser)
        {
            _callbackUser = callbackUser;
            _callbackNative = Marshal.GetFunctionPointerForDelegate(new CallbackHugeVecSliceNative(Call));
        }

        public Vec3f32 Call(SliceVec3f32.Unmanaged slice, IntPtr callback_data)
        {
            return _callbackUser(slice.Managed());
        }

        public void Dispose()
        {
            if (_callbackNative == IntPtr.Zero) return;
            Marshal.FreeHGlobal(_callbackNative);
            _callbackNative = IntPtr.Zero;
        }


        [CustomMarshaller(typeof(CallbackHugeVecSlice), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta {  }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            internal IntPtr Callback;
            internal IntPtr Data;
        }


        public ref struct Marshaller
        {
            private CallbackHugeVecSlice managed;
            private Unmanaged native;
            private Unmanaged sourceNative;
            private GCHandle? pinned;

            public void FromManaged(CallbackHugeVecSlice managed)
            {
                this.managed = managed;
            }

            public Unmanaged ToUnmanaged()
            {
                return new Unmanaged
                {
                    Callback = managed._callbackNative,
                    Data = IntPtr.Zero
                };
            }

            public void FromUnmanaged(Unmanaged unmanaged)
            {
                sourceNative = unmanaged;
            }

            public CallbackHugeVecSlice ToManaged()
            {
                return new CallbackHugeVecSlice
                {
                    _callbackNative = sourceNative.Callback,
                };
            }

            public void Free() { }
        }
    }


    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void CallbackSliceMutNative(SliceMutU8.Unmanaged slice, IntPtr callback_data);
    public delegate void CallbackSliceMutDelegate(SliceMutU8 slice);

    [NativeMarshalling(typeof(MarshallerMeta))]
    public struct CallbackSliceMut : IDisposable
    {
        private CallbackSliceMutDelegate _callbackUser;
        private IntPtr _callbackNative;

        public CallbackSliceMut() { }

        public CallbackSliceMut(CallbackSliceMutDelegate callbackUser)
        {
            _callbackUser = callbackUser;
            _callbackNative = Marshal.GetFunctionPointerForDelegate(new CallbackSliceMutNative(Call));
        }

        public void Call(SliceMutU8.Unmanaged slice, IntPtr callback_data)
        {
            _callbackUser(slice.Managed());
        }

        public void Dispose()
        {
            if (_callbackNative == IntPtr.Zero) return;
            Marshal.FreeHGlobal(_callbackNative);
            _callbackNative = IntPtr.Zero;
        }


        [CustomMarshaller(typeof(CallbackSliceMut), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta {  }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            internal IntPtr Callback;
            internal IntPtr Data;
        }


        public ref struct Marshaller
        {
            private CallbackSliceMut managed;
            private Unmanaged native;
            private Unmanaged sourceNative;
            private GCHandle? pinned;

            public void FromManaged(CallbackSliceMut managed)
            {
                this.managed = managed;
            }

            public Unmanaged ToUnmanaged()
            {
                return new Unmanaged
                {
                    Callback = managed._callbackNative,
                    Data = IntPtr.Zero
                };
            }

            public void FromUnmanaged(Unmanaged unmanaged)
            {
                sourceNative = unmanaged;
            }

            public CallbackSliceMut ToManaged()
            {
                return new CallbackSliceMut
                {
                    _callbackNative = sourceNative.Callback,
                };
            }

            public void Free() { }
        }
    }


    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate byte CallbackU8Native(byte value, IntPtr callback_data);
    public delegate byte CallbackU8Delegate(byte value);

    [NativeMarshalling(typeof(MarshallerMeta))]
    public struct CallbackU8 : IDisposable
    {
        private CallbackU8Delegate _callbackUser;
        private IntPtr _callbackNative;

        public CallbackU8() { }

        public CallbackU8(CallbackU8Delegate callbackUser)
        {
            _callbackUser = callbackUser;
            _callbackNative = Marshal.GetFunctionPointerForDelegate(new CallbackU8Native(Call));
        }

        public byte Call(byte value, IntPtr callback_data)
        {
            return _callbackUser(value);
        }

        public void Dispose()
        {
            if (_callbackNative == IntPtr.Zero) return;
            Marshal.FreeHGlobal(_callbackNative);
            _callbackNative = IntPtr.Zero;
        }


        [CustomMarshaller(typeof(CallbackU8), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta {  }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            internal IntPtr Callback;
            internal IntPtr Data;
        }


        public ref struct Marshaller
        {
            private CallbackU8 managed;
            private Unmanaged native;
            private Unmanaged sourceNative;
            private GCHandle? pinned;

            public void FromManaged(CallbackU8 managed)
            {
                this.managed = managed;
            }

            public Unmanaged ToUnmanaged()
            {
                return new Unmanaged
                {
                    Callback = managed._callbackNative,
                    Data = IntPtr.Zero
                };
            }

            public void FromUnmanaged(Unmanaged unmanaged)
            {
                sourceNative = unmanaged;
            }

            public CallbackU8 ToManaged()
            {
                return new CallbackU8
                {
                    _callbackNative = sourceNative.Callback,
                };
            }

            public void Free() { }
        }
    }


    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate uint MyCallbackNative(uint value, IntPtr callback_data);
    public delegate uint MyCallbackDelegate(uint value);

    [NativeMarshalling(typeof(MarshallerMeta))]
    public struct MyCallback : IDisposable
    {
        private MyCallbackDelegate _callbackUser;
        private IntPtr _callbackNative;

        public MyCallback() { }

        public MyCallback(MyCallbackDelegate callbackUser)
        {
            _callbackUser = callbackUser;
            _callbackNative = Marshal.GetFunctionPointerForDelegate(new MyCallbackNative(Call));
        }

        public uint Call(uint value, IntPtr callback_data)
        {
            return _callbackUser(value);
        }

        public void Dispose()
        {
            if (_callbackNative == IntPtr.Zero) return;
            Marshal.FreeHGlobal(_callbackNative);
            _callbackNative = IntPtr.Zero;
        }


        [CustomMarshaller(typeof(MyCallback), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta {  }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            internal IntPtr Callback;
            internal IntPtr Data;
        }


        public ref struct Marshaller
        {
            private MyCallback managed;
            private Unmanaged native;
            private Unmanaged sourceNative;
            private GCHandle? pinned;

            public void FromManaged(MyCallback managed)
            {
                this.managed = managed;
            }

            public Unmanaged ToUnmanaged()
            {
                return new Unmanaged
                {
                    Callback = managed._callbackNative,
                    Data = IntPtr.Zero
                };
            }

            public void FromUnmanaged(Unmanaged unmanaged)
            {
                sourceNative = unmanaged;
            }

            public MyCallback ToManaged()
            {
                return new MyCallback
                {
                    _callbackNative = sourceNative.Callback,
                };
            }

            public void Free() { }
        }
    }


    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate uint MyCallbackNamespacedNative(uint value, IntPtr callback_data);
    public delegate uint MyCallbackNamespacedDelegate(uint value);

    [NativeMarshalling(typeof(MarshallerMeta))]
    public struct MyCallbackNamespaced : IDisposable
    {
        private MyCallbackNamespacedDelegate _callbackUser;
        private IntPtr _callbackNative;

        public MyCallbackNamespaced() { }

        public MyCallbackNamespaced(MyCallbackNamespacedDelegate callbackUser)
        {
            _callbackUser = callbackUser;
            _callbackNative = Marshal.GetFunctionPointerForDelegate(new MyCallbackNamespacedNative(Call));
        }

        public uint Call(uint value, IntPtr callback_data)
        {
            return _callbackUser(value);
        }

        public void Dispose()
        {
            if (_callbackNative == IntPtr.Zero) return;
            Marshal.FreeHGlobal(_callbackNative);
            _callbackNative = IntPtr.Zero;
        }


        [CustomMarshaller(typeof(MyCallbackNamespaced), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta {  }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            internal IntPtr Callback;
            internal IntPtr Data;
        }


        public ref struct Marshaller
        {
            private MyCallbackNamespaced managed;
            private Unmanaged native;
            private Unmanaged sourceNative;
            private GCHandle? pinned;

            public void FromManaged(MyCallbackNamespaced managed)
            {
                this.managed = managed;
            }

            public Unmanaged ToUnmanaged()
            {
                return new Unmanaged
                {
                    Callback = managed._callbackNative,
                    Data = IntPtr.Zero
                };
            }

            public void FromUnmanaged(Unmanaged unmanaged)
            {
                sourceNative = unmanaged;
            }

            public MyCallbackNamespaced ToManaged()
            {
                return new MyCallbackNamespaced
                {
                    _callbackNative = sourceNative.Callback,
                };
            }

            public void Free() { }
        }
    }


    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void MyCallbackVoidNative(IntPtr ptr, IntPtr callback_data);
    public delegate void MyCallbackVoidDelegate(IntPtr ptr);

    [NativeMarshalling(typeof(MarshallerMeta))]
    public struct MyCallbackVoid : IDisposable
    {
        private MyCallbackVoidDelegate _callbackUser;
        private IntPtr _callbackNative;

        public MyCallbackVoid() { }

        public MyCallbackVoid(MyCallbackVoidDelegate callbackUser)
        {
            _callbackUser = callbackUser;
            _callbackNative = Marshal.GetFunctionPointerForDelegate(new MyCallbackVoidNative(Call));
        }

        public void Call(IntPtr ptr, IntPtr callback_data)
        {
            _callbackUser(ptr);
        }

        public void Dispose()
        {
            if (_callbackNative == IntPtr.Zero) return;
            Marshal.FreeHGlobal(_callbackNative);
            _callbackNative = IntPtr.Zero;
        }


        [CustomMarshaller(typeof(MyCallbackVoid), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta {  }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            internal IntPtr Callback;
            internal IntPtr Data;
        }


        public ref struct Marshaller
        {
            private MyCallbackVoid managed;
            private Unmanaged native;
            private Unmanaged sourceNative;
            private GCHandle? pinned;

            public void FromManaged(MyCallbackVoid managed)
            {
                this.managed = managed;
            }

            public Unmanaged ToUnmanaged()
            {
                return new Unmanaged
                {
                    Callback = managed._callbackNative,
                    Data = IntPtr.Zero
                };
            }

            public void FromUnmanaged(Unmanaged unmanaged)
            {
                sourceNative = unmanaged;
            }

            public MyCallbackVoid ToManaged()
            {
                return new MyCallbackVoid
                {
                    _callbackNative = sourceNative.Callback,
                };
            }

            public void Free() { }
        }
    }


    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void SumDelegate1Native(IntPtr callback_data);
    public delegate void SumDelegate1Delegate();

    [NativeMarshalling(typeof(MarshallerMeta))]
    public struct SumDelegate1 : IDisposable
    {
        private SumDelegate1Delegate _callbackUser;
        private IntPtr _callbackNative;

        public SumDelegate1() { }

        public SumDelegate1(SumDelegate1Delegate callbackUser)
        {
            _callbackUser = callbackUser;
            _callbackNative = Marshal.GetFunctionPointerForDelegate(new SumDelegate1Native(Call));
        }

        public void Call(IntPtr callback_data)
        {
            _callbackUser();
        }

        public void Dispose()
        {
            if (_callbackNative == IntPtr.Zero) return;
            Marshal.FreeHGlobal(_callbackNative);
            _callbackNative = IntPtr.Zero;
        }


        [CustomMarshaller(typeof(SumDelegate1), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta {  }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            internal IntPtr Callback;
            internal IntPtr Data;
        }


        public ref struct Marshaller
        {
            private SumDelegate1 managed;
            private Unmanaged native;
            private Unmanaged sourceNative;
            private GCHandle? pinned;

            public void FromManaged(SumDelegate1 managed)
            {
                this.managed = managed;
            }

            public Unmanaged ToUnmanaged()
            {
                return new Unmanaged
                {
                    Callback = managed._callbackNative,
                    Data = IntPtr.Zero
                };
            }

            public void FromUnmanaged(Unmanaged unmanaged)
            {
                sourceNative = unmanaged;
            }

            public SumDelegate1 ToManaged()
            {
                return new SumDelegate1
                {
                    _callbackNative = sourceNative.Callback,
                };
            }

            public void Free() { }
        }
    }


    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate int SumDelegate2Native(int x, int y, IntPtr callback_data);
    public delegate int SumDelegate2Delegate(int x, int y);

    [NativeMarshalling(typeof(MarshallerMeta))]
    public struct SumDelegate2 : IDisposable
    {
        private SumDelegate2Delegate _callbackUser;
        private IntPtr _callbackNative;

        public SumDelegate2() { }

        public SumDelegate2(SumDelegate2Delegate callbackUser)
        {
            _callbackUser = callbackUser;
            _callbackNative = Marshal.GetFunctionPointerForDelegate(new SumDelegate2Native(Call));
        }

        public int Call(int x, int y, IntPtr callback_data)
        {
            return _callbackUser(x, y);
        }

        public void Dispose()
        {
            if (_callbackNative == IntPtr.Zero) return;
            Marshal.FreeHGlobal(_callbackNative);
            _callbackNative = IntPtr.Zero;
        }


        [CustomMarshaller(typeof(SumDelegate2), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta {  }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            internal IntPtr Callback;
            internal IntPtr Data;
        }


        public ref struct Marshaller
        {
            private SumDelegate2 managed;
            private Unmanaged native;
            private Unmanaged sourceNative;
            private GCHandle? pinned;

            public void FromManaged(SumDelegate2 managed)
            {
                this.managed = managed;
            }

            public Unmanaged ToUnmanaged()
            {
                return new Unmanaged
                {
                    Callback = managed._callbackNative,
                    Data = IntPtr.Zero
                };
            }

            public void FromUnmanaged(Unmanaged unmanaged)
            {
                sourceNative = unmanaged;
            }

            public SumDelegate2 ToManaged()
            {
                return new SumDelegate2
                {
                    _callbackNative = sourceNative.Callback,
                };
            }

            public void Free() { }
        }
    }


    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate FFIError SumDelegateReturnNative(int x, int y, IntPtr callback_data);
    public delegate FFIError SumDelegateReturnDelegate(int x, int y);

    [NativeMarshalling(typeof(MarshallerMeta))]
    public struct SumDelegateReturn : IDisposable
    {
        private SumDelegateReturnDelegate _callbackUser;
        private IntPtr _callbackNative;

        public SumDelegateReturn() { }

        public SumDelegateReturn(SumDelegateReturnDelegate callbackUser)
        {
            _callbackUser = callbackUser;
            _callbackNative = Marshal.GetFunctionPointerForDelegate(new SumDelegateReturnNative(Call));
        }

        public FFIError Call(int x, int y, IntPtr callback_data)
        {
            return _callbackUser(x, y);
        }

        public void Dispose()
        {
            if (_callbackNative == IntPtr.Zero) return;
            Marshal.FreeHGlobal(_callbackNative);
            _callbackNative = IntPtr.Zero;
        }


        [CustomMarshaller(typeof(SumDelegateReturn), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta {  }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            internal IntPtr Callback;
            internal IntPtr Data;
        }


        public ref struct Marshaller
        {
            private SumDelegateReturn managed;
            private Unmanaged native;
            private Unmanaged sourceNative;
            private GCHandle? pinned;

            public void FromManaged(SumDelegateReturn managed)
            {
                this.managed = managed;
            }

            public Unmanaged ToUnmanaged()
            {
                return new Unmanaged
                {
                    Callback = managed._callbackNative,
                    Data = IntPtr.Zero
                };
            }

            public void FromUnmanaged(Unmanaged unmanaged)
            {
                sourceNative = unmanaged;
            }

            public SumDelegateReturn ToManaged()
            {
                return new SumDelegateReturn
                {
                    _callbackNative = sourceNative.Callback,
                };
            }

            public void Free() { }
        }
    }


    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void SumDelegateReturn2Native(int x, int y, IntPtr callback_data);
    public delegate void SumDelegateReturn2Delegate(int x, int y);

    [NativeMarshalling(typeof(MarshallerMeta))]
    public struct SumDelegateReturn2 : IDisposable
    {
        private SumDelegateReturn2Delegate _callbackUser;
        private IntPtr _callbackNative;

        public SumDelegateReturn2() { }

        public SumDelegateReturn2(SumDelegateReturn2Delegate callbackUser)
        {
            _callbackUser = callbackUser;
            _callbackNative = Marshal.GetFunctionPointerForDelegate(new SumDelegateReturn2Native(Call));
        }

        public void Call(int x, int y, IntPtr callback_data)
        {
            _callbackUser(x, y);
        }

        public void Dispose()
        {
            if (_callbackNative == IntPtr.Zero) return;
            Marshal.FreeHGlobal(_callbackNative);
            _callbackNative = IntPtr.Zero;
        }


        [CustomMarshaller(typeof(SumDelegateReturn2), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta {  }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            internal IntPtr Callback;
            internal IntPtr Data;
        }


        public ref struct Marshaller
        {
            private SumDelegateReturn2 managed;
            private Unmanaged native;
            private Unmanaged sourceNative;
            private GCHandle? pinned;

            public void FromManaged(SumDelegateReturn2 managed)
            {
                this.managed = managed;
            }

            public Unmanaged ToUnmanaged()
            {
                return new Unmanaged
                {
                    Callback = managed._callbackNative,
                    Data = IntPtr.Zero
                };
            }

            public void FromUnmanaged(Unmanaged unmanaged)
            {
                sourceNative = unmanaged;
            }

            public SumDelegateReturn2 ToManaged()
            {
                return new SumDelegateReturn2
                {
                    _callbackNative = sourceNative.Callback,
                };
            }

            public void Free() { }
        }
    }



    public partial class ServiceAsync : IDisposable
    {
        private IntPtr _context;

        private ServiceAsync() {}

        public static ServiceAsync New()
        {
            var self = new ServiceAsync();
            var rval = Interop.service_async_new(ref self._context);
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
            return self;
        }

        public void Dispose()
        {
            var rval = Interop.service_async_destroy(ref _context);
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
        }

        public Task<ResultU64> ReturnAfterMs(ulong x, ulong ms)
        {
            var cs = new TaskCompletionSource<ResultU64>();
            GCHandle pinned = default;
            var cb = new AsyncHelper((x) => {
                var rval = Marshal.PtrToStructure<ResultU64>(x);
                cs.SetResult(rval);
                pinned.Free();
            });
            pinned = GCHandle.Alloc(cb);
            var rval = Interop.service_async_return_after_ms(_context, x, ms, cb);
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
            return cs.Task;
        }

        public void Bad()
        {
            Interop.service_async_bad(_context);
        }

        public IntPtr Context => _context;
    }


    public partial class BasicService : IDisposable
    {
        private IntPtr _context;

        private BasicService() {}

        public static BasicService New()
        {
            var self = new BasicService();
            var rval = Interop.basic_service_new(ref self._context);
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
            return self;
        }

        public void Dispose()
        {
            var rval = Interop.basic_service_destroy(ref _context);
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
        }

        public IntPtr Context => _context;
    }


    /// Some struct we want to expose as a class.
    public partial class ServiceOnPanic : IDisposable
    {
        private IntPtr _context;

        private ServiceOnPanic() {}

        public static ServiceOnPanic New()
        {
            var self = new ServiceOnPanic();
            var rval = Interop.service_on_panic_new(ref self._context);
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
            return self;
        }

        public void Dispose()
        {
            var rval = Interop.service_on_panic_destroy(ref _context);
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
        }

        /// Methods returning a Result<(), _> are the default and do not
        /// need annotations.
        public void ReturnResult(uint anon1)
        {
            var rval = Interop.service_on_panic_return_result(_context, anon1);
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
        }

        /// Methods returning a value need an `on_panic` annotation.
        public uint ReturnDefaultValue(uint x)
        {
            return Interop.service_on_panic_return_default_value(_context, x);
        }

        /// This function has no panic safeguards. It will be a bit faster to
        /// call, but if it panics your host app will abort.
        public string ReturnUbOnPanic()
        {
            var s = Interop.service_on_panic_return_ub_on_panic(_context);
            return Marshal.PtrToStringAnsi(s);
        }

        public IntPtr Context => _context;
    }


    /// Some struct we want to expose as a class.
    public partial class ServiceCallbacks : IDisposable
    {
        private IntPtr _context;

        private ServiceCallbacks() {}

        public static ServiceCallbacks New()
        {
            var self = new ServiceCallbacks();
            var rval = Interop.service_callbacks_new(ref self._context);
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
            return self;
        }

        public void Dispose()
        {
            var rval = Interop.service_callbacks_destroy(ref _context);
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
        }

        public void CallbackSimple(MyCallback callback)
        {
            var rval = Interop.service_callbacks_callback_simple(_context, callback);
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
        }

        public void CallbackSimple(MyCallbackDelegate callback)
        {
            Interop.service_callbacks_callback_simple(_context, callback);
        }

        public void CallbackFfiReturn(SumDelegateReturn callback)
        {
            var rval = Interop.service_callbacks_callback_ffi_return(_context, callback);
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
        }

        public void CallbackFfiReturn(SumDelegateReturnDelegate callback)
        {
            Interop.service_callbacks_callback_ffi_return(_context, callback);
        }

        public void CallbackWithSlice(SumDelegateReturn callback, SliceI32 input)
        {
            var rval = Interop.service_callbacks_callback_with_slice(_context, callback, input);
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
        }

        public void CallbackWithSlice(SumDelegateReturnDelegate callback, ReadOnlySpan<int> input)
        {
            Interop.service_callbacks_callback_with_slice(_context, callback, input);
        }

        public void InvokeDelegates()
        {
            var rval = Interop.service_callbacks_invoke_delegates(_context);
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
        }

        public IntPtr Context => _context;
    }


    public partial class ServiceIgnoringMethods : IDisposable
    {
        private IntPtr _context;

        private ServiceIgnoringMethods() {}

        public static ServiceIgnoringMethods New()
        {
            var self = new ServiceIgnoringMethods();
            var rval = Interop.service_ignoring_methods_new(ref self._context);
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
            return self;
        }

        public void Dispose()
        {
            var rval = Interop.service_ignoring_methods_destroy(ref _context);
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
        }

        public IntPtr Context => _context;
    }


    /// Some struct we want to expose as a class.
    public partial class ServiceMultipleCtors : IDisposable
    {
        private IntPtr _context;

        private ServiceMultipleCtors() {}

        public static ServiceMultipleCtors NewWith(uint some_value)
        {
            var self = new ServiceMultipleCtors();
            var rval = Interop.service_multiple_ctors_new_with(ref self._context, some_value);
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
            return self;
        }

        public static ServiceMultipleCtors NewWithout()
        {
            var self = new ServiceMultipleCtors();
            var rval = Interop.service_multiple_ctors_new_without(ref self._context);
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
            return self;
        }

        public static ServiceMultipleCtors NewWithString([MarshalAs(UnmanagedType.LPStr)] string anon0)
        {
            var self = new ServiceMultipleCtors();
            var rval = Interop.service_multiple_ctors_new_with_string(ref self._context, anon0);
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
            return self;
        }

        public static ServiceMultipleCtors NewFailing(byte some_value)
        {
            var self = new ServiceMultipleCtors();
            var rval = Interop.service_multiple_ctors_new_failing(ref self._context, some_value);
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
            return self;
        }

        public void Dispose()
        {
            var rval = Interop.service_multiple_ctors_destroy(ref _context);
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
        }

        public IntPtr Context => _context;
    }


    /// Services can use lifetimes. However, they are more dangerous to use
    /// via FFI, since you will not get any help tracking lifetimes there.
    public partial class ServiceUsingLifetimes : IDisposable
    {
        private IntPtr _context;

        private ServiceUsingLifetimes() {}

        public static ServiceUsingLifetimes NewWith(ref uint some_value)
        {
            var self = new ServiceUsingLifetimes();
            var rval = Interop.service_using_lifetimes_new_with(ref self._context, ref some_value);
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
            return self;
        }

        public void Dispose()
        {
            var rval = Interop.service_using_lifetimes_destroy(ref _context);
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
        }

        public void Lifetime1(SliceBool slice)
        {
            Interop.service_using_lifetimes_lifetime_1(_context, slice);
        }

        public void Lifetime1(ReadOnlySpan<Bool> slice)
        {
            Interop.service_using_lifetimes_lifetime_1(_context, slice);
        }

        public void Lifetime2(SliceBool slice)
        {
            Interop.service_using_lifetimes_lifetime_2(_context, slice);
        }

        public void Lifetime2(ReadOnlySpan<Bool> slice)
        {
            Interop.service_using_lifetimes_lifetime_2(_context, slice);
        }

        public string ReturnStringAcceptSlice(SliceU8 anon1)
        {
            var s = Interop.service_using_lifetimes_return_string_accept_slice(_context, anon1);
            return Marshal.PtrToStringAnsi(s);
        }

        public string ReturnStringAcceptSlice(ReadOnlySpan<byte> anon1)
        {
            return Interop.service_using_lifetimes_return_string_accept_slice(_context, anon1);
        }

        public IntPtr Context => _context;
    }


    /// Some struct we want to expose as a class.
    public partial class ServiceVariousSlices : IDisposable
    {
        private IntPtr _context;

        private ServiceVariousSlices() {}

        public static ServiceVariousSlices New()
        {
            var self = new ServiceVariousSlices();
            var rval = Interop.service_various_slices_new(ref self._context);
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
            return self;
        }

        public void Dispose()
        {
            var rval = Interop.service_various_slices_destroy(ref _context);
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
        }

        public byte MutSelf(SliceU8 slice)
        {
            return Interop.service_various_slices_mut_self(_context, slice);
        }

        public byte MutSelf(ReadOnlySpan<byte> slice)
        {
            return Interop.service_various_slices_mut_self(_context, slice);
        }

        /// Single line.
        public void MutSelfVoid(SliceBool slice)
        {
            Interop.service_various_slices_mut_self_void(_context, slice);
        }

        /// Single line.
        public void MutSelfVoid(ReadOnlySpan<Bool> slice)
        {
            Interop.service_various_slices_mut_self_void(_context, slice);
        }

        public byte MutSelfRef(ref byte x, out byte y)
        {
            return Interop.service_various_slices_mut_self_ref(_context, ref x, out y);
        }

        public byte MutSelfRefSlice(ref byte x, out byte y, SliceU8 slice)
        {
            return Interop.service_various_slices_mut_self_ref_slice(_context, ref x, out y, slice);
        }

        public byte MutSelfRefSlice(ref byte x, out byte y, ReadOnlySpan<byte> slice)
        {
            return Interop.service_various_slices_mut_self_ref_slice(_context, ref x, out y, slice);
        }

        public byte MutSelfRefSliceLimited(ref byte x, out byte y, SliceU8 slice, SliceU8 slice2)
        {
            return Interop.service_various_slices_mut_self_ref_slice_limited(_context, ref x, out y, slice, slice2);
        }

        public byte MutSelfRefSliceLimited(ref byte x, out byte y, ReadOnlySpan<byte> slice, ReadOnlySpan<byte> slice2)
        {
            return Interop.service_various_slices_mut_self_ref_slice_limited(_context, ref x, out y, slice, slice2);
        }

        public void MutSelfFfiError(SliceMutU8 slice)
        {
            var rval = Interop.service_various_slices_mut_self_ffi_error(_context, slice);
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
        }

        public void MutSelfFfiError(Span<byte> slice)
        {
            Interop.service_various_slices_mut_self_ffi_error(_context, slice);
        }

        public void MutSelfNoError(SliceMutU8 slice)
        {
            var rval = Interop.service_various_slices_mut_self_no_error(_context, slice);
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
        }

        public void MutSelfNoError(Span<byte> slice)
        {
            Interop.service_various_slices_mut_self_no_error(_context, slice);
        }

        /// Warning, you _must_ discard the returned slice object before calling into this service
        /// again, as otherwise undefined behavior might happen.
        public SliceU32 ReturnSlice()
        {
            return Interop.service_various_slices_return_slice(_context);
        }

        /// Warning, you _must_ discard the returned slice object before calling into this service
        /// again, as otherwise undefined behavior might happen.
        public SliceMutU32 ReturnSliceMut()
        {
            return Interop.service_various_slices_return_slice_mut(_context);
        }

        public IntPtr Context => _context;
    }


    /// Some struct we want to expose as a class.
    public partial class ServiceStrings : IDisposable
    {
        private IntPtr _context;

        private ServiceStrings() {}

        public static ServiceStrings New()
        {
            var self = new ServiceStrings();
            var rval = Interop.service_strings_new(ref self._context);
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
            return self;
        }

        public void Dispose()
        {
            var rval = Interop.service_strings_destroy(ref _context);
            if (rval != FFIError.Ok)
            {
                throw new InteropException<FFIError>(rval);
            }
        }

        public void PassString([MarshalAs(UnmanagedType.LPStr)] string anon1)
        {
            Interop.service_strings_pass_string(_context, anon1);
        }

        public string ReturnString()
        {
            var s = Interop.service_strings_return_string(_context);
            return Marshal.PtrToStringAnsi(s);
        }

        public IntPtr Context => _context;
    }



    public class InteropException<T> : Exception
    {
        public T Error { get; private set; }

        public InteropException(T error): base($"Something went wrong: {error}")
        {
            Error = error;
        }
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void AsyncHelperNative(IntPtr data, IntPtr callback_data);
    public delegate void AsyncHelperDelegate(IntPtr data);

    [NativeMarshalling(typeof(MarshallerMeta))]
    public struct AsyncHelper : IDisposable
    {
        private AsyncHelperDelegate _callbackUser;
        private IntPtr _callbackNative;

        public AsyncHelper() { }

        public AsyncHelper(AsyncHelperDelegate callbackUser)
        {
            _callbackUser = callbackUser;
            _callbackNative = Marshal.GetFunctionPointerForDelegate(new AsyncHelperNative(Call));
        }

        public void Call(IntPtr data, IntPtr callback_data)
        {
            _callbackUser(data);
        }

        public void Dispose()
        {
            if (_callbackNative == IntPtr.Zero) return;
            Marshal.FreeHGlobal(_callbackNative);
            _callbackNative = IntPtr.Zero;
        }

        [CustomMarshaller(typeof(AsyncHelper), MarshalMode.Default, typeof(Marshaller))]
        private struct MarshallerMeta { }

        [StructLayout(LayoutKind.Sequential)]
        public struct Unmanaged
        {
            internal IntPtr Callback;
            internal IntPtr Data;
        }

        public ref struct Marshaller
        {
            private AsyncHelper managed;
            private Unmanaged native;
            private Unmanaged sourceNative;
            private GCHandle? pinned;

            public void FromManaged(AsyncHelper managed)
            {
                this.managed = managed;
            }

            public Unmanaged ToUnmanaged()
            {
                return new Unmanaged
                {
                    Callback = managed._callbackNative,
                    Data = IntPtr.Zero
                };
            }

            public void FromUnmanaged(Unmanaged unmanaged)
            {
                sourceNative = unmanaged;
            }

            public AsyncHelper ToManaged()
            {
                return new AsyncHelper
                {
                    _callbackNative = sourceNative.Callback,
                };
            }

            public void Free() { }
        }
    }
}
