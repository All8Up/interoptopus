// Automatically generated by Interoptopus.

#ifndef interoptopus_generated
#define interoptopus_generated

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>



const uint8_t U8 = 255;
const float F32_MIN_POSITIVE = 0.000000000000000000000000000000000000011754944;
const int32_t COMPUTED_I32 = -2147483647;

/// Documented enum.
typedef enum enumdocumented
    {
    /// Variant A.
    ENUMDOCUMENTED_A = 0,
    /// Variant B.
    ENUMDOCUMENTED_B = 1,
    /// Variant B.
    ENUMDOCUMENTED_C = 2,
    } enumdocumented;

typedef enum enumrenamed
    {
    ENUMRENAMED_X = 0,
    } enumrenamed;

typedef struct generic2u8 generic2u8;

typedef struct generic3 generic3;

typedef struct generic4 generic4;

/// Some struct we want to expose as a class.
typedef struct simpleservice simpleservice;

typedef struct simpleservicelifetime simpleservicelifetime;

typedef enum ffierror
    {
    FFIERROR_OK = 0,
    FFIERROR_NULL = 100,
    FFIERROR_PANIC = 200,
    FFIERROR_DELEGATE = 300,
    FFIERROR_FAIL = 400,
    } ffierror;

typedef struct booleanalignment
    {
    int32_t a;
    int16_t b;
    int16_t c;
    uint8_t d;
    uint8_t e;
    uint8_t f;
    uint8_t g;
    uint8_t h;
    uint8_t i;
    uint8_t j;
    uint8_t k;
    uint64_t id;
    bool is_valid;
    uint64_t datum;
    } booleanalignment;

typedef struct extratypef32
    {
    float x;
    } extratypef32;

typedef struct inner
    {
    float x;
    } inner;

typedef struct local
    {
    uint32_t x;
    } local;

typedef struct packed1
    {
    uint8_t x;
    uint16_t y;
    } packed1;

typedef struct packed2
    {
    uint16_t y;
    uint8_t x;
    } packed2;

typedef struct phantomu8
    {
    uint32_t x;
    } phantomu8;

/// Documented struct.
typedef struct structdocumented
    {
    /// Documented field.
    float x;
    } structdocumented;

typedef struct structrenamed
    {
    enumrenamed e;
    } structrenamed;

typedef struct tupled
    {
    uint8_t x0;
    } tupled;

typedef struct useasciistringpattern
    {
    const char* ascii_string;
    } useasciistringpattern;

typedef struct vec
    {
    double x;
    double z;
    } vec;

typedef struct vec1
    {
    float x;
    float y;
    } vec1;

typedef struct vec2
    {
    double x;
    double z;
    } vec2;

typedef struct vec3f32
    {
    float x;
    float y;
    float z;
    } vec3f32;

typedef struct visibility1
    {
    uint8_t pblc;
    uint8_t prvt;
    } visibility1;

typedef struct visibility2
    {
    uint8_t pblc1;
    uint8_t pblc2;
    } visibility2;

typedef struct weird1u32
    {
    uint32_t x;
    } weird1u32;

typedef uint8_t (*fptr_fn_u8_rval_u8)(uint8_t x0);

typedef uint8_t (*callbacku8)(uint8_t value);

typedef uint32_t (*mycallback)(uint32_t value);

typedef uint32_t (*mycallbacknamespaced)(uint32_t value);

typedef void (*sumdelegate1)();

typedef int32_t (*sumdelegate2)(int32_t x, int32_t y);

typedef ffierror (*sumdelegatereturn)(int32_t x, int32_t y);

typedef void (*sumdelegatereturn2)(int32_t x, int32_t y);

typedef struct array
    {
    uint8_t data[16];
    } array;

typedef struct container
    {
    local foreign;
    } container;

typedef struct genericu32
    {
    const uint32_t* x;
    } genericu32;

typedef struct genericu8
    {
    const uint8_t* x;
    } genericu8;

typedef struct weird2u8
    {
    uint8_t t;
    uint8_t a[5];
    const uint8_t* r;
    } weird2u8;

///A pointer to an array of data someone else owns which may not be modified.
typedef struct slicebool
    {
    ///Pointer to start of immutable data.
    const uint8_t* data;
    ///Number of elements.
    uint64_t len;
    } slicebool;

///A pointer to an array of data someone else owns which may not be modified.
typedef struct slicei32
    {
    ///Pointer to start of immutable data.
    const int32_t* data;
    ///Number of elements.
    uint64_t len;
    } slicei32;

///A pointer to an array of data someone else owns which may not be modified.
typedef struct sliceu32
    {
    ///Pointer to start of immutable data.
    const uint32_t* data;
    ///Number of elements.
    uint64_t len;
    } sliceu32;

///A pointer to an array of data someone else owns which may not be modified.
typedef struct sliceu8
    {
    ///Pointer to start of immutable data.
    const uint8_t* data;
    ///Number of elements.
    uint64_t len;
    } sliceu8;

///A pointer to an array of data someone else owns which may be modified.
typedef struct slicemutconstptri8
    {
    ///Pointer to start of mutable data.
    const const char** data;
    ///Number of elements.
    uint64_t len;
    } slicemutconstptri8;

///A pointer to an array of data someone else owns which may be modified.
typedef struct slicemutu32
    {
    ///Pointer to start of mutable data.
    const uint32_t* data;
    ///Number of elements.
    uint64_t len;
    } slicemutu32;

///A pointer to an array of data someone else owns which may be modified.
typedef struct slicemutu8
    {
    ///Pointer to start of mutable data.
    const uint8_t* data;
    ///Number of elements.
    uint64_t len;
    } slicemutu8;

///Option type containing boolean flag and maybe valid data.
typedef struct optioninner
    {
    ///Element that is maybe valid.
    inner t;
    ///Byte where `1` means element `t` is valid.
    uint8_t is_some;
    } optioninner;

///Option type containing boolean flag and maybe valid data.
typedef struct optionvec
    {
    ///Element that is maybe valid.
    vec t;
    ///Byte where `1` means element `t` is valid.
    uint8_t is_some;
    } optionvec;

typedef void (*mycallbackcontextual)(const void* context, uint32_t value);

typedef void (*mycallbackvoid)(const void* ptr);

typedef struct delegatecallbackmycallbackcontextual
    {
    mycallbackcontextual callback;
    const void* context;
    } delegatecallbackmycallbackcontextual;

///A pointer to an array of data someone else owns which may not be modified.
typedef struct sliceuseasciistringpattern
    {
    ///Pointer to start of immutable data.
    const useasciistringpattern* data;
    ///Number of elements.
    uint64_t len;
    } sliceuseasciistringpattern;

///A pointer to an array of data someone else owns which may not be modified.
typedef struct slicevec
    {
    ///Pointer to start of immutable data.
    const vec* data;
    ///Number of elements.
    uint64_t len;
    } slicevec;

///A pointer to an array of data someone else owns which may not be modified.
typedef struct slicevec3f32
    {
    ///Pointer to start of immutable data.
    const vec3f32* data;
    ///Number of elements.
    uint64_t len;
    } slicevec3f32;

///A pointer to an array of data someone else owns which may be modified.
typedef struct slicemutvec
    {
    ///Pointer to start of mutable data.
    const vec* data;
    ///Number of elements.
    uint64_t len;
    } slicemutvec;

typedef uint8_t (*callbackffislice)(sliceu8 slice);

typedef void (*callbackslicemut)(slicemutu8 slice);

typedef vec3f32 (*callbackhugevecslice)(slicevec3f32 slice);


typedef void (*primitive_void)();

typedef void (*primitive_void2)();

typedef bool (*primitive_bool)(bool);

typedef uint8_t (*primitive_u8)(uint8_t);

typedef uint16_t (*primitive_u16)(uint16_t);

typedef uint32_t (*primitive_u32)(uint32_t);

typedef uint64_t (*primitive_u64)(uint64_t);

typedef int8_t (*primitive_i8)(int8_t);

typedef int16_t (*primitive_i16)(int16_t);

typedef int32_t (*primitive_i32)(int32_t);

typedef int64_t (*primitive_i64)(int64_t);

typedef booleanalignment (*boolean_alignment)(booleanalignment);

typedef booleanalignment (*boolean_alignment2)(bool);

typedef packed2 (*packed_to_packed1)(packed1);

typedef int64_t (*many_args_5)(int64_t, int64_t, int64_t, int64_t, int64_t);

typedef int64_t (*many_args_10)(int64_t, int64_t, int64_t, int64_t, int64_t, int64_t, int64_t, int64_t, int64_t, int64_t);

typedef const int64_t* (*ptr)(const int64_t*);

/// # Safety
///
/// Parameter x must point to valid data.
typedef int64_t* (*ptr_mut)(int64_t*);

typedef const const int64_t** (*ptr_ptr)(const const int64_t**);

typedef const int64_t* (*ref_simple)(const int64_t*);

typedef int64_t* (*ref_mut_simple)(int64_t*);

typedef bool (*ref_option)(const int64_t*);

typedef bool (*ref_mut_option)(int64_t*);

typedef tupled (*call_tupled)(tupled);

typedef ffierror (*complex_args_1)(vec3f32, const tupled*);

typedef uint8_t (*callback)(fptr_fn_u8_rval_u8, uint8_t);

typedef uint32_t (*generic_1a)(genericu32, phantomu8);

typedef uint8_t (*generic_1b)(genericu8, phantomu8);

typedef uint8_t (*generic_1c)(const genericu8*, const genericu8*);

typedef uint8_t (*generic_2)(const generic2u8*);

typedef uint8_t (*generic_3)(const generic3*);

typedef uint8_t (*generic_4)(const generic4*);

typedef uint8_t (*array_1)(array);

/// This function has documentation.
typedef enumdocumented (*documented)(structdocumented);

typedef vec1 (*ambiguous_1)(vec1);

typedef vec2 (*ambiguous_2)(vec2);

typedef bool (*ambiguous_3)(vec1, vec2);

typedef vec (*namespaced_type)(vec);

typedef optionvec (*namespaced_inner_option)(optionvec);

typedef slicevec (*namespaced_inner_slice)(slicevec);

typedef slicemutvec (*namespaced_inner_slice_mut)(slicemutvec);

typedef ffierror (*panics)();

typedef enumrenamed (*renamed)(structrenamed);

typedef void (*sleep)(uint64_t);

typedef bool (*weird_1)(weird1u32, weird2u8);

typedef void (*visibility)(visibility1, visibility2);

typedef tupled (*repr_transparent)(tupled, const tupled*);

typedef uint32_t (*pattern_ascii_pointer_1)(const char*);

typedef const char* (*pattern_ascii_pointer_2)();

typedef uint32_t (*pattern_ascii_pointer_len)(const char*, useasciistringpattern);

typedef sliceuseasciistringpattern (*pattern_ascii_pointer_return_slice)();

typedef uint32_t (*pattern_ffi_slice_1)(sliceu32);

typedef uint32_t (*pattern_ffi_slice_1b)(slicemutu32);

typedef vec3f32 (*pattern_ffi_slice_2)(slicevec3f32, int32_t);

typedef void (*pattern_ffi_slice_3)(slicemutu8, callbackslicemut);

typedef void (*pattern_ffi_slice_4)(sliceu8, slicemutu8);

typedef void (*pattern_ffi_slice_5)(const sliceu8*, slicemutu8*);

typedef void (*pattern_ffi_slice_6)(const slicemutu8*, callbacku8);

typedef uint32_t (*pattern_ffi_slice_7)(slicemutconstptri8);

typedef uint8_t (*pattern_ffi_slice_delegate)(callbackffislice);

typedef vec3f32 (*pattern_ffi_slice_delegate_huge)(callbackhugevecslice);

typedef optioninner (*pattern_ffi_option_1)(optioninner);

typedef inner (*pattern_ffi_option_2)(optioninner);

typedef uint8_t (*pattern_ffi_bool)(uint8_t);

typedef char (*pattern_ffi_cchar)(char);

typedef const char* (*pattern_ffi_cchar_const_pointer)(const char*);

typedef char* (*pattern_ffi_cchar_mut_pointer)(char*);

typedef uint64_t (*pattern_api_guard)();

typedef uint32_t (*pattern_callback_1)(mycallback, uint32_t);

typedef mycallbackvoid (*pattern_callback_2)(mycallbackvoid);

typedef void (*pattern_callback_3)(delegatecallbackmycallbackcontextual, uint32_t);

typedef uint32_t (*pattern_callback_4)(mycallbacknamespaced, uint32_t);

typedef sumdelegate1 (*pattern_callback_5)();

typedef sumdelegate2 (*pattern_callback_6)();

typedef ffierror (*pattern_callback_7)(sumdelegatereturn, sumdelegatereturn2, int32_t, int32_t, int32_t*);

typedef void (*pattern_surrogates_1)(local, container*);

/// Destroys the given instance.
///
/// # Safety
///
/// The passed parameter MUST have been created with the corresponding init function;
/// passing any other value results in undefined behavior.
typedef ffierror (*simple_service_destroy)(simpleservice**);

/// The constructor must return a `Result<Self, Error>`.
typedef ffierror (*simple_service_new_with)(simpleservice**, uint32_t);

typedef ffierror (*simple_service_new_without)(simpleservice**);

typedef ffierror (*simple_service_new_with_string)(simpleservice**, const char*);

typedef ffierror (*simple_service_new_failing)(simpleservice**, uint8_t);

/// Methods returning a Result<(), _> are the default and do not
/// need annotations.
typedef ffierror (*simple_service_method_result)(const simpleservice*, uint32_t);

typedef uint32_t (*simple_service_method_value)(const simpleservice*, uint32_t);

/// This method should be documented.
///
/// Multiple lines.
typedef void (*simple_service_method_void)(const simpleservice*);

/// Regular void functions don't need an annotation.
typedef void (*simple_service_method_void2)(const simpleservice*);

typedef uint8_t (*simple_service_method_mut_self)(simpleservice*, sliceu8);

/// Single line.
typedef void (*simple_service_method_mut_self_void)(simpleservice*, slicebool);

typedef uint8_t (*simple_service_method_mut_self_ref)(simpleservice*, const uint8_t*, uint8_t*);

typedef uint8_t (*simple_service_method_mut_self_ref_slice)(simpleservice*, const uint8_t*, uint8_t*, sliceu8);

typedef uint8_t (*simple_service_method_mut_self_ref_slice_limited)(simpleservice*, const uint8_t*, uint8_t*, sliceu8, sliceu8);

typedef ffierror (*simple_service_method_mut_self_ffi_error)(simpleservice*, slicemutu8);

typedef ffierror (*simple_service_method_mut_self_no_error)(simpleservice*, slicemutu8);

/// Warning, you _must_ discard the returned slice object before calling into this service
/// again, as otherwise undefined behavior might happen.
typedef sliceu32 (*simple_service_return_slice)(simpleservice*);

/// Warning, you _must_ discard the returned slice object before calling into this service
/// again, as otherwise undefined behavior might happen.
typedef slicemutu32 (*simple_service_return_slice_mut)(simpleservice*);

/// This function has no panic safeguards. It will be a bit faster to
/// call, but if it panics your host app will be in an undefined state.
typedef const char* (*simple_service_return_string)(simpleservice*);

typedef ffierror (*simple_service_method_void_ffi_error)(simpleservice*);

typedef ffierror (*simple_service_method_callback)(simpleservice*, mycallback);

typedef ffierror (*simple_service_method_callback_ffi_return)(simpleservice*, sumdelegatereturn);

typedef ffierror (*simple_service_method_callback_ffi_return_with_slice)(simpleservice*, sumdelegatereturn, slicei32);

/// Destroys the given instance.
///
/// # Safety
///
/// The passed parameter MUST have been created with the corresponding init function;
/// passing any other value results in undefined behavior.
typedef ffierror (*simple_service_lifetime_destroy)(simpleservicelifetime**);

typedef ffierror (*simple_service_lifetime_new_with)(simpleservicelifetime**, const uint32_t*);

typedef void (*simple_service_lifetime_method_lt)(simpleservicelifetime*, slicebool);

typedef void (*simple_service_lifetime_method_lt2)(simpleservicelifetime*, slicebool);

typedef const char* (*simple_service_lifetime_return_string_accept_slice)(simpleservicelifetime*, sliceu8);

typedef ffierror (*simple_service_lifetime_method_void_ffi_error)(simpleservicelifetime*);


#ifdef __cplusplus
}
#endif

#endif /* interoptopus_generated */
