use crate::converter::get_slice_type_argument;
use crate::Interop;
use interoptopus::lang::c::CompositeType;
use interoptopus::writer::IndentWriter;
use interoptopus::{indented, Error};

pub fn write_pattern_slice(i: &Interop, w: &mut IndentWriter, slice: &CompositeType) -> Result<(), Error> {
    i.debug(w, "write_pattern_slice")?;

    let name = slice.rust_name();
    let inner = get_slice_type_argument(slice);

    indented!(w, r"[NativeMarshalling(typeof(MarshallerMeta))]")?;
    indented!(w, r"public partial struct {} : IEnumerable<{}>, IDisposable", name, inner)?;
    indented!(w, r"{{")?;
    w.indent();
    indented!(w, r"{}[] _managed;", inner)?;
    indented!(w, r"IntPtr _data;")?;
    indented!(w, r"ulong _len;")?;
    indented!(w, r"bool _wePinned;")?;
    w.newline()?;
    indented!(w, r"public int Count => _managed?.Length ?? (int)_len;")?;
    w.newline()?;
    indented!(w, r"public unsafe ReadOnlySpan<{}> ReadOnlySpan", inner)?;
    indented!(w, r"{{")?;
    w.indent();
    indented!(w, r"get")?;
    indented!(w, r"{{")?;
    w.indent();
    indented!(w, r"if (_managed is not null)")?;
    indented!(w, r"{{")?;
    indented!(w, [()], r"return new ReadOnlySpan<{}>(_managed);", inner)?;
    indented!(w, r"}}")?;
    indented!(w, r"return new ReadOnlySpan<{}>(_data.ToPointer(), (int)_len);", inner)?;
    w.unindent();
    indented!(w, r"}}")?;
    w.unindent();
    indented!(w, r"}}")?;
    w.newline()?;
    indented!(w, r"public unsafe {} this[int i]", inner)?;
    indented!(w, r"{{")?;
    w.indent();
    indented!(w, r"get")?;
    indented!(w, r"{{")?;
    w.indent();
    indented!(w, r"if (i >= Count) throw new IndexOutOfRangeException();")?;
    indented!(w, r"if (_managed is not null)")?;
    indented!(w, r"{{")?;
    indented!(w, [()], r"return _managed[i];")?;
    indented!(w, r"}}")?;
    indented!(w, r"return Unsafe.Read<{}>((void*)IntPtr.Add(_data, i * Unsafe.SizeOf<{}>()));", inner, inner)?;
    w.unindent();
    indented!(w, r"}}")?;
    w.unindent();
    indented!(w, r"}}")?;
    w.newline()?;
    indented!(w, r"public {}(GCHandle handle, ulong count)", name)?;
    indented!(w, r"{{")?;
    w.indent();
    indented!(w, r"_data = handle.AddrOfPinnedObject();")?;
    indented!(w, r"_len = count;")?;
    w.unindent();
    indented!(w, r"}}")?;
    w.newline()?;
    indented!(w, r"public {}(IntPtr handle, ulong count)", name)?;
    indented!(w, r"{{")?;
    w.indent();
    indented!(w, r"_data = handle;")?;
    indented!(w, r"_len = count;")?;
    w.unindent();
    indented!(w, r"}}")?;
    w.newline()?;
    indented!(w, r"public {}({}[] managed)", name, inner)?;
    indented!(w, r"{{")?;
    w.indent();
    indented!(w, r"_managed = managed;")?;
    indented!(w, r"_data = GCHandle.Alloc(managed, GCHandleType.Pinned).AddrOfPinnedObject();")?;
    indented!(w, r"_len = (ulong) managed.Length;")?;
    indented!(w, r"_wePinned = true;")?;
    w.unindent();
    indented!(w, r"}}")?;
    w.newline()?;
    indented!(w, r"public IEnumerator<{}> GetEnumerator()", inner)?;
    indented!(w, r"{{")?;
    w.indent();
    indented!(w, r"for (var i = 0; i < Count; ++i)")?;
    indented!(w, r"{{")?;
    w.indent();
    indented!(w, r"yield return this[i];")?;
    w.unindent();
    indented!(w, r"}}")?;
    w.unindent();
    indented!(w, r"}}")?;
    w.newline()?;
    indented!(w, r"IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();")?;
    w.newline()?;
    indented!(w, r"public void Dispose()")?;
    indented!(w, r"{{")?;
    w.indent();
    indented!(w, r"if (_wePinned && _data != IntPtr.Zero)")?;
    indented!(w, r"{{")?;
    w.indent();
    indented!(w, r"Marshal.FreeHGlobal(_data);")?;
    indented!(w, r"_data = IntPtr.Zero;")?;
    w.unindent();
    indented!(w, r"}}")?;
    indented!(w, r"_managed = null;")?;
    w.unindent();
    indented!(w, r"}}")?;
    w.newline()?;
    indented!(w, r"[CustomMarshaller(typeof({}), MarshalMode.Default, typeof(Marshaller))]", name)?;
    indented!(w, r"private struct MarshallerMeta {{ }}")?;
    w.newline()?;
    indented!(w, r"[StructLayout(LayoutKind.Sequential)]")?;
    indented!(w, r"public struct Unmanaged")?;
    indented!(w, r"{{")?;
    indented!(w, [()], r"public IntPtr Data;")?;
    indented!(w, [()], r"public ulong Len;")?;
    w.newline()?;
    indented!(w, [()], r"public {} Managed()", name)?;
    indented!(w, [()], r"{{")?;
    indented!(w, [()()], r"return new {}(Data, Len);", name)?;
    indented!(w, [()], r"}}")?;
    indented!(w, r"}}")?;
    w.newline()?;
    indented!(w, r"public ref struct Marshaller")?;
    indented!(w, r"{{")?;
    w.indent();
    indented!(w, r"private {} managed;", name)?;
    indented!(w, r"private Unmanaged native;")?;
    indented!(w, r"private Unmanaged sourceNative;")?;
    indented!(w, r"private GCHandle? pinned;")?;
    indented!(w, r"private {} marshalled;", name)?;
    w.newline()?;
    indented!(w, r"public void FromManaged({} managed) {{ this.managed = managed; }}", name)?;
    indented!(w, r"public Unmanaged ToUnmanaged() => new Unmanaged {{ Data = managed._data, Len = managed._len }};")?;
    indented!(w, r"public void FromUnmanaged(Unmanaged unmanaged) {{ sourceNative = unmanaged; }}")?;
    indented!(w, r"public unsafe {} ToManaged() => new {}(sourceNative.Data, sourceNative.Len);", name, name)?;
    indented!(w, r"public void Free() {{ }}")?;
    w.unindent();
    indented!(w, r"}}")?;
    w.unindent();
    indented!(w, r"}}")?;
    Ok(())
}

pub fn write_pattern_slice_mut(i: &Interop, w: &mut IndentWriter, slice: &CompositeType) -> Result<(), Error> {
    i.debug(w, "write_pattern_slice_mut")?;

    let name = slice.rust_name();
    let inner = get_slice_type_argument(slice);

    indented!(w, r"[NativeMarshalling(typeof(MarshallerMeta))]")?;
    indented!(w, r"public partial struct {} : IEnumerable<{}>, IDisposable", name, inner)?;
    indented!(w, r"{{")?;
    w.indent();
    indented!(w, r"{}[] _managed;", inner)?;
    indented!(w, r"IntPtr _data;")?;
    indented!(w, r"ulong _len;")?;
    indented!(w, r"bool _wePinned;")?;
    w.newline()?;
    indented!(w, r"public int Count => _managed?.Length ?? (int)_len;")?;
    w.newline()?;
    indented!(w, r"public unsafe ReadOnlySpan<{}> ReadOnlySpan", inner)?;
    indented!(w, r"{{")?;
    w.indent();
    indented!(w, r"get")?;
    indented!(w, r"{{")?;
    w.indent();
    indented!(w, r"if (_managed is not null)")?;
    indented!(w, r"{{")?;
    indented!(w, [()], r"return new ReadOnlySpan<{}>(_managed);", inner)?;
    indented!(w, r"}}")?;
    indented!(w, r"return new ReadOnlySpan<{}>(_data.ToPointer(), (int)_len);", inner)?;
    w.unindent();
    indented!(w, r"}}")?;
    w.unindent();
    indented!(w, r"}}")?;
    w.newline()?;
    indented!(w, r"public unsafe {} this[int i]", inner)?;
    indented!(w, r"{{")?;
    w.indent();
    indented!(w, r"get")?;
    indented!(w, r"{{")?;
    w.indent();
    indented!(w, r"if (i >= Count) throw new IndexOutOfRangeException();")?;
    indented!(w, r"if (_managed is not null)")?;
    indented!(w, r"{{")?;
    indented!(w, [()], r"return _managed[i];")?;
    indented!(w, r"}}")?;
    indented!(w, r"return Unsafe.Read<{}>((void*)IntPtr.Add(_data, i * Unsafe.SizeOf<{}>()));", inner, inner)?;
    w.unindent();
    indented!(w, r"}}")?;
    indented!(w, r"set")?;
    indented!(w, r"{{")?;
    w.indent();
    indented!(w, r"if (i >= Count) throw new IndexOutOfRangeException();")?;
    indented!(w, r"var d = ({}*) _data.ToPointer();", inner)?;
    indented!(w, r"d[i] = value;")?;
    w.unindent();
    indented!(w, r"}}")?;
    w.unindent();
    indented!(w, r"}}")?;
    w.newline()?;
    indented!(w, r"public {}(GCHandle handle, ulong count)", name)?;
    indented!(w, r"{{")?;
    w.indent();
    indented!(w, r"_data = handle.AddrOfPinnedObject();")?;
    indented!(w, r"_len = count;")?;
    w.unindent();
    indented!(w, r"}}")?;
    w.newline()?;
    indented!(w, r"public {}(IntPtr handle, ulong count)", name)?;
    indented!(w, r"{{")?;
    w.indent();
    indented!(w, r"_data = handle;")?;
    indented!(w, r"_len = count;")?;
    w.unindent();
    indented!(w, r"}}")?;
    w.newline()?;
    indented!(w, r"public {}({}[] managed)", name, inner)?;
    indented!(w, r"{{")?;
    w.indent();
    indented!(w, r"_managed = managed;")?;
    indented!(w, r"_data = GCHandle.Alloc(managed, GCHandleType.Pinned).AddrOfPinnedObject();")?;
    indented!(w, r"_len = (ulong) managed.Length;")?;
    indented!(w, r"_wePinned = true;")?;
    w.unindent();
    indented!(w, r"}}")?;
    w.newline()?;
    indented!(w, r"public IEnumerator<{}> GetEnumerator()", inner)?;
    indented!(w, r"{{")?;
    w.indent();
    indented!(w, r"for (var i = 0; i < Count; ++i)")?;
    indented!(w, r"{{")?;
    w.indent();
    indented!(w, r"yield return this[i];")?;
    w.unindent();
    indented!(w, r"}}")?;
    w.unindent();
    indented!(w, r"}}")?;
    w.newline()?;
    indented!(w, r"IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();")?;
    w.newline()?;
    indented!(w, r"public void Dispose()")?;
    indented!(w, r"{{")?;
    w.indent();
    indented!(w, r"if (_wePinned && _data != IntPtr.Zero)")?;
    indented!(w, r"{{")?;
    w.indent();
    indented!(w, r"Marshal.FreeHGlobal(_data);")?;
    indented!(w, r"_data = IntPtr.Zero;")?;
    w.unindent();
    indented!(w, r"}}")?;
    indented!(w, r"_managed = null;")?;
    w.unindent();
    indented!(w, r"}}")?;
    w.newline()?;
    indented!(w, r"[CustomMarshaller(typeof({}), MarshalMode.Default, typeof(Marshaller))]", name)?;
    indented!(w, r"private struct MarshallerMeta {{ }}")?;
    w.newline()?;
    indented!(w, r"[StructLayout(LayoutKind.Sequential)]")?;
    indented!(w, r"public struct Unmanaged")?;
    indented!(w, r"{{")?;
    indented!(w, [()], r"public IntPtr Data;")?;
    indented!(w, [()], r"public ulong Len;")?;
    w.newline()?;
    indented!(w, [()], r"public {} Managed()", name)?;
    indented!(w, [()], r"{{")?;
    indented!(w, [()()], r"return new {}(Data, Len);", name)?;
    indented!(w, [()], r"}}")?;
    indented!(w, r"}}")?;
    w.newline()?;
    indented!(w, r"public ref struct Marshaller")?;
    indented!(w, r"{{")?;
    w.indent();
    indented!(w, r"private {} managed;", name)?;
    indented!(w, r"private Unmanaged native;")?;
    indented!(w, r"private Unmanaged sourceNative;")?;
    indented!(w, r"private GCHandle? pinned;")?;
    indented!(w, r"private {} marshalled;", name)?;
    w.newline()?;
    indented!(w, r"public void FromManaged({} managed) {{ this.managed = managed; }}", name)?;
    indented!(w, r"public Unmanaged ToUnmanaged() => new Unmanaged {{ Data = managed._data, Len = managed._len }};")?;
    indented!(w, r"public void FromUnmanaged(Unmanaged unmanaged) {{ sourceNative = unmanaged; }}")?;
    indented!(w, r"public unsafe {} ToManaged() => new {}(sourceNative.Data, sourceNative.Len);", name, name)?;
    indented!(w, r"public void Free() {{ }}")?;
    w.unindent();
    indented!(w, r"}}")?;
    w.unindent();
    indented!(w, r"}}")?;
    Ok(())
}
